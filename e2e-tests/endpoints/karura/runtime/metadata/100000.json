{
    "magicNumber": "1635018093",
    "metadata": {
      "v13": {
        "modules": [
          {
            "name": "System",
            "storage": {
              "prefix": "System",
              "items": [
                {
                  "name": "Account",
                  "modifier": "Default",
                  "type": {
                    "map": {
                      "hasher": "Blake2_128Concat",
                      "key": "AccountId",
                      "value": "AccountInfo",
                      "linked": false
                    }
                  },
                  "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                  "docs": [
                    " The full account information for a particular account ID."
                  ]
                },
                {
                  "name": "ExtrinsicCount",
                  "modifier": "Optional",
                  "type": {
                    "plain": "u32"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Total extrinsics count for the current block."
                  ]
                },
                {
                  "name": "BlockWeight",
                  "modifier": "Default",
                  "type": {
                    "plain": "ConsumedWeight"
                  },
                  "fallback": "0x000000000000000000000000000000000000000000000000",
                  "docs": [
                    " The current weight for the block."
                  ]
                },
                {
                  "name": "AllExtrinsicsLen",
                  "modifier": "Optional",
                  "type": {
                    "plain": "u32"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Total length (in bytes) for all extrinsics put together, for the current block."
                  ]
                },
                {
                  "name": "BlockHash",
                  "modifier": "Default",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "BlockNumber",
                      "value": "Hash",
                      "linked": false
                    }
                  },
                  "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                  "docs": [
                    " Map of block numbers to block hashes."
                  ]
                },
                {
                  "name": "ExtrinsicData",
                  "modifier": "Default",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "u32",
                      "value": "Bytes",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Extrinsics data for the current block (maps an extrinsic's index to its data)."
                  ]
                },
                {
                  "name": "Number",
                  "modifier": "Default",
                  "type": {
                    "plain": "BlockNumber"
                  },
                  "fallback": "0x00000000",
                  "docs": [
                    " The current block number being processed. Set by `execute_block`."
                  ]
                },
                {
                  "name": "ParentHash",
                  "modifier": "Default",
                  "type": {
                    "plain": "Hash"
                  },
                  "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                  "docs": [
                    " Hash of the previous block."
                  ]
                },
                {
                  "name": "Digest",
                  "modifier": "Default",
                  "type": {
                    "plain": "DigestOf"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Digest of the current block, also part of the block header."
                  ]
                },
                {
                  "name": "Events",
                  "modifier": "Default",
                  "type": {
                    "plain": "Vec<EventRecord>"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Events deposited for the current block."
                  ]
                },
                {
                  "name": "EventCount",
                  "modifier": "Default",
                  "type": {
                    "plain": "EventIndex"
                  },
                  "fallback": "0x00000000",
                  "docs": [
                    " The number of events in the `Events<T>` list."
                  ]
                },
                {
                  "name": "EventTopics",
                  "modifier": "Default",
                  "type": {
                    "map": {
                      "hasher": "Blake2_128Concat",
                      "key": "Hash",
                      "value": "Vec<(BlockNumber,EventIndex)>",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                    " of events in the `<Events<T>>` list.",
                    "",
                    " All topic vectors have deterministic storage locations depending on the topic. This",
                    " allows light-clients to leverage the changes trie storage tracking mechanism and",
                    " in case of changes fetch the list of events of interest.",
                    "",
                    " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
                    " the `EventIndex` then in case if the topic has the same contents on the next block",
                    " no notification will be triggered thus the event might be lost."
                  ]
                },
                {
                  "name": "LastRuntimeUpgrade",
                  "modifier": "Optional",
                  "type": {
                    "plain": "LastRuntimeUpgradeInfo"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
                  ]
                },
                {
                  "name": "UpgradedToU32RefCount",
                  "modifier": "Default",
                  "type": {
                    "plain": "bool"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
                  ]
                },
                {
                  "name": "UpgradedToTripleRefCount",
                  "modifier": "Default",
                  "type": {
                    "plain": "bool"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                    " (default) if not."
                  ]
                },
                {
                  "name": "ExecutionPhase",
                  "modifier": "Optional",
                  "type": {
                    "plain": "Phase"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The execution phase of the block."
                  ]
                }
              ]
            },
            "calls": [
              {
                "name": "fill_block",
                "args": [
                  {
                    "name": "_ratio",
                    "type": "Perbill"
                  }
                ],
                "docs": [
                  " A dispatch that will fill the block weight up to the given ratio."
                ]
              },
              {
                "name": "remark",
                "args": [
                  {
                    "name": "_remark",
                    "type": "Bytes"
                  }
                ],
                "docs": [
                  " Make some on-chain remark.",
                  "",
                  " # <weight>",
                  " - `O(1)`",
                  " # </weight>"
                ]
              },
              {
                "name": "set_heap_pages",
                "args": [
                  {
                    "name": "pages",
                    "type": "u64"
                  }
                ],
                "docs": [
                  " Set the number of pages in the WebAssembly environment's heap.",
                  "",
                  " # <weight>",
                  " - `O(1)`",
                  " - 1 storage write.",
                  " - Base Weight: 1.405 Âµs",
                  " - 1 write to HEAP_PAGES",
                  " # </weight>"
                ]
              },
              {
                "name": "set_code",
                "args": [
                  {
                    "name": "code",
                    "type": "Bytes"
                  }
                ],
                "docs": [
                  " Set the new runtime code.",
                  "",
                  " # <weight>",
                  " - `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`",
                  " - 1 storage write (codec `O(C)`).",
                  " - 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is expensive).",
                  " - 1 event.",
                  " The weight of this function is dependent on the runtime, but generally this is very expensive.",
                  " We will treat this as a full block.",
                  " # </weight>"
                ]
              },
              {
                "name": "set_code_without_checks",
                "args": [
                  {
                    "name": "code",
                    "type": "Bytes"
                  }
                ],
                "docs": [
                  " Set the new runtime code without doing any checks of the given `code`.",
                  "",
                  " # <weight>",
                  " - `O(C)` where `C` length of `code`",
                  " - 1 storage write (codec `O(C)`).",
                  " - 1 event.",
                  " The weight of this function is dependent on the runtime. We will treat this as a full block.",
                  " # </weight>"
                ]
              },
              {
                "name": "set_changes_trie_config",
                "args": [
                  {
                    "name": "changes_trie_config",
                    "type": "Option<ChangesTrieConfiguration>"
                  }
                ],
                "docs": [
                  " Set the new changes trie configuration.",
                  "",
                  " # <weight>",
                  " - `O(1)`",
                  " - 1 storage write or delete (codec `O(1)`).",
                  " - 1 call to `deposit_log`: Uses `append` API, so O(1)",
                  " - Base Weight: 7.218 Âµs",
                  " - DB Weight:",
                  "     - Writes: Changes Trie, System Digest",
                  " # </weight>"
                ]
              },
              {
                "name": "set_storage",
                "args": [
                  {
                    "name": "items",
                    "type": "Vec<KeyValue>"
                  }
                ],
                "docs": [
                  " Set some items of storage.",
                  "",
                  " # <weight>",
                  " - `O(I)` where `I` length of `items`",
                  " - `I` storage writes (`O(1)`).",
                  " - Base Weight: 0.568 * i Âµs",
                  " - Writes: Number of items",
                  " # </weight>"
                ]
              },
              {
                "name": "kill_storage",
                "args": [
                  {
                    "name": "keys",
                    "type": "Vec<Key>"
                  }
                ],
                "docs": [
                  " Kill some items from storage.",
                  "",
                  " # <weight>",
                  " - `O(IK)` where `I` length of `keys` and `K` length of one key",
                  " - `I` storage deletions.",
                  " - Base Weight: .378 * i Âµs",
                  " - Writes: Number of items",
                  " # </weight>"
                ]
              },
              {
                "name": "kill_prefix",
                "args": [
                  {
                    "name": "prefix",
                    "type": "Key"
                  },
                  {
                    "name": "_subkeys",
                    "type": "u32"
                  }
                ],
                "docs": [
                  " Kill all storage items with a key that starts with the given prefix.",
                  "",
                  " **NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                  " the prefix we are removing to accurately calculate the weight of this function.",
                  "",
                  " # <weight>",
                  " - `O(P)` where `P` amount of keys with prefix `prefix`",
                  " - `P` storage deletions.",
                  " - Base Weight: 0.834 * P Âµs",
                  " - Writes: Number of subkeys + 1",
                  " # </weight>"
                ]
              },
              {
                "name": "remark_with_event",
                "args": [
                  {
                    "name": "remark",
                    "type": "Bytes"
                  }
                ],
                "docs": [
                  " Make some on-chain remark and emit event.",
                  "",
                  " # <weight>",
                  " - `O(b)` where b is the length of the remark.",
                  " - 1 event.",
                  " # </weight>"
                ]
              }
            ],
            "events": [
              {
                "name": "ExtrinsicSuccess",
                "args": [
                  "DispatchInfo"
                ],
                "docs": [
                  " An extrinsic completed successfully. \\[info\\]"
                ]
              },
              {
                "name": "ExtrinsicFailed",
                "args": [
                  "DispatchError",
                  "DispatchInfo"
                ],
                "docs": [
                  " An extrinsic failed. \\[error, info\\]"
                ]
              },
              {
                "name": "CodeUpdated",
                "args": [],
                "docs": [
                  " `:code` was updated."
                ]
              },
              {
                "name": "NewAccount",
                "args": [
                  "AccountId"
                ],
                "docs": [
                  " A new \\[account\\] was created."
                ]
              },
              {
                "name": "KilledAccount",
                "args": [
                  "AccountId"
                ],
                "docs": [
                  " An \\[account\\] was reaped."
                ]
              },
              {
                "name": "Remarked",
                "args": [
                  "AccountId",
                  "Hash"
                ],
                "docs": [
                  " On on-chain remark happened. \\[origin, remark_hash\\]"
                ]
              }
            ],
            "constants": [
              {
                "name": "BlockWeights",
                "type": "BlockWeights",
                "value": "0x00f2052a010000000088526a74000000405973070000000001c05ef1d14500000001002ca07d51000000010000000000000000405973070000000001c0baa3be68000000010088526a7400000001005cb2ec220000004059730700000000000000",
                "docs": [
                  " Block & extrinsics weights: base values and limits."
                ]
              },
              {
                "name": "BlockLength",
                "type": "BlockLength",
                "value": "0x000038000000500000005000",
                "docs": [
                  " The maximum length of a block (in bytes)."
                ]
              },
              {
                "name": "BlockHashCount",
                "type": "BlockNumber",
                "value": "0xb0040000",
                "docs": [
                  " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
                ]
              },
              {
                "name": "DbWeight",
                "type": "RuntimeDbWeight",
                "value": "0x40787d010000000000e1f50500000000",
                "docs": [
                  " The weight of runtime database operations the runtime can invoke."
                ]
              },
              {
                "name": "Version",
                "type": "RuntimeVersion",
                "value": "0x186b6172757261186b617275726101000000ea0300000000000034df6acb689907609b0300000037e397fc7c91f5e40100000040fe3ad401f8959a05000000d2bc9897eed08f1502000000f78b278be53f454c02000000dd718d5cc53262d401000000ab3c0572291feb8b01000000bc9d89904f5b923f0100000037c8bb1350a9a2a8010000006ef953004ba30e5901000000f485c9145d3f0aad01000000e3df3f2aa8a5cc5701000000ea93e3f16f3d69620100000001000000",
                "docs": [
                  " Get the chain's current version."
                ]
              },
              {
                "name": "SS58Prefix",
                "type": "u16",
                "value": "0x0800",
                "docs": [
                  " The designated SS85 prefix of this chain.",
                  "",
                  " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
                  " that the runtime should know about the prefix in order to make use of it as",
                  " an identifier of the chain."
                ]
              }
            ],
            "errors": [
              {
                "name": "InvalidSpecName",
                "docs": [
                  " The name of specification does not match between the current runtime",
                  " and the new runtime."
                ]
              },
              {
                "name": "SpecVersionNeedsToIncrease",
                "docs": [
                  " The specification version is not allowed to decrease between the current runtime",
                  " and the new runtime."
                ]
              },
              {
                "name": "FailedToExtractRuntimeVersion",
                "docs": [
                  " Failed to extract the runtime version from the new runtime.",
                  "",
                  " Either calling `Core_version` or decoding `RuntimeVersion` failed."
                ]
              },
              {
                "name": "NonDefaultComposite",
                "docs": [
                  " Suicide called when the account has non-default composite data."
                ]
              },
              {
                "name": "NonZeroRefCount",
                "docs": [
                  " There is a non-zero reference count preventing the account from being purged."
                ]
              }
            ],
            "index": "0"
          },
          {
            "name": "Timestamp",
            "storage": {
              "prefix": "Timestamp",
              "items": [
                {
                  "name": "Now",
                  "modifier": "Default",
                  "type": {
                    "plain": "Moment"
                  },
                  "fallback": "0x0000000000000000",
                  "docs": [
                    " Current time for the current block."
                  ]
                },
                {
                  "name": "DidUpdate",
                  "modifier": "Default",
                  "type": {
                    "plain": "bool"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Did the timestamp get updated in this block?"
                  ]
                }
              ]
            },
            "calls": [
              {
                "name": "set",
                "args": [
                  {
                    "name": "now",
                    "type": "Compact<Moment>"
                  }
                ],
                "docs": [
                  " Set the current time.",
                  "",
                  " This call should be invoked exactly once per block. It will panic at the finalization",
                  " phase, if this call hasn't been invoked by that time.",
                  "",
                  " The timestamp should be greater than the previous one by the amount specified by",
                  " `MinimumPeriod`.",
                  "",
                  " The dispatch origin for this call must be `Inherent`.",
                  "",
                  " # <weight>",
                  " - `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
                  " - 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in `on_finalize`)",
                  " - 1 event handler `on_timestamp_set`. Must be `O(1)`.",
                  " # </weight>"
                ]
              }
            ],
            "events": null,
            "constants": [
              {
                "name": "MinimumPeriod",
                "type": "Moment",
                "value": "0x7017000000000000",
                "docs": [
                  " The minimum period between blocks. Beware that this is different to the *expected* period",
                  " that the block production apparatus provides. Your chosen consensus system will generally",
                  " work with this to determine a sensible block time. e.g. For Aura, it will be double this",
                  " period on default settings."
                ]
              }
            ],
            "errors": [],
            "index": "1"
          },
          {
            "name": "Scheduler",
            "storage": {
              "prefix": "Scheduler",
              "items": [
                {
                  "name": "Agenda",
                  "modifier": "Default",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "BlockNumber",
                      "value": "Vec<Option<Scheduled>>",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Items to be executed, indexed by the block number that they should be executed on."
                  ]
                },
                {
                  "name": "Lookup",
                  "modifier": "Optional",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "Bytes",
                      "value": "TaskAddress",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Lookup from identity to the block number and index of the task."
                  ]
                },
                {
                  "name": "StorageVersion",
                  "modifier": "Default",
                  "type": {
                    "plain": "Releases"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Storage version of the pallet.",
                    "",
                    " New networks start with last version."
                  ]
                }
              ]
            },
            "calls": [
              {
                "name": "schedule",
                "args": [
                  {
                    "name": "when",
                    "type": "BlockNumber"
                  },
                  {
                    "name": "maybe_periodic",
                    "type": "Option<Period>"
                  },
                  {
                    "name": "priority",
                    "type": "Priority"
                  },
                  {
                    "name": "call",
                    "type": "Call"
                  }
                ],
                "docs": [
                  " Anonymously schedule a task.",
                  "",
                  " # <weight>",
                  " - S = Number of already scheduled calls",
                  " - Base Weight: 22.29 + .126 * S Âµs",
                  " - DB Weight:",
                  "     - Read: Agenda",
                  "     - Write: Agenda",
                  " - Will use base weight of 25 which should be good for up to 30 scheduled calls",
                  " # </weight>"
                ]
              },
              {
                "name": "cancel",
                "args": [
                  {
                    "name": "when",
                    "type": "BlockNumber"
                  },
                  {
                    "name": "index",
                    "type": "u32"
                  }
                ],
                "docs": [
                  " Cancel an anonymously scheduled task.",
                  "",
                  " # <weight>",
                  " - S = Number of already scheduled calls",
                  " - Base Weight: 22.15 + 2.869 * S Âµs",
                  " - DB Weight:",
                  "     - Read: Agenda",
                  "     - Write: Agenda, Lookup",
                  " - Will use base weight of 100 which should be good for up to 30 scheduled calls",
                  " # </weight>"
                ]
              },
              {
                "name": "schedule_named",
                "args": [
                  {
                    "name": "id",
                    "type": "Bytes"
                  },
                  {
                    "name": "when",
                    "type": "BlockNumber"
                  },
                  {
                    "name": "maybe_periodic",
                    "type": "Option<Period>"
                  },
                  {
                    "name": "priority",
                    "type": "Priority"
                  },
                  {
                    "name": "call",
                    "type": "Call"
                  }
                ],
                "docs": [
                  " Schedule a named task.",
                  "",
                  " # <weight>",
                  " - S = Number of already scheduled calls",
                  " - Base Weight: 29.6 + .159 * S Âµs",
                  " - DB Weight:",
                  "     - Read: Agenda, Lookup",
                  "     - Write: Agenda, Lookup",
                  " - Will use base weight of 35 which should be good for more than 30 scheduled calls",
                  " # </weight>"
                ]
              },
              {
                "name": "cancel_named",
                "args": [
                  {
                    "name": "id",
                    "type": "Bytes"
                  }
                ],
                "docs": [
                  " Cancel a named scheduled task.",
                  "",
                  " # <weight>",
                  " - S = Number of already scheduled calls",
                  " - Base Weight: 24.91 + 2.907 * S Âµs",
                  " - DB Weight:",
                  "     - Read: Agenda, Lookup",
                  "     - Write: Agenda, Lookup",
                  " - Will use base weight of 100 which should be good for up to 30 scheduled calls",
                  " # </weight>"
                ]
              },
              {
                "name": "schedule_after",
                "args": [
                  {
                    "name": "after",
                    "type": "BlockNumber"
                  },
                  {
                    "name": "maybe_periodic",
                    "type": "Option<Period>"
                  },
                  {
                    "name": "priority",
                    "type": "Priority"
                  },
                  {
                    "name": "call",
                    "type": "Call"
                  }
                ],
                "docs": [
                  " Anonymously schedule a task after a delay.",
                  "",
                  " # <weight>",
                  " Same as [`schedule`].",
                  " # </weight>"
                ]
              },
              {
                "name": "schedule_named_after",
                "args": [
                  {
                    "name": "id",
                    "type": "Bytes"
                  },
                  {
                    "name": "after",
                    "type": "BlockNumber"
                  },
                  {
                    "name": "maybe_periodic",
                    "type": "Option<Period>"
                  },
                  {
                    "name": "priority",
                    "type": "Priority"
                  },
                  {
                    "name": "call",
                    "type": "Call"
                  }
                ],
                "docs": [
                  " Schedule a named task after a delay.",
                  "",
                  " # <weight>",
                  " Same as [`schedule_named`].",
                  " # </weight>"
                ]
              }
            ],
            "events": [
              {
                "name": "Scheduled",
                "args": [
                  "BlockNumber",
                  "u32"
                ],
                "docs": [
                  " Scheduled some task. \\[when, index\\]"
                ]
              },
              {
                "name": "Canceled",
                "args": [
                  "BlockNumber",
                  "u32"
                ],
                "docs": [
                  " Canceled some task. \\[when, index\\]"
                ]
              },
              {
                "name": "Dispatched",
                "args": [
                  "TaskAddress",
                  "Option<Bytes>",
                  "DispatchResult"
                ],
                "docs": [
                  " Dispatched some task. \\[task, id, result\\]"
                ]
              }
            ],
            "constants": [],
            "errors": [
              {
                "name": "FailedToSchedule",
                "docs": [
                  " Failed to schedule a call"
                ]
              },
              {
                "name": "NotFound",
                "docs": [
                  " Cannot find the scheduled call."
                ]
              },
              {
                "name": "TargetBlockNumberInPast",
                "docs": [
                  " Given target block number is in the past."
                ]
              },
              {
                "name": "RescheduleNoChange",
                "docs": [
                  " Reschedule failed because it does not change scheduled time."
                ]
              }
            ],
            "index": "2"
          },
          {
            "name": "Utility",
            "storage": null,
            "calls": [
              {
                "name": "batch",
                "args": [
                  {
                    "name": "calls",
                    "type": "Vec<Call>"
                  }
                ],
                "docs": [
                  " Send a batch of dispatch calls.",
                  "",
                  " May be called from any origin.",
                  "",
                  " - `calls`: The calls to be dispatched from the same origin.",
                  "",
                  " If origin is root then call are dispatch without checking origin filter. (This includes",
                  " bypassing `frame_system::Config::BaseCallFilter`).",
                  "",
                  " # <weight>",
                  " - Complexity: O(C) where C is the number of calls to be batched.",
                  " # </weight>",
                  "",
                  " This will return `Ok` in all circumstances. To determine the success of the batch, an",
                  " event is deposited. If a call failed and the batch was interrupted, then the",
                  " `BatchInterrupted` event is deposited, along with the number of successful calls made",
                  " and the error of the failed call. If all were successful, then the `BatchCompleted`",
                  " event is deposited."
                ]
              },
              {
                "name": "as_derivative",
                "args": [
                  {
                    "name": "index",
                    "type": "u16"
                  },
                  {
                    "name": "call",
                    "type": "Call"
                  }
                ],
                "docs": [
                  " Send a call through an indexed pseudonym of the sender.",
                  "",
                  " Filter from origin are passed along. The call will be dispatched with an origin which",
                  " use the same filter as the origin of this call.",
                  "",
                  " NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
                  " because you expect `proxy` to have been used prior in the call stack and you do not want",
                  " the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
                  " in the Multisig pallet instead.",
                  "",
                  " NOTE: Prior to version *12, this was called `as_limited_sub`.",
                  "",
                  " The dispatch origin for this call must be _Signed_."
                ]
              },
              {
                "name": "batch_all",
                "args": [
                  {
                    "name": "calls",
                    "type": "Vec<Call>"
                  }
                ],
                "docs": [
                  " Send a batch of dispatch calls and atomically execute them.",
                  " The whole transaction will rollback and fail if any of the calls failed.",
                  "",
                  " May be called from any origin.",
                  "",
                  " - `calls`: The calls to be dispatched from the same origin.",
                  "",
                  " If origin is root then call are dispatch without checking origin filter. (This includes",
                  " bypassing `frame_system::Config::BaseCallFilter`).",
                  "",
                  " # <weight>",
                  " - Complexity: O(C) where C is the number of calls to be batched.",
                  " # </weight>"
                ]
              }
            ],
            "events": [
              {
                "name": "BatchInterrupted",
                "args": [
                  "u32",
                  "DispatchError"
                ],
                "docs": [
                  " Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                  " well as the error. \\[index, error\\]"
                ]
              },
              {
                "name": "BatchCompleted",
                "args": [],
                "docs": [
                  " Batch of dispatches completed fully with no error."
                ]
              }
            ],
            "constants": [],
            "errors": [],
            "index": "3"
          },
          {
            "name": "Multisig",
            "storage": {
              "prefix": "Multisig",
              "items": [
                {
                  "name": "Multisigs",
                  "modifier": "Optional",
                  "type": {
                    "doubleMap": {
                      "hasher": "Twox64Concat",
                      "key1": "AccountId",
                      "key2": "[u8;32]",
                      "value": "Multisig",
                      "key2Hasher": "Blake2_128Concat"
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The set of open multisig operations."
                  ]
                },
                {
                  "name": "Calls",
                  "modifier": "Optional",
                  "type": {
                    "map": {
                      "hasher": "Identity",
                      "key": "[u8;32]",
                      "value": "(OpaqueCall,AccountId,BalanceOf)",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": []
                }
              ]
            },
            "calls": [
              {
                "name": "as_multi_threshold_1",
                "args": [
                  {
                    "name": "other_signatories",
                    "type": "Vec<AccountId>"
                  },
                  {
                    "name": "call",
                    "type": "Call"
                  }
                ],
                "docs": [
                  " Immediately dispatch a multi-signature call using a single approval from the caller.",
                  "",
                  " The dispatch origin for this call must be _Signed_.",
                  "",
                  " - `other_signatories`: The accounts (other than the sender) who are part of the",
                  " multi-signature, but do not participate in the approval process.",
                  " - `call`: The call to be executed.",
                  "",
                  " Result is equivalent to the dispatched result.",
                  "",
                  " # <weight>",
                  " O(Z + C) where Z is the length of the call and C its execution weight.",
                  " -------------------------------",
                  " - DB Weight: None",
                  " - Plus Call Weight",
                  " # </weight>"
                ]
              },
              {
                "name": "as_multi",
                "args": [
                  {
                    "name": "threshold",
                    "type": "u16"
                  },
                  {
                    "name": "other_signatories",
                    "type": "Vec<AccountId>"
                  },
                  {
                    "name": "maybe_timepoint",
                    "type": "Option<Timepoint>"
                  },
                  {
                    "name": "call",
                    "type": "OpaqueCall"
                  },
                  {
                    "name": "store_call",
                    "type": "bool"
                  },
                  {
                    "name": "max_weight",
                    "type": "Weight"
                  }
                ],
                "docs": [
                  " Register approval for a dispatch to be made from a deterministic composite account if",
                  " approved by a total of `threshold - 1` of `other_signatories`.",
                  "",
                  " If there are enough, then dispatch the call.",
                  "",
                  " Payment: `DepositBase` will be reserved if this is the first approval, plus",
                  " `threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                  " is cancelled.",
                  "",
                  " The dispatch origin for this call must be _Signed_.",
                  "",
                  " - `threshold`: The total number of approvals for this dispatch before it is executed.",
                  " - `other_signatories`: The accounts (other than the sender) who can approve this",
                  " dispatch. May not be empty.",
                  " - `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                  " not the first approval, then it must be `Some`, with the timepoint (block number and",
                  " transaction index) of the first approval transaction.",
                  " - `call`: The call to be executed.",
                  "",
                  " NOTE: Unless this is the final approval, you will generally want to use",
                  " `approve_as_multi` instead, since it only requires a hash of the call.",
                  "",
                  " Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
                  " on success, result is `Ok` and the result from the interior call, if it was executed,",
                  " may be found in the deposited `MultisigExecuted` event.",
                  "",
                  " # <weight>",
                  " - `O(S + Z + Call)`.",
                  " - Up to one balance-reserve or unreserve operation.",
                  " - One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                  "   signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                  " - One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.",
                  " - One encode & hash, both of complexity `O(S)`.",
                  " - Up to one binary search and insert (`O(logS + S)`).",
                  " - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                  " - One event.",
                  " - The weight of the `call`.",
                  " - Storage: inserts one item, value size bounded by `MaxSignatories`, with a",
                  "   deposit taken for its lifetime of",
                  "   `DepositBase + threshold * DepositFactor`.",
                  " -------------------------------",
                  " - DB Weight:",
                  "     - Reads: Multisig Storage, [Caller Account], Calls (if `store_call`)",
                  "     - Writes: Multisig Storage, [Caller Account], Calls (if `store_call`)",
                  " - Plus Call Weight",
                  " # </weight>"
                ]
              },
              {
                "name": "approve_as_multi",
                "args": [
                  {
                    "name": "threshold",
                    "type": "u16"
                  },
                  {
                    "name": "other_signatories",
                    "type": "Vec<AccountId>"
                  },
                  {
                    "name": "maybe_timepoint",
                    "type": "Option<Timepoint>"
                  },
                  {
                    "name": "call_hash",
                    "type": "[u8;32]"
                  },
                  {
                    "name": "max_weight",
                    "type": "Weight"
                  }
                ],
                "docs": [
                  " Register approval for a dispatch to be made from a deterministic composite account if",
                  " approved by a total of `threshold - 1` of `other_signatories`.",
                  "",
                  " Payment: `DepositBase` will be reserved if this is the first approval, plus",
                  " `threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                  " is cancelled.",
                  "",
                  " The dispatch origin for this call must be _Signed_.",
                  "",
                  " - `threshold`: The total number of approvals for this dispatch before it is executed.",
                  " - `other_signatories`: The accounts (other than the sender) who can approve this",
                  " dispatch. May not be empty.",
                  " - `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                  " not the first approval, then it must be `Some`, with the timepoint (block number and",
                  " transaction index) of the first approval transaction.",
                  " - `call_hash`: The hash of the call to be executed.",
                  "",
                  " NOTE: If this is the final approval, you will want to use `as_multi` instead.",
                  "",
                  " # <weight>",
                  " - `O(S)`.",
                  " - Up to one balance-reserve or unreserve operation.",
                  " - One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                  "   signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                  " - One encode & hash, both of complexity `O(S)`.",
                  " - Up to one binary search and insert (`O(logS + S)`).",
                  " - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                  " - One event.",
                  " - Storage: inserts one item, value size bounded by `MaxSignatories`, with a",
                  "   deposit taken for its lifetime of",
                  "   `DepositBase + threshold * DepositFactor`.",
                  " ----------------------------------",
                  " - DB Weight:",
                  "     - Read: Multisig Storage, [Caller Account]",
                  "     - Write: Multisig Storage, [Caller Account]",
                  " # </weight>"
                ]
              },
              {
                "name": "cancel_as_multi",
                "args": [
                  {
                    "name": "threshold",
                    "type": "u16"
                  },
                  {
                    "name": "other_signatories",
                    "type": "Vec<AccountId>"
                  },
                  {
                    "name": "timepoint",
                    "type": "Timepoint"
                  },
                  {
                    "name": "call_hash",
                    "type": "[u8;32]"
                  }
                ],
                "docs": [
                  " Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
                  " for this operation will be unreserved on success.",
                  "",
                  " The dispatch origin for this call must be _Signed_.",
                  "",
                  " - `threshold`: The total number of approvals for this dispatch before it is executed.",
                  " - `other_signatories`: The accounts (other than the sender) who can approve this",
                  " dispatch. May not be empty.",
                  " - `timepoint`: The timepoint (block number and transaction index) of the first approval",
                  " transaction for this dispatch.",
                  " - `call_hash`: The hash of the call to be executed.",
                  "",
                  " # <weight>",
                  " - `O(S)`.",
                  " - Up to one balance-reserve or unreserve operation.",
                  " - One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                  "   signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                  " - One encode & hash, both of complexity `O(S)`.",
                  " - One event.",
                  " - I/O: 1 read `O(S)`, one remove.",
                  " - Storage: removes one item.",
                  " ----------------------------------",
                  " - DB Weight:",
                  "     - Read: Multisig Storage, [Caller Account], Refund Account, Calls",
                  "     - Write: Multisig Storage, [Caller Account], Refund Account, Calls",
                  " # </weight>"
                ]
              }
            ],
            "events": [
              {
                "name": "NewMultisig",
                "args": [
                  "AccountId",
                  "AccountId",
                  "CallHash"
                ],
                "docs": [
                  " A new multisig operation has begun. \\[approving, multisig, call_hash\\]"
                ]
              },
              {
                "name": "MultisigApproval",
                "args": [
                  "AccountId",
                  "Timepoint",
                  "AccountId",
                  "CallHash"
                ],
                "docs": [
                  " A multisig operation has been approved by someone.",
                  " \\[approving, timepoint, multisig, call_hash\\]"
                ]
              },
              {
                "name": "MultisigExecuted",
                "args": [
                  "AccountId",
                  "Timepoint",
                  "AccountId",
                  "CallHash",
                  "DispatchResult"
                ],
                "docs": [
                  " A multisig operation has been executed. \\[approving, timepoint, multisig, call_hash\\]"
                ]
              },
              {
                "name": "MultisigCancelled",
                "args": [
                  "AccountId",
                  "Timepoint",
                  "AccountId",
                  "CallHash"
                ],
                "docs": [
                  " A multisig operation has been cancelled. \\[cancelling, timepoint, multisig, call_hash\\]"
                ]
              }
            ],
            "constants": [
              {
                "name": "DepositBase",
                "type": "BalanceOf",
                "value": "0x0078cfb5d30100000000000000000000",
                "docs": [
                  " The base amount of currency needed to reserve for creating a multisig execution or to store",
                  " a dispatch call for later.",
                  "",
                  " This is held for an additional storage item whose value size is",
                  " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
                  " `32 + sizeof(AccountId)` bytes."
                ]
              },
              {
                "name": "DepositFactor",
                "type": "BalanceOf",
                "value": "0x0020bcbe000000000000000000000000",
                "docs": [
                  " The amount of currency needed per unit threshold when creating a multisig execution.",
                  "",
                  " This is held for adding 32 bytes more into a pre-existing storage value."
                ]
              },
              {
                "name": "MaxSignatories",
                "type": "u16",
                "value": "0x6400",
                "docs": [
                  " The maximum amount of signatories allowed in the multisig."
                ]
              }
            ],
            "errors": [
              {
                "name": "MinimumThreshold",
                "docs": [
                  " Threshold must be 2 or greater."
                ]
              },
              {
                "name": "AlreadyApproved",
                "docs": [
                  " Call is already approved by this signatory."
                ]
              },
              {
                "name": "NoApprovalsNeeded",
                "docs": [
                  " Call doesn't need any (more) approvals."
                ]
              },
              {
                "name": "TooFewSignatories",
                "docs": [
                  " There are too few signatories in the list."
                ]
              },
              {
                "name": "TooManySignatories",
                "docs": [
                  " There are too many signatories in the list."
                ]
              },
              {
                "name": "SignatoriesOutOfOrder",
                "docs": [
                  " The signatories were provided out of order; they should be ordered."
                ]
              },
              {
                "name": "SenderInSignatories",
                "docs": [
                  " The sender was contained in the other signatories; it shouldn't be."
                ]
              },
              {
                "name": "NotFound",
                "docs": [
                  " Multisig operation not found when attempting to cancel."
                ]
              },
              {
                "name": "NotOwner",
                "docs": [
                  " Only the account that originally created the multisig is able to cancel it."
                ]
              },
              {
                "name": "NoTimepoint",
                "docs": [
                  " No timepoint was given, yet the multisig operation is already underway."
                ]
              },
              {
                "name": "WrongTimepoint",
                "docs": [
                  " A different timepoint was given to the multisig operation that is underway."
                ]
              },
              {
                "name": "UnexpectedTimepoint",
                "docs": [
                  " A timepoint was given, yet no multisig operation is underway."
                ]
              },
              {
                "name": "MaxWeightTooLow",
                "docs": [
                  " The maximum weight information provided was too low."
                ]
              },
              {
                "name": "AlreadyStored",
                "docs": [
                  " The data to be stored is already stored."
                ]
              }
            ],
            "index": "4"
          },
          {
            "name": "Proxy",
            "storage": {
              "prefix": "Proxy",
              "items": [
                {
                  "name": "Proxies",
                  "modifier": "Default",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "AccountId",
                      "value": "(Vec<ProxyDefinition>,BalanceOf)",
                      "linked": false
                    }
                  },
                  "fallback": "0x0000000000000000000000000000000000",
                  "docs": [
                    " The set of account proxies. Maps the account which has delegated to the accounts",
                    " which are being delegated to, together with the amount held on deposit."
                  ]
                },
                {
                  "name": "Announcements",
                  "modifier": "Default",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "AccountId",
                      "value": "(Vec<Announcement>,BalanceOf)",
                      "linked": false
                    }
                  },
                  "fallback": "0x0000000000000000000000000000000000",
                  "docs": [
                    " The announcements made by the proxy (key)."
                  ]
                }
              ]
            },
            "calls": [
              {
                "name": "proxy",
                "args": [
                  {
                    "name": "real",
                    "type": "AccountId"
                  },
                  {
                    "name": "force_proxy_type",
                    "type": "Option<ProxyType>"
                  },
                  {
                    "name": "call",
                    "type": "Call"
                  }
                ],
                "docs": [
                  " Dispatch the given `call` from an account that the sender is authorised for through",
                  " `add_proxy`.",
                  "",
                  " Removes any corresponding announcement(s).",
                  "",
                  " The dispatch origin for this call must be _Signed_.",
                  "",
                  " Parameters:",
                  " - `real`: The account that the proxy will make a call on behalf of.",
                  " - `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                  " - `call`: The call to be made by the `real` account.",
                  "",
                  " # <weight>",
                  " Weight is a function of the number of proxies the user has (P).",
                  " # </weight>"
                ]
              },
              {
                "name": "add_proxy",
                "args": [
                  {
                    "name": "delegate",
                    "type": "AccountId"
                  },
                  {
                    "name": "proxy_type",
                    "type": "ProxyType"
                  },
                  {
                    "name": "delay",
                    "type": "BlockNumber"
                  }
                ],
                "docs": [
                  " Register a proxy account for the sender that is able to make calls on its behalf.",
                  "",
                  " The dispatch origin for this call must be _Signed_.",
                  "",
                  " Parameters:",
                  " - `proxy`: The account that the `caller` would like to make a proxy.",
                  " - `proxy_type`: The permissions allowed for this proxy account.",
                  " - `delay`: The announcement period required of the initial proxy. Will generally be",
                  " zero.",
                  "",
                  " # <weight>",
                  " Weight is a function of the number of proxies the user has (P).",
                  " # </weight>"
                ]
              },
              {
                "name": "remove_proxy",
                "args": [
                  {
                    "name": "delegate",
                    "type": "AccountId"
                  },
                  {
                    "name": "proxy_type",
                    "type": "ProxyType"
                  },
                  {
                    "name": "delay",
                    "type": "BlockNumber"
                  }
                ],
                "docs": [
                  " Unregister a proxy account for the sender.",
                  "",
                  " The dispatch origin for this call must be _Signed_.",
                  "",
                  " Parameters:",
                  " - `proxy`: The account that the `caller` would like to remove as a proxy.",
                  " - `proxy_type`: The permissions currently enabled for the removed proxy account.",
                  "",
                  " # <weight>",
                  " Weight is a function of the number of proxies the user has (P).",
                  " # </weight>"
                ]
              },
              {
                "name": "remove_proxies",
                "args": [],
                "docs": [
                  " Unregister all proxy accounts for the sender.",
                  "",
                  " The dispatch origin for this call must be _Signed_.",
                  "",
                  " WARNING: This may be called on accounts created by `anonymous`, however if done, then",
                  " the unreserved fees will be inaccessible. **All access to this account will be lost.**",
                  "",
                  " # <weight>",
                  " Weight is a function of the number of proxies the user has (P).",
                  " # </weight>"
                ]
              },
              {
                "name": "anonymous",
                "args": [
                  {
                    "name": "proxy_type",
                    "type": "ProxyType"
                  },
                  {
                    "name": "delay",
                    "type": "BlockNumber"
                  },
                  {
                    "name": "index",
                    "type": "u16"
                  }
                ],
                "docs": [
                  " Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
                  " initialize it with a proxy of `proxy_type` for `origin` sender.",
                  "",
                  " Requires a `Signed` origin.",
                  "",
                  " - `proxy_type`: The type of the proxy that the sender will be registered as over the",
                  " new account. This will almost always be the most permissive `ProxyType` possible to",
                  " allow for maximum flexibility.",
                  " - `index`: A disambiguation index, in case this is called multiple times in the same",
                  " transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just",
                  " want to use `0`.",
                  " - `delay`: The announcement period required of the initial proxy. Will generally be",
                  " zero.",
                  "",
                  " Fails with `Duplicate` if this has already been called in this transaction, from the",
                  " same sender, with the same parameters.",
                  "",
                  " Fails if there are insufficient funds to pay for deposit.",
                  "",
                  " # <weight>",
                  " Weight is a function of the number of proxies the user has (P).",
                  " # </weight>",
                  " TODO: Might be over counting 1 read"
                ]
              },
              {
                "name": "kill_anonymous",
                "args": [
                  {
                    "name": "spawner",
                    "type": "AccountId"
                  },
                  {
                    "name": "proxy_type",
                    "type": "ProxyType"
                  },
                  {
                    "name": "index",
                    "type": "u16"
                  },
                  {
                    "name": "height",
                    "type": "Compact<BlockNumber>"
                  },
                  {
                    "name": "ext_index",
                    "type": "Compact<u32>"
                  }
                ],
                "docs": [
                  " Removes a previously spawned anonymous proxy.",
                  "",
                  " WARNING: **All access to this account will be lost.** Any funds held in it will be",
                  " inaccessible.",
                  "",
                  " Requires a `Signed` origin, and the sender account must have been created by a call to",
                  " `anonymous` with corresponding parameters.",
                  "",
                  " - `spawner`: The account that originally called `anonymous` to create this account.",
                  " - `index`: The disambiguation index originally passed to `anonymous`. Probably `0`.",
                  " - `proxy_type`: The proxy type originally passed to `anonymous`.",
                  " - `height`: The height of the chain when the call to `anonymous` was processed.",
                  " - `ext_index`: The extrinsic index in which the call to `anonymous` was processed.",
                  "",
                  " Fails with `NoPermission` in case the caller is not a previously created anonymous",
                  " account whose `anonymous` call has corresponding parameters.",
                  "",
                  " # <weight>",
                  " Weight is a function of the number of proxies the user has (P).",
                  " # </weight>"
                ]
              },
              {
                "name": "announce",
                "args": [
                  {
                    "name": "real",
                    "type": "AccountId"
                  },
                  {
                    "name": "call_hash",
                    "type": "CallHashOf"
                  }
                ],
                "docs": [
                  " Publish the hash of a proxy-call that will be made in the future.",
                  "",
                  " This must be called some number of blocks before the corresponding `proxy` is attempted",
                  " if the delay associated with the proxy relationship is greater than zero.",
                  "",
                  " No more than `MaxPending` announcements may be made at any one time.",
                  "",
                  " This will take a deposit of `AnnouncementDepositFactor` as well as",
                  " `AnnouncementDepositBase` if there are no other pending announcements.",
                  "",
                  " The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
                  "",
                  " Parameters:",
                  " - `real`: The account that the proxy will make a call on behalf of.",
                  " - `call_hash`: The hash of the call to be made by the `real` account.",
                  "",
                  " # <weight>",
                  " Weight is a function of:",
                  " - A: the number of announcements made.",
                  " - P: the number of proxies the user has.",
                  " # </weight>"
                ]
              },
              {
                "name": "remove_announcement",
                "args": [
                  {
                    "name": "real",
                    "type": "AccountId"
                  },
                  {
                    "name": "call_hash",
                    "type": "CallHashOf"
                  }
                ],
                "docs": [
                  " Remove a given announcement.",
                  "",
                  " May be called by a proxy account to remove a call they previously announced and return",
                  " the deposit.",
                  "",
                  " The dispatch origin for this call must be _Signed_.",
                  "",
                  " Parameters:",
                  " - `real`: The account that the proxy will make a call on behalf of.",
                  " - `call_hash`: The hash of the call to be made by the `real` account.",
                  "",
                  " # <weight>",
                  " Weight is a function of:",
                  " - A: the number of announcements made.",
                  " - P: the number of proxies the user has.",
                  " # </weight>"
                ]
              },
              {
                "name": "reject_announcement",
                "args": [
                  {
                    "name": "delegate",
                    "type": "AccountId"
                  },
                  {
                    "name": "call_hash",
                    "type": "CallHashOf"
                  }
                ],
                "docs": [
                  " Remove the given announcement of a delegate.",
                  "",
                  " May be called by a target (proxied) account to remove a call that one of their delegates",
                  " (`delegate`) has announced they want to execute. The deposit is returned.",
                  "",
                  " The dispatch origin for this call must be _Signed_.",
                  "",
                  " Parameters:",
                  " - `delegate`: The account that previously announced the call.",
                  " - `call_hash`: The hash of the call to be made.",
                  "",
                  " # <weight>",
                  " Weight is a function of:",
                  " - A: the number of announcements made.",
                  " - P: the number of proxies the user has.",
                  " # </weight>"
                ]
              },
              {
                "name": "proxy_announced",
                "args": [
                  {
                    "name": "delegate",
                    "type": "AccountId"
                  },
                  {
                    "name": "real",
                    "type": "AccountId"
                  },
                  {
                    "name": "force_proxy_type",
                    "type": "Option<ProxyType>"
                  },
                  {
                    "name": "call",
                    "type": "Call"
                  }
                ],
                "docs": [
                  " Dispatch the given `call` from an account that the sender is authorized for through",
                  " `add_proxy`.",
                  "",
                  " Removes any corresponding announcement(s).",
                  "",
                  " The dispatch origin for this call must be _Signed_.",
                  "",
                  " Parameters:",
                  " - `real`: The account that the proxy will make a call on behalf of.",
                  " - `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                  " - `call`: The call to be made by the `real` account.",
                  "",
                  " # <weight>",
                  " Weight is a function of:",
                  " - A: the number of announcements made.",
                  " - P: the number of proxies the user has.",
                  " # </weight>"
                ]
              }
            ],
            "events": [
              {
                "name": "ProxyExecuted",
                "args": [
                  "DispatchResult"
                ],
                "docs": [
                  " A proxy was executed correctly, with the given \\[result\\]."
                ]
              },
              {
                "name": "AnonymousCreated",
                "args": [
                  "AccountId",
                  "AccountId",
                  "ProxyType",
                  "u16"
                ],
                "docs": [
                  " Anonymous account has been created by new proxy with given",
                  " disambiguation index and proxy type. \\[anonymous, who, proxy_type, disambiguation_index\\]"
                ]
              },
              {
                "name": "Announced",
                "args": [
                  "AccountId",
                  "AccountId",
                  "Hash"
                ],
                "docs": [
                  " An announcement was placed to make a call in the future. \\[real, proxy, call_hash\\]"
                ]
              }
            ],
            "constants": [
              {
                "name": "ProxyDepositBase",
                "type": "BalanceOf",
                "value": "0x0028f9d8d10100000000000000000000",
                "docs": [
                  " The base amount of currency needed to reserve for creating a proxy.",
                  "",
                  " This is held for an additional storage item whose value size is",
                  " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
                ]
              },
              {
                "name": "ProxyDepositFactor",
                "type": "BalanceOf",
                "value": "0x0001b2c4000000000000000000000000",
                "docs": [
                  " The amount of currency needed per proxy added.",
                  "",
                  " This is held for adding 32 bytes plus an instance of `ProxyType` more into a pre-existing",
                  " storage value. Thus, when configuring `ProxyDepositFactor` one should take into account",
                  " `32 + proxy_type.encode().len()` bytes of data."
                ]
              },
              {
                "name": "MaxProxies",
                "type": "u32",
                "value": "0x20000000",
                "docs": [
                  " The maximum amount of proxies allowed for a single account."
                ]
              },
              {
                "name": "MaxPending",
                "type": "u32",
                "value": "0x20000000",
                "docs": [
                  " The maximum amount of time-delayed announcements that are allowed to be pending."
                ]
              },
              {
                "name": "AnnouncementDepositBase",
                "type": "BalanceOf",
                "value": "0x0028f9d8d10100000000000000000000",
                "docs": [
                  " The base amount of currency needed to reserve for creating an announcement.",
                  "",
                  " This is held when a new storage item holding a `Balance` is created (typically 16 bytes)."
                ]
              },
              {
                "name": "AnnouncementDepositFactor",
                "type": "BalanceOf",
                "value": "0x00026489010000000000000000000000",
                "docs": [
                  " The amount of currency needed per announcement made.",
                  "",
                  " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
                  " into a pre-existing storage value."
                ]
              }
            ],
            "errors": [
              {
                "name": "TooMany",
                "docs": [
                  " There are too many proxies registered or too many announcements pending."
                ]
              },
              {
                "name": "NotFound",
                "docs": [
                  " Proxy registration not found."
                ]
              },
              {
                "name": "NotProxy",
                "docs": [
                  " Sender is not a proxy of the account to be proxied."
                ]
              },
              {
                "name": "Unproxyable",
                "docs": [
                  " A call which is incompatible with the proxy type's filter was attempted."
                ]
              },
              {
                "name": "Duplicate",
                "docs": [
                  " Account is already a proxy."
                ]
              },
              {
                "name": "NoPermission",
                "docs": [
                  " Call may not be made by proxy because it may escalate its privileges."
                ]
              },
              {
                "name": "Unannounced",
                "docs": [
                  " Announcement, if made at all, was made too recently."
                ]
              },
              {
                "name": "NoSelfProxy",
                "docs": [
                  " Cannot add self as proxy."
                ]
              }
            ],
            "index": "5"
          },
          {
            "name": "Balances",
            "storage": {
              "prefix": "Balances",
              "items": [
                {
                  "name": "TotalIssuance",
                  "modifier": "Default",
                  "type": {
                    "plain": "Balance"
                  },
                  "fallback": "0x00000000000000000000000000000000",
                  "docs": [
                    " The total units issued in the system."
                  ]
                },
                {
                  "name": "Account",
                  "modifier": "Default",
                  "type": {
                    "map": {
                      "hasher": "Blake2_128Concat",
                      "key": "AccountId",
                      "value": "AccountData",
                      "linked": false
                    }
                  },
                  "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                  "docs": [
                    " The balance of an account.",
                    "",
                    " NOTE: This is only used in the case that this pallet is used to store balances."
                  ]
                },
                {
                  "name": "Locks",
                  "modifier": "Default",
                  "type": {
                    "map": {
                      "hasher": "Blake2_128Concat",
                      "key": "AccountId",
                      "value": "Vec<BalanceLock>",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Any liquidity locks on some account balances.",
                    " NOTE: Should only be accessed when setting, changing and freeing a lock."
                  ]
                },
                {
                  "name": "Reserves",
                  "modifier": "Default",
                  "type": {
                    "map": {
                      "hasher": "Blake2_128Concat",
                      "key": "AccountId",
                      "value": "Vec<ReserveData>",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Named reserves on some account balances."
                  ]
                },
                {
                  "name": "StorageVersion",
                  "modifier": "Default",
                  "type": {
                    "plain": "Releases"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Storage version of the pallet.",
                    "",
                    " This is set to v2.0.0 for new networks."
                  ]
                }
              ]
            },
            "calls": [
              {
                "name": "transfer",
                "args": [
                  {
                    "name": "dest",
                    "type": "LookupSource"
                  },
                  {
                    "name": "value",
                    "type": "Compact<Balance>"
                  }
                ],
                "docs": [
                  " Transfer some liquid free balance to another account.",
                  "",
                  " `transfer` will set the `FreeBalance` of the sender and receiver.",
                  " It will decrease the total issuance of the system by the `TransferFee`.",
                  " If the sender's account is below the existential deposit as a result",
                  " of the transfer, the account will be reaped.",
                  "",
                  " The dispatch origin for this call must be `Signed` by the transactor.",
                  "",
                  " # <weight>",
                  " - Dependent on arguments but not critical, given proper implementations for",
                  "   input config types. See related functions below.",
                  " - It contains a limited number of reads and writes internally and no complex computation.",
                  "",
                  " Related functions:",
                  "",
                  "   - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
                  "   - Transferring balances to accounts that did not exist before will cause",
                  "      `T::OnNewAccount::on_new_account` to be called.",
                  "   - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.",
                  "   - `transfer_keep_alive` works the same way as `transfer`, but has an additional",
                  "     check that the transfer will not kill the origin account.",
                  " ---------------------------------",
                  " - Base Weight: 73.64 Âµs, worst case scenario (account created, account removed)",
                  " - DB Weight: 1 Read and 1 Write to destination account",
                  " - Origin account is already in memory, so no DB operations for them.",
                  " # </weight>"
                ]
              },
              {
                "name": "set_balance",
                "args": [
                  {
                    "name": "who",
                    "type": "LookupSource"
                  },
                  {
                    "name": "new_free",
                    "type": "Compact<Balance>"
                  },
                  {
                    "name": "new_reserved",
                    "type": "Compact<Balance>"
                  }
                ],
                "docs": [
                  " Set the balances of a given account.",
                  "",
                  " This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
                  " also decrease the total issuance of the system (`TotalIssuance`).",
                  " If the new free or reserved balance is below the existential deposit,",
                  " it will reset the account nonce (`frame_system::AccountNonce`).",
                  "",
                  " The dispatch origin for this call is `root`.",
                  "",
                  " # <weight>",
                  " - Independent of the arguments.",
                  " - Contains a limited number of reads and writes.",
                  " ---------------------",
                  " - Base Weight:",
                  "     - Creating: 27.56 Âµs",
                  "     - Killing: 35.11 Âµs",
                  " - DB Weight: 1 Read, 1 Write to `who`",
                  " # </weight>"
                ]
              },
              {
                "name": "force_transfer",
                "args": [
                  {
                    "name": "source",
                    "type": "LookupSource"
                  },
                  {
                    "name": "dest",
                    "type": "LookupSource"
                  },
                  {
                    "name": "value",
                    "type": "Compact<Balance>"
                  }
                ],
                "docs": [
                  " Exactly as `transfer`, except the origin must be root and the source account may be",
                  " specified.",
                  " # <weight>",
                  " - Same as transfer, but additional read and write because the source account is",
                  "   not assumed to be in the overlay.",
                  " # </weight>"
                ]
              },
              {
                "name": "transfer_keep_alive",
                "args": [
                  {
                    "name": "dest",
                    "type": "LookupSource"
                  },
                  {
                    "name": "value",
                    "type": "Compact<Balance>"
                  }
                ],
                "docs": [
                  " Same as the [`transfer`] call, but with a check that the transfer will not kill the",
                  " origin account.",
                  "",
                  " 99% of the time you want [`transfer`] instead.",
                  "",
                  " [`transfer`]: struct.Pallet.html#method.transfer",
                  " # <weight>",
                  " - Cheaper than transfer because account cannot be killed.",
                  " - Base Weight: 51.4 Âµs",
                  " - DB Weight: 1 Read and 1 Write to dest (sender is in overlay already)",
                  " #</weight>"
                ]
              },
              {
                "name": "transfer_all",
                "args": [
                  {
                    "name": "dest",
                    "type": "LookupSource"
                  },
                  {
                    "name": "keep_alive",
                    "type": "bool"
                  }
                ],
                "docs": [
                  " Transfer the entire transferable balance from the caller account.",
                  "",
                  " NOTE: This function only attempts to transfer _transferable_ balances. This means that",
                  " any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
                  " transferred by this function. To ensure that this function results in a killed account,",
                  " you might need to prepare the account by removing any reference counters, storage",
                  " deposits, etc...",
                  "",
                  " The dispatch origin of this call must be Signed.",
                  "",
                  " - `dest`: The recipient of the transfer.",
                  " - `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
                  "   of the funds the account has, causing the sender account to be killed (false), or",
                  "   transfer everything except at least the existential deposit, which will guarantee to",
                  "   keep the sender account alive (true).",
                  "   # <weight>",
                  " - O(1). Just like transfer, but reading the user's transferable balance first.",
                  "   #</weight>"
                ]
              }
            ],
            "events": [
              {
                "name": "Endowed",
                "args": [
                  "AccountId",
                  "Balance"
                ],
                "docs": [
                  " An account was created with some free balance. \\[account, free_balance\\]"
                ]
              },
              {
                "name": "DustLost",
                "args": [
                  "AccountId",
                  "Balance"
                ],
                "docs": [
                  " An account was removed whose balance was non-zero but below ExistentialDeposit,",
                  " resulting in an outright loss. \\[account, balance\\]"
                ]
              },
              {
                "name": "Transfer",
                "args": [
                  "AccountId",
                  "AccountId",
                  "Balance"
                ],
                "docs": [
                  " Transfer succeeded. \\[from, to, value\\]"
                ]
              },
              {
                "name": "BalanceSet",
                "args": [
                  "AccountId",
                  "Balance",
                  "Balance"
                ],
                "docs": [
                  " A balance was set by root. \\[who, free, reserved\\]"
                ]
              },
              {
                "name": "Deposit",
                "args": [
                  "AccountId",
                  "Balance"
                ],
                "docs": [
                  " Some amount was deposited (e.g. for transaction fees). \\[who, deposit\\]"
                ]
              },
              {
                "name": "Reserved",
                "args": [
                  "AccountId",
                  "Balance"
                ],
                "docs": [
                  " Some balance was reserved (moved from free to reserved). \\[who, value\\]"
                ]
              },
              {
                "name": "Unreserved",
                "args": [
                  "AccountId",
                  "Balance"
                ],
                "docs": [
                  " Some balance was unreserved (moved from reserved to free). \\[who, value\\]"
                ]
              },
              {
                "name": "ReserveRepatriated",
                "args": [
                  "AccountId",
                  "AccountId",
                  "Balance",
                  "Status"
                ],
                "docs": [
                  " Some balance was moved from the reserve of the first account to the second account.",
                  " Final argument indicates the destination balance type.",
                  " \\[from, to, balance, destination_status\\]"
                ]
              }
            ],
            "constants": [
              {
                "name": "ExistentialDeposit",
                "type": "Balance",
                "value": "0x00e87648170000000000000000000000",
                "docs": [
                  " The minimum amount required to keep an account open."
                ]
              }
            ],
            "errors": [
              {
                "name": "VestingBalance",
                "docs": [
                  " Vesting balance too high to send value"
                ]
              },
              {
                "name": "LiquidityRestrictions",
                "docs": [
                  " Account liquidity restrictions prevent withdrawal"
                ]
              },
              {
                "name": "InsufficientBalance",
                "docs": [
                  " Balance too low to send value"
                ]
              },
              {
                "name": "ExistentialDeposit",
                "docs": [
                  " Value too low to create account due to existential deposit"
                ]
              },
              {
                "name": "KeepAlive",
                "docs": [
                  " Transfer/payment would kill account"
                ]
              },
              {
                "name": "ExistingVestingSchedule",
                "docs": [
                  " A vesting schedule already exists for this account"
                ]
              },
              {
                "name": "DeadAccount",
                "docs": [
                  " Beneficiary account must pre-exist"
                ]
              },
              {
                "name": "TooManyReserves",
                "docs": [
                  " Number of named reserves exceed MaxReserves"
                ]
              }
            ],
            "index": "10"
          },
          {
            "name": "Tokens",
            "storage": {
              "prefix": "Tokens",
              "items": [
                {
                  "name": "TotalIssuance",
                  "modifier": "Default",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "CurrencyId",
                      "value": "Balance",
                      "linked": false
                    }
                  },
                  "fallback": "0x00000000000000000000000000000000",
                  "docs": [
                    " The total issuance of a token type."
                  ]
                },
                {
                  "name": "Locks",
                  "modifier": "Default",
                  "type": {
                    "doubleMap": {
                      "hasher": "Blake2_128Concat",
                      "key1": "AccountId",
                      "key2": "CurrencyId",
                      "value": "Vec<BalanceLock>",
                      "key2Hasher": "Twox64Concat"
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Any liquidity locks of a token type under an account.",
                    " NOTE: Should only be accessed when setting, changing and freeing a lock."
                  ]
                },
                {
                  "name": "Accounts",
                  "modifier": "Default",
                  "type": {
                    "doubleMap": {
                      "hasher": "Blake2_128Concat",
                      "key1": "AccountId",
                      "key2": "CurrencyId",
                      "value": "AccountData",
                      "key2Hasher": "Twox64Concat"
                    }
                  },
                  "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                  "docs": [
                    " The balance of a token type under an account.",
                    "",
                    " NOTE: If the total is ever zero, decrease account ref account.",
                    "",
                    " NOTE: This is only used in the case that this module is used to store",
                    " balances."
                  ]
                }
              ]
            },
            "calls": null,
            "events": [
              {
                "name": "Endowed",
                "args": [
                  "CurrencyId",
                  "AccountId",
                  "Balance"
                ],
                "docs": [
                  " An account was created with some free balance. \\[currency_id,",
                  " account, free_balance\\]"
                ]
              },
              {
                "name": "DustLost",
                "args": [
                  "CurrencyId",
                  "AccountId",
                  "Balance"
                ],
                "docs": [
                  " An account was removed whose balance was non-zero but below",
                  " ExistentialDeposit, resulting in an outright loss. \\[currency_id,",
                  " account, balance\\]"
                ]
              },
              {
                "name": "Transfer",
                "args": [
                  "CurrencyId",
                  "AccountId",
                  "AccountId",
                  "Balance"
                ],
                "docs": [
                  " Transfer succeeded. \\[currency_id, from, to, value\\]"
                ]
              },
              {
                "name": "Reserved",
                "args": [
                  "CurrencyId",
                  "AccountId",
                  "Balance"
                ],
                "docs": [
                  " Some balance was reserved (moved from free to reserved).",
                  " \\[currency_id, who, value\\]"
                ]
              },
              {
                "name": "Unreserved",
                "args": [
                  "CurrencyId",
                  "AccountId",
                  "Balance"
                ],
                "docs": [
                  " Some balance was unreserved (moved from reserved to free).",
                  " \\[currency_id, who, value\\]"
                ]
              }
            ],
            "constants": [],
            "errors": [
              {
                "name": "BalanceTooLow",
                "docs": [
                  " The balance is too low"
                ]
              },
              {
                "name": "AmountIntoBalanceFailed",
                "docs": [
                  " Cannot convert Amount into Balance type"
                ]
              },
              {
                "name": "LiquidityRestrictions",
                "docs": [
                  " Failed because liquidity restrictions due to locking"
                ]
              },
              {
                "name": "MaxLocksExceeded",
                "docs": [
                  " Failed because the maximum locks was exceeded"
                ]
              },
              {
                "name": "KeepAlive",
                "docs": [
                  " Transfer/payment would kill account"
                ]
              },
              {
                "name": "ExistentialDeposit",
                "docs": [
                  " Value too low to create account due to existential deposit"
                ]
              }
            ],
            "index": "11"
          },
          {
            "name": "Currencies",
            "storage": null,
            "calls": [
              {
                "name": "transfer",
                "args": [
                  {
                    "name": "dest",
                    "type": "LookupSource"
                  },
                  {
                    "name": "currency_id",
                    "type": "CurrencyIdOf"
                  },
                  {
                    "name": "amount",
                    "type": "Compact<BalanceOf>"
                  }
                ],
                "docs": [
                  " Transfer some balance to another account under `currency_id`.",
                  "",
                  " The dispatch origin for this call must be `Signed` by the",
                  " transactor."
                ]
              },
              {
                "name": "transfer_native_currency",
                "args": [
                  {
                    "name": "dest",
                    "type": "LookupSource"
                  },
                  {
                    "name": "amount",
                    "type": "Compact<BalanceOf>"
                  }
                ],
                "docs": [
                  " Transfer some native currency to another account.",
                  "",
                  " The dispatch origin for this call must be `Signed` by the",
                  " transactor."
                ]
              },
              {
                "name": "update_balance",
                "args": [
                  {
                    "name": "who",
                    "type": "LookupSource"
                  },
                  {
                    "name": "currency_id",
                    "type": "CurrencyIdOf"
                  },
                  {
                    "name": "amount",
                    "type": "AmountOf"
                  }
                ],
                "docs": [
                  " update amount of account `who` under `currency_id`.",
                  "",
                  " The dispatch origin of this call must be _Root_."
                ]
              }
            ],
            "events": [
              {
                "name": "Transferred",
                "args": [
                  "CurrencyIdOf",
                  "AccountId",
                  "AccountId",
                  "BalanceOf"
                ],
                "docs": [
                  " Currency transfer success. [currency_id, from, to, amount]"
                ]
              },
              {
                "name": "BalanceUpdated",
                "args": [
                  "CurrencyIdOf",
                  "AccountId",
                  "AmountOf"
                ],
                "docs": [
                  " Update balance success. [currency_id, who, amount]"
                ]
              },
              {
                "name": "Deposited",
                "args": [
                  "CurrencyIdOf",
                  "AccountId",
                  "BalanceOf"
                ],
                "docs": [
                  " Deposit success. [currency_id, who, amount]"
                ]
              },
              {
                "name": "Withdrawn",
                "args": [
                  "CurrencyIdOf",
                  "AccountId",
                  "BalanceOf"
                ],
                "docs": [
                  " Withdraw success. [currency_id, who, amount]"
                ]
              }
            ],
            "constants": [
              {
                "name": "GetNativeCurrencyId",
                "type": "CurrencyId",
                "value": "0x0080",
                "docs": [
                  " The native currency id"
                ]
              }
            ],
            "errors": [
              {
                "name": "AmountIntoBalanceFailed",
                "docs": [
                  " Unable to convert the Amount type into Balance."
                ]
              },
              {
                "name": "BalanceTooLow",
                "docs": [
                  " Balance is too low."
                ]
              },
              {
                "name": "Erc20InvalidOperation",
                "docs": [
                  " Erc20 invalid operation"
                ]
              },
              {
                "name": "EvmAccountNotFound",
                "docs": [
                  " EVM account not found"
                ]
              }
            ],
            "index": "12"
          },
          {
            "name": "Vesting",
            "storage": {
              "prefix": "Vesting",
              "items": [
                {
                  "name": "VestingSchedules",
                  "modifier": "Default",
                  "type": {
                    "map": {
                      "hasher": "Blake2_128Concat",
                      "key": "AccountId",
                      "value": "Vec<VestingScheduleOf>",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Vesting schedules of an account.",
                    "",
                    " VestingSchedules: map AccountId => Vec<VestingSchedule>"
                  ]
                }
              ]
            },
            "calls": [
              {
                "name": "claim",
                "args": [],
                "docs": []
              },
              {
                "name": "vested_transfer",
                "args": [
                  {
                    "name": "dest",
                    "type": "LookupSource"
                  },
                  {
                    "name": "schedule",
                    "type": "VestingScheduleOf"
                  }
                ],
                "docs": []
              },
              {
                "name": "update_vesting_schedules",
                "args": [
                  {
                    "name": "who",
                    "type": "LookupSource"
                  },
                  {
                    "name": "vesting_schedules",
                    "type": "Vec<VestingScheduleOf>"
                  }
                ],
                "docs": []
              }
            ],
            "events": [
              {
                "name": "VestingScheduleAdded",
                "args": [
                  "AccountId",
                  "AccountId",
                  "VestingScheduleOf"
                ],
                "docs": [
                  " Added new vesting schedule. [from, to, vesting_schedule]"
                ]
              },
              {
                "name": "Claimed",
                "args": [
                  "AccountId",
                  "BalanceOf"
                ],
                "docs": [
                  " Claimed vesting. [who, locked_amount]"
                ]
              },
              {
                "name": "VestingSchedulesUpdated",
                "args": [
                  "AccountId"
                ],
                "docs": [
                  " Updated vesting schedules. [who]"
                ]
              }
            ],
            "constants": [
              {
                "name": "MinVestedTransfer",
                "type": "BalanceOf",
                "value": "0x00000000000000000000000000000000",
                "docs": [
                  " The minimum amount transferred to call `vested_transfer`."
                ]
              }
            ],
            "errors": [
              {
                "name": "ZeroVestingPeriod",
                "docs": [
                  " Vesting period is zero"
                ]
              },
              {
                "name": "ZeroVestingPeriodCount",
                "docs": [
                  " Number of vests is zero"
                ]
              },
              {
                "name": "InsufficientBalanceToLock",
                "docs": [
                  " Insufficient amount of balance to lock"
                ]
              },
              {
                "name": "TooManyVestingSchedules",
                "docs": [
                  " This account have too many vesting schedules"
                ]
              },
              {
                "name": "AmountLow",
                "docs": [
                  " The vested transfer amount is too low"
                ]
              },
              {
                "name": "MaxVestingSchedulesExceeded",
                "docs": [
                  " Failed because the maximum vesting schedules was exceeded"
                ]
              }
            ],
            "index": "13"
          },
          {
            "name": "TransactionPayment",
            "storage": {
              "prefix": "TransactionPayment",
              "items": [
                {
                  "name": "NextFeeMultiplier",
                  "modifier": "Default",
                  "type": {
                    "plain": "Multiplier"
                  },
                  "fallback": "0x000064a7b3b6e00d0000000000000000",
                  "docs": [
                    " The next fee multiplier.",
                    "",
                    " NextFeeMultiplier: Multiplier"
                  ]
                },
                {
                  "name": "DefaultFeeCurrencyId",
                  "modifier": "Optional",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "AccountId",
                      "value": "CurrencyId",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The default fee currency for accounts.",
                    "",
                    " DefaultFeeCurrencyId: AccountId => Option<CurrencyId>"
                  ]
                }
              ]
            },
            "calls": [
              {
                "name": "set_default_fee_token",
                "args": [
                  {
                    "name": "fee_token",
                    "type": "Option<CurrencyId>"
                  }
                ],
                "docs": [
                  " Set default fee token"
                ]
              }
            ],
            "events": null,
            "constants": [
              {
                "name": "AllNonNativeCurrencyIds",
                "type": "Vec<CurrencyId>",
                "value": "0x0c008100820083",
                "docs": [
                  " All non-native currency ids in Acala."
                ]
              },
              {
                "name": "NativeCurrencyId",
                "type": "CurrencyId",
                "value": "0x0080",
                "docs": [
                  " Native currency id, the actual received currency type as fee for",
                  " treasury. Should be ACA"
                ]
              },
              {
                "name": "StableCurrencyId",
                "type": "CurrencyId",
                "value": "0x0081",
                "docs": [
                  " Stable currency id, should be AUSD"
                ]
              },
              {
                "name": "TransactionByteFee",
                "type": "PalletBalanceOf",
                "value": "0x80969800000000000000000000000000",
                "docs": [
                  " The fee to be paid for making a transaction; the per-byte portion."
                ]
              },
              {
                "name": "MaxSlippageSwapWithDEX",
                "type": "Ratio",
                "value": "0x00004f8c34e814020000000000000000",
                "docs": [
                  " The max slippage allowed when swap fee with DEX"
                ]
              }
            ],
            "errors": [],
            "index": "14"
          },
          {
            "name": "Treasury",
            "storage": {
              "prefix": "Treasury",
              "items": [
                {
                  "name": "ProposalCount",
                  "modifier": "Default",
                  "type": {
                    "plain": "ProposalIndex"
                  },
                  "fallback": "0x00000000",
                  "docs": [
                    " Number of proposals that have been made."
                  ]
                },
                {
                  "name": "Proposals",
                  "modifier": "Optional",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "ProposalIndex",
                      "value": "Proposal",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Proposals that have been made."
                  ]
                },
                {
                  "name": "Approvals",
                  "modifier": "Default",
                  "type": {
                    "plain": "Vec<ProposalIndex>"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Proposal indices that have been approved but not yet awarded."
                  ]
                }
              ]
            },
            "calls": [
              {
                "name": "propose_spend",
                "args": [
                  {
                    "name": "value",
                    "type": "Compact<BalanceOf>"
                  },
                  {
                    "name": "beneficiary",
                    "type": "LookupSource"
                  }
                ],
                "docs": [
                  " Put forward a suggestion for spending. A deposit proportional to the value",
                  " is reserved and slashed if the proposal is rejected. It is returned once the",
                  " proposal is awarded.",
                  "",
                  " # <weight>",
                  " - Complexity: O(1)",
                  " - DbReads: `ProposalCount`, `origin account`",
                  " - DbWrites: `ProposalCount`, `Proposals`, `origin account`",
                  " # </weight>"
                ]
              },
              {
                "name": "reject_proposal",
                "args": [
                  {
                    "name": "proposal_id",
                    "type": "Compact<ProposalIndex>"
                  }
                ],
                "docs": [
                  " Reject a proposed spend. The original deposit will be slashed.",
                  "",
                  " May only be called from `T::RejectOrigin`.",
                  "",
                  " # <weight>",
                  " - Complexity: O(1)",
                  " - DbReads: `Proposals`, `rejected proposer account`",
                  " - DbWrites: `Proposals`, `rejected proposer account`",
                  " # </weight>"
                ]
              },
              {
                "name": "approve_proposal",
                "args": [
                  {
                    "name": "proposal_id",
                    "type": "Compact<ProposalIndex>"
                  }
                ],
                "docs": [
                  " Approve a proposal. At a later time, the proposal will be allocated to the beneficiary",
                  " and the original deposit will be returned.",
                  "",
                  " May only be called from `T::ApproveOrigin`.",
                  "",
                  " # <weight>",
                  " - Complexity: O(1).",
                  " - DbReads: `Proposals`, `Approvals`",
                  " - DbWrite: `Approvals`",
                  " # </weight>"
                ]
              }
            ],
            "events": [
              {
                "name": "Proposed",
                "args": [
                  "ProposalIndex"
                ],
                "docs": [
                  " New proposal. \\[proposal_index\\]"
                ]
              },
              {
                "name": "Spending",
                "args": [
                  "Balance"
                ],
                "docs": [
                  " We have ended a spend period and will now allocate funds. \\[budget_remaining\\]"
                ]
              },
              {
                "name": "Awarded",
                "args": [
                  "ProposalIndex",
                  "Balance",
                  "AccountId"
                ],
                "docs": [
                  " Some funds have been allocated. \\[proposal_index, award, beneficiary\\]"
                ]
              },
              {
                "name": "Rejected",
                "args": [
                  "ProposalIndex",
                  "Balance"
                ],
                "docs": [
                  " A proposal was rejected; funds were slashed. \\[proposal_index, slashed\\]"
                ]
              },
              {
                "name": "Burnt",
                "args": [
                  "Balance"
                ],
                "docs": [
                  " Some of our funds have been burnt. \\[burn\\]"
                ]
              },
              {
                "name": "Rollover",
                "args": [
                  "Balance"
                ],
                "docs": [
                  " Spending has finished; this is the amount that rolls over until next spend.",
                  " \\[budget_remaining\\]"
                ]
              },
              {
                "name": "Deposit",
                "args": [
                  "Balance"
                ],
                "docs": [
                  " Some funds have been deposited. \\[deposit\\]"
                ]
              }
            ],
            "constants": [
              {
                "name": "ProposalBond",
                "type": "Permill",
                "value": "0x50c30000",
                "docs": [
                  " Fraction of a proposal's value that should be bonded in order to place the proposal.",
                  " An accepted proposal gets these back. A rejected proposal does not."
                ]
              },
              {
                "name": "ProposalBondMinimum",
                "type": "BalanceOf",
                "value": "0x00204aa9d10100000000000000000000",
                "docs": [
                  " Minimum amount of funds that should be placed in a deposit for making a proposal."
                ]
              },
              {
                "name": "SpendPeriod",
                "type": "BlockNumber",
                "value": "0xe0c40000",
                "docs": [
                  " Period between successive spends."
                ]
              },
              {
                "name": "Burn",
                "type": "Permill",
                "value": "0x00000000",
                "docs": [
                  " Percentage of spare funds (if any) that are burnt per spend period."
                ]
              },
              {
                "name": "PalletId",
                "type": "PalletId",
                "value": "0x6163612f74727379",
                "docs": [
                  " The treasury's module id, used for deriving its sovereign account ID."
                ]
              }
            ],
            "errors": [
              {
                "name": "InsufficientProposersBalance",
                "docs": [
                  " Proposer's balance is too low."
                ]
              },
              {
                "name": "InvalidIndex",
                "docs": [
                  " No proposal or bounty at that index."
                ]
              },
              {
                "name": "TooManyApprovals",
                "docs": [
                  " Too many approvals in the queue."
                ]
              }
            ],
            "index": "20"
          },
          {
            "name": "Bounties",
            "storage": {
              "prefix": "Treasury",
              "items": [
                {
                  "name": "BountyCount",
                  "modifier": "Default",
                  "type": {
                    "plain": "BountyIndex"
                  },
                  "fallback": "0x00000000",
                  "docs": [
                    " Number of bounty proposals that have been made."
                  ]
                },
                {
                  "name": "Bounties",
                  "modifier": "Optional",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "BountyIndex",
                      "value": "Bounty",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Bounties that have been made."
                  ]
                },
                {
                  "name": "BountyDescriptions",
                  "modifier": "Optional",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "BountyIndex",
                      "value": "Bytes",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The description of each bounty."
                  ]
                },
                {
                  "name": "BountyApprovals",
                  "modifier": "Default",
                  "type": {
                    "plain": "Vec<BountyIndex>"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Bounty indices that have been approved but not yet funded."
                  ]
                }
              ]
            },
            "calls": [
              {
                "name": "propose_bounty",
                "args": [
                  {
                    "name": "value",
                    "type": "Compact<BalanceOf>"
                  },
                  {
                    "name": "description",
                    "type": "Bytes"
                  }
                ],
                "docs": [
                  " Propose a new bounty.",
                  "",
                  " The dispatch origin for this call must be _Signed_.",
                  "",
                  " Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
                  " `DataDepositPerByte` for each byte in `reason`. It will be unreserved upon approval,",
                  " or slashed when rejected.",
                  "",
                  " - `curator`: The curator account whom will manage this bounty.",
                  " - `fee`: The curator fee.",
                  " - `value`: The total payment amount of this bounty, curator fee included.",
                  " - `description`: The description of this bounty."
                ]
              },
              {
                "name": "approve_bounty",
                "args": [
                  {
                    "name": "bounty_id",
                    "type": "Compact<BountyIndex>"
                  }
                ],
                "docs": [
                  " Approve a bounty proposal. At a later time, the bounty will be funded and become active",
                  " and the original deposit will be returned.",
                  "",
                  " May only be called from `T::ApproveOrigin`.",
                  "",
                  " # <weight>",
                  " - O(1).",
                  " # </weight>"
                ]
              },
              {
                "name": "propose_curator",
                "args": [
                  {
                    "name": "bounty_id",
                    "type": "Compact<BountyIndex>"
                  },
                  {
                    "name": "curator",
                    "type": "LookupSource"
                  },
                  {
                    "name": "fee",
                    "type": "Compact<BalanceOf>"
                  }
                ],
                "docs": [
                  " Assign a curator to a funded bounty.",
                  "",
                  " May only be called from `T::ApproveOrigin`.",
                  "",
                  " # <weight>",
                  " - O(1).",
                  " # </weight>"
                ]
              },
              {
                "name": "unassign_curator",
                "args": [
                  {
                    "name": "bounty_id",
                    "type": "Compact<BountyIndex>"
                  }
                ],
                "docs": [
                  " Unassign curator from a bounty.",
                  "",
                  " This function can only be called by the `RejectOrigin` a signed origin.",
                  "",
                  " If this function is called by the `RejectOrigin`, we assume that the curator is malicious",
                  " or inactive. As a result, we will slash the curator when possible.",
                  "",
                  " If the origin is the curator, we take this as a sign they are unable to do their job and",
                  " they willingly give up. We could slash them, but for now we allow them to recover their",
                  " deposit and exit without issue. (We may want to change this if it is abused.)",
                  "",
                  " Finally, the origin can be anyone if and only if the curator is \"inactive\". This allows",
                  " anyone in the community to call out that a curator is not doing their due diligence, and",
                  " we should pick a new curator. In this case the curator should also be slashed.",
                  "",
                  " # <weight>",
                  " - O(1).",
                  " # </weight>"
                ]
              },
              {
                "name": "accept_curator",
                "args": [
                  {
                    "name": "bounty_id",
                    "type": "Compact<BountyIndex>"
                  }
                ],
                "docs": [
                  " Accept the curator role for a bounty.",
                  " A deposit will be reserved from curator and refund upon successful payout.",
                  "",
                  " May only be called from the curator.",
                  "",
                  " # <weight>",
                  " - O(1).",
                  " # </weight>"
                ]
              },
              {
                "name": "award_bounty",
                "args": [
                  {
                    "name": "bounty_id",
                    "type": "Compact<BountyIndex>"
                  },
                  {
                    "name": "beneficiary",
                    "type": "LookupSource"
                  }
                ],
                "docs": [
                  " Award bounty to a beneficiary account. The beneficiary will be able to claim the funds after a delay.",
                  "",
                  " The dispatch origin for this call must be the curator of this bounty.",
                  "",
                  " - `bounty_id`: Bounty ID to award.",
                  " - `beneficiary`: The beneficiary account whom will receive the payout.",
                  "",
                  " # <weight>",
                  " - O(1).",
                  " # </weight>"
                ]
              },
              {
                "name": "claim_bounty",
                "args": [
                  {
                    "name": "bounty_id",
                    "type": "Compact<BountyIndex>"
                  }
                ],
                "docs": [
                  " Claim the payout from an awarded bounty after payout delay.",
                  "",
                  " The dispatch origin for this call must be the beneficiary of this bounty.",
                  "",
                  " - `bounty_id`: Bounty ID to claim.",
                  "",
                  " # <weight>",
                  " - O(1).",
                  " # </weight>"
                ]
              },
              {
                "name": "close_bounty",
                "args": [
                  {
                    "name": "bounty_id",
                    "type": "Compact<BountyIndex>"
                  }
                ],
                "docs": [
                  " Cancel a proposed or active bounty. All the funds will be sent to treasury and",
                  " the curator deposit will be unreserved if possible.",
                  "",
                  " Only `T::RejectOrigin` is able to cancel a bounty.",
                  "",
                  " - `bounty_id`: Bounty ID to cancel.",
                  "",
                  " # <weight>",
                  " - O(1).",
                  " # </weight>"
                ]
              },
              {
                "name": "extend_bounty_expiry",
                "args": [
                  {
                    "name": "bounty_id",
                    "type": "Compact<BountyIndex>"
                  },
                  {
                    "name": "_remark",
                    "type": "Bytes"
                  }
                ],
                "docs": [
                  " Extend the expiry time of an active bounty.",
                  "",
                  " The dispatch origin for this call must be the curator of this bounty.",
                  "",
                  " - `bounty_id`: Bounty ID to extend.",
                  " - `remark`: additional information.",
                  "",
                  " # <weight>",
                  " - O(1).",
                  " # </weight>"
                ]
              }
            ],
            "events": [
              {
                "name": "BountyProposed",
                "args": [
                  "BountyIndex"
                ],
                "docs": [
                  " New bounty proposal. \\[index\\]"
                ]
              },
              {
                "name": "BountyRejected",
                "args": [
                  "BountyIndex",
                  "Balance"
                ],
                "docs": [
                  " A bounty proposal was rejected; funds were slashed. \\[index, bond\\]"
                ]
              },
              {
                "name": "BountyBecameActive",
                "args": [
                  "BountyIndex"
                ],
                "docs": [
                  " A bounty proposal is funded and became active. \\[index\\]"
                ]
              },
              {
                "name": "BountyAwarded",
                "args": [
                  "BountyIndex",
                  "AccountId"
                ],
                "docs": [
                  " A bounty is awarded to a beneficiary. \\[index, beneficiary\\]"
                ]
              },
              {
                "name": "BountyClaimed",
                "args": [
                  "BountyIndex",
                  "Balance",
                  "AccountId"
                ],
                "docs": [
                  " A bounty is claimed by beneficiary. \\[index, payout, beneficiary\\]"
                ]
              },
              {
                "name": "BountyCanceled",
                "args": [
                  "BountyIndex"
                ],
                "docs": [
                  " A bounty is cancelled. \\[index\\]"
                ]
              },
              {
                "name": "BountyExtended",
                "args": [
                  "BountyIndex"
                ],
                "docs": [
                  " A bounty expiry is extended. \\[index\\]"
                ]
              }
            ],
            "constants": [
              {
                "name": "DataDepositPerByte",
                "type": "BalanceOf",
                "value": "0x00e1f505000000000000000000000000",
                "docs": [
                  " The amount held on deposit per byte within bounty description."
                ]
              },
              {
                "name": "BountyDepositBase",
                "type": "BalanceOf",
                "value": "0x00204aa9d10100000000000000000000",
                "docs": [
                  " The amount held on deposit for placing a bounty proposal."
                ]
              },
              {
                "name": "BountyDepositPayoutDelay",
                "type": "BlockNumber",
                "value": "0x80700000",
                "docs": [
                  " The delay period for which a bounty beneficiary need to wait before claim the payout."
                ]
              },
              {
                "name": "BountyUpdatePeriod",
                "type": "BlockNumber",
                "value": "0x60d80300",
                "docs": [
                  " Bounty duration in blocks."
                ]
              },
              {
                "name": "BountyCuratorDeposit",
                "type": "Permill",
                "value": "0x20a10700",
                "docs": [
                  " Percentage of the curator fee that will be reserved upfront as deposit for bounty curator."
                ]
              },
              {
                "name": "BountyValueMinimum",
                "type": "BalanceOf",
                "value": "0x005039278c0400000000000000000000",
                "docs": [
                  " Minimum value for a bounty."
                ]
              },
              {
                "name": "MaximumReasonLength",
                "type": "u32",
                "value": "0x00400000",
                "docs": [
                  " Maximum acceptable reason length."
                ]
              }
            ],
            "errors": [
              {
                "name": "InsufficientProposersBalance",
                "docs": [
                  " Proposer's balance is too low."
                ]
              },
              {
                "name": "InvalidIndex",
                "docs": [
                  " No proposal or bounty at that index."
                ]
              },
              {
                "name": "ReasonTooBig",
                "docs": [
                  " The reason given is just too big."
                ]
              },
              {
                "name": "UnexpectedStatus",
                "docs": [
                  " The bounty status is unexpected."
                ]
              },
              {
                "name": "RequireCurator",
                "docs": [
                  " Require bounty curator."
                ]
              },
              {
                "name": "InvalidValue",
                "docs": [
                  " Invalid bounty value."
                ]
              },
              {
                "name": "InvalidFee",
                "docs": [
                  " Invalid bounty fee."
                ]
              },
              {
                "name": "PendingPayout",
                "docs": [
                  " A bounty payout is pending.",
                  " To cancel the bounty, you must unassign and slash the curator."
                ]
              },
              {
                "name": "Premature",
                "docs": [
                  " The bounties cannot be claimed/closed because it's still in the countdown period."
                ]
              }
            ],
            "index": "21"
          },
          {
            "name": "Tips",
            "storage": {
              "prefix": "Treasury",
              "items": [
                {
                  "name": "Tips",
                  "modifier": "Optional",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "Hash",
                      "value": "OpenTip",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " TipsMap that are not yet completed. Keyed by the hash of `(reason, who)` from the value.",
                    " This has the insecure enumerable hash function since the key itself is already",
                    " guaranteed to be a secure hash."
                  ]
                },
                {
                  "name": "Reasons",
                  "modifier": "Optional",
                  "type": {
                    "map": {
                      "hasher": "Identity",
                      "key": "Hash",
                      "value": "Bytes",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Simple preimage lookup from the reason's hash to the original data. Again, has an",
                    " insecure enumerable hash since the key is guaranteed to be the result of a secure hash."
                  ]
                }
              ]
            },
            "calls": [
              {
                "name": "report_awesome",
                "args": [
                  {
                    "name": "reason",
                    "type": "Bytes"
                  },
                  {
                    "name": "who",
                    "type": "AccountId"
                  }
                ],
                "docs": [
                  " Report something `reason` that deserves a tip and claim any eventual the finder's fee.",
                  "",
                  " The dispatch origin for this call must be _Signed_.",
                  "",
                  " Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
                  " `DataDepositPerByte` for each byte in `reason`.",
                  "",
                  " - `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
                  "   a UTF-8-encoded URL.",
                  " - `who`: The account which should be credited for the tip.",
                  "",
                  " Emits `NewTip` if successful.",
                  "",
                  " # <weight>",
                  " - Complexity: `O(R)` where `R` length of `reason`.",
                  "   - encoding and hashing of 'reason'",
                  " - DbReads: `Reasons`, `Tips`",
                  " - DbWrites: `Reasons`, `Tips`",
                  " # </weight>"
                ]
              },
              {
                "name": "retract_tip",
                "args": [
                  {
                    "name": "hash",
                    "type": "Hash"
                  }
                ],
                "docs": [
                  " Retract a prior tip-report from `report_awesome`, and cancel the process of tipping.",
                  "",
                  " If successful, the original deposit will be unreserved.",
                  "",
                  " The dispatch origin for this call must be _Signed_ and the tip identified by `hash`",
                  " must have been reported by the signing account through `report_awesome` (and not",
                  " through `tip_new`).",
                  "",
                  " - `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                  "   as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
                  "",
                  " Emits `TipRetracted` if successful.",
                  "",
                  " # <weight>",
                  " - Complexity: `O(1)`",
                  "   - Depends on the length of `T::Hash` which is fixed.",
                  " - DbReads: `Tips`, `origin account`",
                  " - DbWrites: `Reasons`, `Tips`, `origin account`",
                  " # </weight>"
                ]
              },
              {
                "name": "tip_new",
                "args": [
                  {
                    "name": "reason",
                    "type": "Bytes"
                  },
                  {
                    "name": "who",
                    "type": "AccountId"
                  },
                  {
                    "name": "tip_value",
                    "type": "Compact<BalanceOf>"
                  }
                ],
                "docs": [
                  " Give a tip for something new; no finder's fee will be taken.",
                  "",
                  " The dispatch origin for this call must be _Signed_ and the signing account must be a",
                  " member of the `Tippers` set.",
                  "",
                  " - `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
                  "   a UTF-8-encoded URL.",
                  " - `who`: The account which should be credited for the tip.",
                  " - `tip_value`: The amount of tip that the sender would like to give. The median tip",
                  "   value of active tippers will be given to the `who`.",
                  "",
                  " Emits `NewTip` if successful.",
                  "",
                  " # <weight>",
                  " - Complexity: `O(R + T)` where `R` length of `reason`, `T` is the number of tippers.",
                  "   - `O(T)`: decoding `Tipper` vec of length `T`",
                  "     `T` is charged as upper bound given by `ContainsLengthBound`.",
                  "     The actual cost depends on the implementation of `T::Tippers`.",
                  "   - `O(R)`: hashing and encoding of reason of length `R`",
                  " - DbReads: `Tippers`, `Reasons`",
                  " - DbWrites: `Reasons`, `Tips`",
                  " # </weight>"
                ]
              },
              {
                "name": "tip",
                "args": [
                  {
                    "name": "hash",
                    "type": "Hash"
                  },
                  {
                    "name": "tip_value",
                    "type": "Compact<BalanceOf>"
                  }
                ],
                "docs": [
                  " Declare a tip value for an already-open tip.",
                  "",
                  " The dispatch origin for this call must be _Signed_ and the signing account must be a",
                  " member of the `Tippers` set.",
                  "",
                  " - `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                  "   as the hash of the tuple of the hash of the original tip `reason` and the beneficiary",
                  "   account ID.",
                  " - `tip_value`: The amount of tip that the sender would like to give. The median tip",
                  "   value of active tippers will be given to the `who`.",
                  "",
                  " Emits `TipClosing` if the threshold of tippers has been reached and the countdown period",
                  " has started.",
                  "",
                  " # <weight>",
                  " - Complexity: `O(T)` where `T` is the number of tippers.",
                  "   decoding `Tipper` vec of length `T`, insert tip and check closing,",
                  "   `T` is charged as upper bound given by `ContainsLengthBound`.",
                  "   The actual cost depends on the implementation of `T::Tippers`.",
                  "",
                  "   Actually weight could be lower as it depends on how many tips are in `OpenTip` but it",
                  "   is weighted as if almost full i.e of length `T-1`.",
                  " - DbReads: `Tippers`, `Tips`",
                  " - DbWrites: `Tips`",
                  " # </weight>"
                ]
              },
              {
                "name": "close_tip",
                "args": [
                  {
                    "name": "hash",
                    "type": "Hash"
                  }
                ],
                "docs": [
                  " Close and payout a tip.",
                  "",
                  " The dispatch origin for this call must be _Signed_.",
                  "",
                  " The tip identified by `hash` must have finished its countdown period.",
                  "",
                  " - `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                  "   as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
                  "",
                  " # <weight>",
                  " - Complexity: `O(T)` where `T` is the number of tippers.",
                  "   decoding `Tipper` vec of length `T`.",
                  "   `T` is charged as upper bound given by `ContainsLengthBound`.",
                  "   The actual cost depends on the implementation of `T::Tippers`.",
                  " - DbReads: `Tips`, `Tippers`, `tip finder`",
                  " - DbWrites: `Reasons`, `Tips`, `Tippers`, `tip finder`",
                  " # </weight>"
                ]
              },
              {
                "name": "slash_tip",
                "args": [
                  {
                    "name": "hash",
                    "type": "Hash"
                  }
                ],
                "docs": [
                  " Remove and slash an already-open tip.",
                  "",
                  " May only be called from `T::RejectOrigin`.",
                  "",
                  " As a result, the finder is slashed and the deposits are lost.",
                  "",
                  " Emits `TipSlashed` if successful.",
                  "",
                  " # <weight>",
                  "   `T` is charged as upper bound given by `ContainsLengthBound`.",
                  "   The actual cost depends on the implementation of `T::Tippers`.",
                  " # </weight>"
                ]
              }
            ],
            "events": [
              {
                "name": "NewTip",
                "args": [
                  "Hash"
                ],
                "docs": [
                  " A new tip suggestion has been opened. \\[tip_hash\\]"
                ]
              },
              {
                "name": "TipClosing",
                "args": [
                  "Hash"
                ],
                "docs": [
                  " A tip suggestion has reached threshold and is closing. \\[tip_hash\\]"
                ]
              },
              {
                "name": "TipClosed",
                "args": [
                  "Hash",
                  "AccountId",
                  "Balance"
                ],
                "docs": [
                  " A tip suggestion has been closed. \\[tip_hash, who, payout\\]"
                ]
              },
              {
                "name": "TipRetracted",
                "args": [
                  "Hash"
                ],
                "docs": [
                  " A tip suggestion has been retracted. \\[tip_hash\\]"
                ]
              },
              {
                "name": "TipSlashed",
                "args": [
                  "Hash",
                  "AccountId",
                  "Balance"
                ],
                "docs": [
                  " A tip suggestion has been slashed. \\[tip_hash, finder, deposit\\]"
                ]
              }
            ],
            "constants": [
              {
                "name": "TipCountdown",
                "type": "BlockNumber",
                "value": "0x201c0000",
                "docs": [
                  " The period for which a tip remains open after is has achieved threshold tippers."
                ]
              },
              {
                "name": "TipFindersFee",
                "type": "Percent",
                "value": "0x05",
                "docs": [
                  " The amount of the final tip which goes to the original reporter of the tip."
                ]
              },
              {
                "name": "TipReportDepositBase",
                "type": "BalanceOf",
                "value": "0x00204aa9d10100000000000000000000",
                "docs": [
                  " The amount held on deposit for placing a tip report."
                ]
              },
              {
                "name": "DataDepositPerByte",
                "type": "BalanceOf",
                "value": "0x00e1f505000000000000000000000000",
                "docs": [
                  " The amount held on deposit per byte within the tip report reason."
                ]
              },
              {
                "name": "MaximumReasonLength",
                "type": "u32",
                "value": "0x00400000",
                "docs": [
                  " Maximum acceptable reason length."
                ]
              }
            ],
            "errors": [
              {
                "name": "ReasonTooBig",
                "docs": [
                  " The reason given is just too big."
                ]
              },
              {
                "name": "AlreadyKnown",
                "docs": [
                  " The tip was already found/started."
                ]
              },
              {
                "name": "UnknownTip",
                "docs": [
                  " The tip hash is unknown."
                ]
              },
              {
                "name": "NotFinder",
                "docs": [
                  " The account attempting to retract the tip is not the finder of the tip."
                ]
              },
              {
                "name": "StillOpen",
                "docs": [
                  " The tip cannot be claimed/closed because there are not enough tippers yet."
                ]
              },
              {
                "name": "Premature",
                "docs": [
                  " The tip cannot be claimed/closed because it's still in the countdown period."
                ]
              }
            ],
            "index": "22"
          },
          {
            "name": "ParachainSystem",
            "storage": {
              "prefix": "ParachainSystem",
              "items": [
                {
                  "name": "PendingRelayChainBlockNumber",
                  "modifier": "Optional",
                  "type": {
                    "plain": "RelayChainBlockNumber"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " We need to store the new validation function for the span between",
                    " setting it and applying it. If it has a",
                    " value, then [`PendingValidationCode`] must have a real value, and",
                    " together will coordinate the block number where the upgrade will happen."
                  ]
                },
                {
                  "name": "PendingValidationCode",
                  "modifier": "Default",
                  "type": {
                    "plain": "Bytes"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The new validation function we will upgrade to when the relay chain",
                    " reaches [`PendingRelayChainBlockNumber`]. A real validation function must",
                    " exist here as long as [`PendingRelayChainBlockNumber`] is set."
                  ]
                },
                {
                  "name": "ValidationData",
                  "modifier": "Optional",
                  "type": {
                    "plain": "PersistedValidationData"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The [`PersistedValidationData`] set for this block."
                  ]
                },
                {
                  "name": "DidSetValidationCode",
                  "modifier": "Default",
                  "type": {
                    "plain": "bool"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Were the validation data set to notify the relay chain?"
                  ]
                },
                {
                  "name": "LastUpgrade",
                  "modifier": "Default",
                  "type": {
                    "plain": "BlockNumber"
                  },
                  "fallback": "0x00000000",
                  "docs": [
                    " The last relay parent block number at which we signalled the code upgrade."
                  ]
                },
                {
                  "name": "RelevantMessagingState",
                  "modifier": "Optional",
                  "type": {
                    "plain": "MessagingStateSnapshot"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The snapshot of some state related to messaging relevant to the current parachain as per",
                    " the relay parent.",
                    "",
                    " This field is meant to be updated each block with the validation data inherent. Therefore,",
                    " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                    "",
                    " This data is also absent from the genesis."
                  ]
                },
                {
                  "name": "HostConfiguration",
                  "modifier": "Optional",
                  "type": {
                    "plain": "AbridgedHostConfiguration"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The parachain host configuration that was obtained from the relay parent.",
                    "",
                    " This field is meant to be updated each block with the validation data inherent. Therefore,",
                    " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                    "",
                    " This data is also absent from the genesis."
                  ]
                },
                {
                  "name": "LastDmqMqcHead",
                  "modifier": "Default",
                  "type": {
                    "plain": "MessageQueueChain"
                  },
                  "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                  "docs": [
                    " The last downward message queue chain head we have observed.",
                    "",
                    " This value is loaded before and saved after processing inbound downward messages carried",
                    " by the system inherent."
                  ]
                },
                {
                  "name": "LastHrmpMqcHeads",
                  "modifier": "Default",
                  "type": {
                    "plain": "BTreeMap<ParaId,MessageQueueChain>"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The message queue chain heads we have observed per each channel incoming channel.",
                    "",
                    " This value is loaded before and saved after processing inbound downward messages carried",
                    " by the system inherent."
                  ]
                },
                {
                  "name": "ProcessedDownwardMessages",
                  "modifier": "Default",
                  "type": {
                    "plain": "u32"
                  },
                  "fallback": "0x00000000",
                  "docs": [
                    " Number of downward messages processed in a block.",
                    "",
                    " This will be cleared in `on_initialize` of each new block."
                  ]
                },
                {
                  "name": "NewValidationCode",
                  "modifier": "Optional",
                  "type": {
                    "plain": "Bytes"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " New validation code that was set in a block.",
                    "",
                    " This will be cleared in `on_initialize` of each new block if no other pallet already set",
                    " the value."
                  ]
                },
                {
                  "name": "HrmpWatermark",
                  "modifier": "Default",
                  "type": {
                    "plain": "BlockNumber"
                  },
                  "fallback": "0x00000000",
                  "docs": [
                    " HRMP watermark that was set in a block.",
                    "",
                    " This will be cleared in `on_initialize` of each new block."
                  ]
                },
                {
                  "name": "HrmpOutboundMessages",
                  "modifier": "Default",
                  "type": {
                    "plain": "Vec<OutboundHrmpMessage>"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " HRMP messages that were sent in a block.",
                    "",
                    " This will be cleared in `on_initialize` of each new block."
                  ]
                },
                {
                  "name": "UpwardMessages",
                  "modifier": "Default",
                  "type": {
                    "plain": "Vec<UpwardMessage>"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Upward messages that were sent in a block.",
                    "",
                    " This will be cleared in `on_initialize` of each new block."
                  ]
                },
                {
                  "name": "PendingUpwardMessages",
                  "modifier": "Default",
                  "type": {
                    "plain": "Vec<UpwardMessage>"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Upward messages that are still pending and not yet send to the relay chain."
                  ]
                },
                {
                  "name": "AnnouncedHrmpMessagesPerCandidate",
                  "modifier": "Default",
                  "type": {
                    "plain": "u32"
                  },
                  "fallback": "0x00000000",
                  "docs": [
                    " The number of HRMP messages we observed in `on_initialize` and thus used that number for",
                    " announcing the weight of `on_initialize` and `on_finalize`."
                  ]
                },
                {
                  "name": "ReservedXcmpWeightOverride",
                  "modifier": "Optional",
                  "type": {
                    "plain": "Weight"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The weight we reserve at the beginning of the block for processing XCMP messages. This",
                    " overrides the amount set in the Config trait."
                  ]
                },
                {
                  "name": "ReservedDmpWeightOverride",
                  "modifier": "Optional",
                  "type": {
                    "plain": "Weight"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The weight we reserve at the beginning of the block for processing DMP messages. This",
                    " overrides the amount set in the Config trait."
                  ]
                },
                {
                  "name": "AuthorizedUpgrade",
                  "modifier": "Optional",
                  "type": {
                    "plain": "Hash"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The next authorized upgrade, if there is one."
                  ]
                }
              ]
            },
            "calls": [
              {
                "name": "set_upgrade_block",
                "args": [
                  {
                    "name": "relay_chain_block",
                    "type": "RelayChainBlockNumber"
                  }
                ],
                "docs": [
                  " Force an already scheduled validation function upgrade to happen on a particular block.",
                  "",
                  " Note that coordinating this block for the upgrade has to happen independently on the",
                  " relay chain and this parachain. Synchronizing the block for the upgrade is sensitive,",
                  " and this bypasses all checks and and normal protocols. Very easy to brick your chain",
                  " if done wrong."
                ]
              },
              {
                "name": "set_validation_data",
                "args": [
                  {
                    "name": "data",
                    "type": "ParachainInherentData"
                  }
                ],
                "docs": [
                  " Set the current validation data.",
                  "",
                  " This should be invoked exactly once per block. It will panic at the finalization",
                  " phase if the call was not invoked.",
                  "",
                  " The dispatch origin for this call must be `Inherent`",
                  "",
                  " As a side effect, this function upgrades the current validation function",
                  " if the appropriate time has come."
                ]
              },
              {
                "name": "sudo_send_upward_message",
                "args": [
                  {
                    "name": "message",
                    "type": "UpwardMessage"
                  }
                ],
                "docs": []
              },
              {
                "name": "authorize_upgrade",
                "args": [
                  {
                    "name": "code_hash",
                    "type": "Hash"
                  }
                ],
                "docs": []
              },
              {
                "name": "enact_authorized_upgrade",
                "args": [
                  {
                    "name": "code",
                    "type": "Bytes"
                  }
                ],
                "docs": []
              }
            ],
            "events": [
              {
                "name": "ValidationFunctionStored",
                "args": [
                  "RelayChainBlockNumber"
                ],
                "docs": [
                  " The validation function has been scheduled to apply as of the contained relay chain",
                  " block number."
                ]
              },
              {
                "name": "ValidationFunctionApplied",
                "args": [
                  "RelayChainBlockNumber"
                ],
                "docs": [
                  " The validation function was applied as of the contained relay chain block number."
                ]
              },
              {
                "name": "UpgradeAuthorized",
                "args": [
                  "Hash"
                ],
                "docs": [
                  " An upgrade has been authorized."
                ]
              },
              {
                "name": "DownwardMessagesReceived",
                "args": [
                  "u32"
                ],
                "docs": [
                  " Some downward messages have been received and will be processed.",
                  " \\[ count \\]"
                ]
              },
              {
                "name": "DownwardMessagesProcessed",
                "args": [
                  "Weight",
                  "Hash"
                ],
                "docs": [
                  " Downward messages were processed using the given weight.",
                  " \\[ weight_used, result_mqc_head \\]"
                ]
              }
            ],
            "constants": [],
            "errors": [
              {
                "name": "OverlappingUpgrades",
                "docs": [
                  " Attempt to upgrade validation function while existing upgrade pending"
                ]
              },
              {
                "name": "ProhibitedByPolkadot",
                "docs": [
                  " Polkadot currently prohibits this parachain from upgrading its validation function"
                ]
              },
              {
                "name": "TooBig",
                "docs": [
                  " The supplied validation function has compiled into a blob larger than Polkadot is",
                  " willing to run"
                ]
              },
              {
                "name": "ValidationDataNotAvailable",
                "docs": [
                  " The inherent which supplies the validation data did not run this block"
                ]
              },
              {
                "name": "HostConfigurationNotAvailable",
                "docs": [
                  " The inherent which supplies the host configuration did not run this block"
                ]
              },
              {
                "name": "NotScheduled",
                "docs": [
                  " No validation function upgrade is currently scheduled."
                ]
              },
              {
                "name": "NothingAuthorized",
                "docs": [
                  " No code upgrade has been authorized."
                ]
              },
              {
                "name": "Unauthorized",
                "docs": [
                  " The given code upgrade has not been authorized."
                ]
              }
            ],
            "index": "30"
          },
          {
            "name": "ParachainInfo",
            "storage": {
              "prefix": "ParachainInfo",
              "items": [
                {
                  "name": "ParachainId",
                  "modifier": "Default",
                  "type": {
                    "plain": "ParaId"
                  },
                  "fallback": "0x64000000",
                  "docs": []
                }
              ]
            },
            "calls": null,
            "events": null,
            "constants": [],
            "errors": [],
            "index": "31"
          },
          {
            "name": "Authorship",
            "storage": {
              "prefix": "Authorship",
              "items": [
                {
                  "name": "Uncles",
                  "modifier": "Default",
                  "type": {
                    "plain": "Vec<UncleEntryItem>"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Uncles"
                  ]
                },
                {
                  "name": "Author",
                  "modifier": "Optional",
                  "type": {
                    "plain": "AccountId"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Author of current block."
                  ]
                },
                {
                  "name": "DidSetUncles",
                  "modifier": "Default",
                  "type": {
                    "plain": "bool"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Whether uncles were already set in this block."
                  ]
                }
              ]
            },
            "calls": [
              {
                "name": "set_uncles",
                "args": [
                  {
                    "name": "new_uncles",
                    "type": "Vec<Header>"
                  }
                ],
                "docs": [
                  " Provide a set of uncles."
                ]
              }
            ],
            "events": null,
            "constants": [],
            "errors": [
              {
                "name": "InvalidUncleParent",
                "docs": [
                  " The uncle parent not in the chain."
                ]
              },
              {
                "name": "UnclesAlreadySet",
                "docs": [
                  " Uncles already set in the block."
                ]
              },
              {
                "name": "TooManyUncles",
                "docs": [
                  " Too many uncles."
                ]
              },
              {
                "name": "GenesisUncle",
                "docs": [
                  " The uncle is genesis."
                ]
              },
              {
                "name": "TooHighUncle",
                "docs": [
                  " The uncle is too high in chain."
                ]
              },
              {
                "name": "UncleAlreadyIncluded",
                "docs": [
                  " The uncle is already included."
                ]
              },
              {
                "name": "OldUncle",
                "docs": [
                  " The uncle isn't recent enough to be included."
                ]
              }
            ],
            "index": "40"
          },
          {
            "name": "CollatorSelection",
            "storage": {
              "prefix": "CollatorSelection",
              "items": [
                {
                  "name": "Invulnerables",
                  "modifier": "Default",
                  "type": {
                    "plain": "Vec<AccountId>"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The invulnerable, fixed collators."
                  ]
                },
                {
                  "name": "Candidates",
                  "modifier": "Default",
                  "type": {
                    "plain": "BTreeSet<AccountId>"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The (community, limited) collation candidates."
                  ]
                },
                {
                  "name": "DesiredCandidates",
                  "modifier": "Default",
                  "type": {
                    "plain": "u32"
                  },
                  "fallback": "0x00000000",
                  "docs": [
                    " Desired number of candidates.",
                    "",
                    " This should ideally always be less than [`Config::MaxCandidates`] for weights to be correct."
                  ]
                },
                {
                  "name": "CandidacyBond",
                  "modifier": "Default",
                  "type": {
                    "plain": "BalanceOf"
                  },
                  "fallback": "0x00000000000000000000000000000000",
                  "docs": [
                    " Fixed deposit bond for each candidate."
                  ]
                },
                {
                  "name": "SessionPoints",
                  "modifier": "Default",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "AccountId",
                      "value": "u32",
                      "linked": false
                    }
                  },
                  "fallback": "0x00000000",
                  "docs": [
                    " Session points for each candidate."
                  ]
                }
              ]
            },
            "calls": [
              {
                "name": "set_invulnerables",
                "args": [
                  {
                    "name": "new",
                    "type": "Vec<AccountId>"
                  }
                ],
                "docs": []
              },
              {
                "name": "set_desired_candidates",
                "args": [
                  {
                    "name": "max",
                    "type": "u32"
                  }
                ],
                "docs": []
              },
              {
                "name": "set_candidacy_bond",
                "args": [
                  {
                    "name": "bond",
                    "type": "BalanceOf"
                  }
                ],
                "docs": []
              },
              {
                "name": "register_as_candidate",
                "args": [],
                "docs": []
              },
              {
                "name": "register_candidate",
                "args": [
                  {
                    "name": "new_candidate",
                    "type": "AccountId"
                  }
                ],
                "docs": []
              },
              {
                "name": "leave_intent",
                "args": [],
                "docs": []
              }
            ],
            "events": [
              {
                "name": "NewInvulnerables",
                "args": [
                  "Vec<AccountId>"
                ],
                "docs": []
              },
              {
                "name": "NewDesiredCandidates",
                "args": [
                  "u32"
                ],
                "docs": []
              },
              {
                "name": "NewCandidacyBond",
                "args": [
                  "Balance"
                ],
                "docs": []
              },
              {
                "name": "CandidateAdded",
                "args": [
                  "AccountId",
                  "Balance"
                ],
                "docs": []
              },
              {
                "name": "CandidateRemoved",
                "args": [
                  "AccountId"
                ],
                "docs": []
              }
            ],
            "constants": [
              {
                "name": "PotId",
                "type": "PalletId",
                "value": "0x6163612f63706f74",
                "docs": [
                  " Account Identifier from which the internal Pot is generated."
                ]
              },
              {
                "name": "MinCandidates",
                "type": "u32",
                "value": "0x05000000",
                "docs": [
                  " Minimum number of candidates."
                ]
              },
              {
                "name": "MaxCandidates",
                "type": "u32",
                "value": "0x32000000",
                "docs": [
                  " Maximum number of candidates that we should have. This is used for benchmarking and is",
                  " not enforced.",
                  "",
                  " This does not take into account the invulnerables."
                ]
              },
              {
                "name": "MaxInvulnerables",
                "type": "u32",
                "value": "0x0a000000",
                "docs": [
                  " Maximum number of invulnerables."
                ]
              },
              {
                "name": "CollatorKickThreshold",
                "type": "Permill",
                "value": "0xe0930400",
                "docs": [
                  " Will be kicked if block is not produced in threshold."
                ]
              }
            ],
            "errors": [
              {
                "name": "MaxCandidatesExceeded",
                "docs": []
              },
              {
                "name": "BelowCandidatesMin",
                "docs": []
              },
              {
                "name": "Unknown",
                "docs": []
              },
              {
                "name": "Permission",
                "docs": []
              },
              {
                "name": "AlreadyCandidate",
                "docs": []
              },
              {
                "name": "NotCandidate",
                "docs": []
              },
              {
                "name": "RequireSessionKey",
                "docs": []
              },
              {
                "name": "AlreadyInvulnerable",
                "docs": []
              },
              {
                "name": "InvalidProof",
                "docs": []
              },
              {
                "name": "MaxInvulnerablesExceeded",
                "docs": []
              }
            ],
            "index": "41"
          },
          {
            "name": "Session",
            "storage": {
              "prefix": "Session",
              "items": [
                {
                  "name": "Validators",
                  "modifier": "Default",
                  "type": {
                    "plain": "Vec<ValidatorId>"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The current set of validators."
                  ]
                },
                {
                  "name": "CurrentIndex",
                  "modifier": "Default",
                  "type": {
                    "plain": "SessionIndex"
                  },
                  "fallback": "0x00000000",
                  "docs": [
                    " Current index of the session."
                  ]
                },
                {
                  "name": "QueuedChanged",
                  "modifier": "Default",
                  "type": {
                    "plain": "bool"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " True if the underlying economic identities or weighting behind the validators",
                    " has changed in the queued validator set."
                  ]
                },
                {
                  "name": "QueuedKeys",
                  "modifier": "Default",
                  "type": {
                    "plain": "Vec<(ValidatorId,Keys)>"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The queued keys for the next session. When the next session begins, these keys",
                    " will be used to determine the validator's session keys."
                  ]
                },
                {
                  "name": "DisabledValidators",
                  "modifier": "Default",
                  "type": {
                    "plain": "Vec<u32>"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Indices of disabled validators.",
                    "",
                    " The set is cleared when `on_session_ending` returns a new set of identities."
                  ]
                },
                {
                  "name": "NextKeys",
                  "modifier": "Optional",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "ValidatorId",
                      "value": "Keys",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The next session keys for a validator."
                  ]
                },
                {
                  "name": "KeyOwner",
                  "modifier": "Optional",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "(KeyTypeId,Bytes)",
                      "value": "ValidatorId",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The owner of a key. The key is the `KeyTypeId` + the encoded key."
                  ]
                }
              ]
            },
            "calls": [
              {
                "name": "set_keys",
                "args": [
                  {
                    "name": "keys",
                    "type": "Keys"
                  },
                  {
                    "name": "proof",
                    "type": "Bytes"
                  }
                ],
                "docs": [
                  " Sets the session key(s) of the function caller to `keys`.",
                  " Allows an account to set its session key prior to becoming a validator.",
                  " This doesn't take effect until the next session.",
                  "",
                  " The dispatch origin of this function must be signed.",
                  "",
                  " # <weight>",
                  " - Complexity: `O(1)`",
                  "   Actual cost depends on the number of length of `T::Keys::key_ids()` which is fixed.",
                  " - DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`",
                  " - DbWrites: `origin account`, `NextKeys`",
                  " - DbReads per key id: `KeyOwner`",
                  " - DbWrites per key id: `KeyOwner`",
                  " # </weight>"
                ]
              },
              {
                "name": "purge_keys",
                "args": [],
                "docs": [
                  " Removes any session key(s) of the function caller.",
                  " This doesn't take effect until the next session.",
                  "",
                  " The dispatch origin of this function must be signed.",
                  "",
                  " # <weight>",
                  " - Complexity: `O(1)` in number of key types.",
                  "   Actual cost depends on the number of length of `T::Keys::key_ids()` which is fixed.",
                  " - DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`",
                  " - DbWrites: `NextKeys`, `origin account`",
                  " - DbWrites per key id: `KeyOwner`",
                  " # </weight>"
                ]
              }
            ],
            "events": [
              {
                "name": "NewSession",
                "args": [
                  "SessionIndex"
                ],
                "docs": [
                  " New session has happened. Note that the argument is the \\[session_index\\], not the block",
                  " number as the type might suggest."
                ]
              }
            ],
            "constants": [],
            "errors": [
              {
                "name": "InvalidProof",
                "docs": [
                  " Invalid ownership proof."
                ]
              },
              {
                "name": "NoAssociatedValidatorId",
                "docs": [
                  " No associated validator ID for account."
                ]
              },
              {
                "name": "DuplicatedKey",
                "docs": [
                  " Registered duplicate key."
                ]
              },
              {
                "name": "NoKeys",
                "docs": [
                  " No keys are associated with this account."
                ]
              },
              {
                "name": "NoAccount",
                "docs": [
                  " Key setting account is not live, so it's impossible to associate keys."
                ]
              }
            ],
            "index": "42"
          },
          {
            "name": "Aura",
            "storage": {
              "prefix": "Aura",
              "items": [
                {
                  "name": "Authorities",
                  "modifier": "Default",
                  "type": {
                    "plain": "Vec<AuthorityId>"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The current authority set."
                  ]
                },
                {
                  "name": "CurrentSlot",
                  "modifier": "Default",
                  "type": {
                    "plain": "Slot"
                  },
                  "fallback": "0x0000000000000000",
                  "docs": [
                    " The current slot of this block.",
                    "",
                    " This will be set in `on_initialize`."
                  ]
                }
              ]
            },
            "calls": null,
            "events": null,
            "constants": [],
            "errors": [],
            "index": "43"
          },
          {
            "name": "AuraExt",
            "storage": {
              "prefix": "AuraExt",
              "items": [
                {
                  "name": "Authorities",
                  "modifier": "Default",
                  "type": {
                    "plain": "Vec<AuthorityId>"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Serves as cache for the authorities.",
                    "",
                    " The authorities in AuRa are overwritten in `on_initialize` when we switch to a new session,",
                    " but we require the old authorities to verify the seal when validating a PoV. This will always",
                    " be updated to the latest AuRa authorities in `on_finalize`."
                  ]
                }
              ]
            },
            "calls": null,
            "events": null,
            "constants": [],
            "errors": [],
            "index": "44"
          },
          {
            "name": "XcmpQueue",
            "storage": {
              "prefix": "XcmpQueue",
              "items": [
                {
                  "name": "InboundXcmpStatus",
                  "modifier": "Default",
                  "type": {
                    "plain": "Vec<(ParaId,InboundStatus,Vec<(RelayBlockNumber,XcmpMessageFormat)>)>"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Status of the inbound XCMP channels."
                  ]
                },
                {
                  "name": "InboundXcmpMessages",
                  "modifier": "Default",
                  "type": {
                    "doubleMap": {
                      "hasher": "Blake2_128Concat",
                      "key1": "ParaId",
                      "key2": "RelayBlockNumber",
                      "value": "Bytes",
                      "key2Hasher": "Twox64Concat"
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Inbound aggregate XCMP messages. It can only be one per ParaId/block."
                  ]
                },
                {
                  "name": "OutboundXcmpStatus",
                  "modifier": "Default",
                  "type": {
                    "plain": "Vec<(ParaId,OutboundStatus,bool,u16,u16)>"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The non-empty XCMP channels in order of becoming non-empty, and the index of the first",
                    " and last outbound message. If the two indices are equal, then it indicates an empty",
                    " queue and there must be a non-`Ok` `OutboundStatus`. We assume queues grow no greater",
                    " than 65535 items. Queue indices for normal messages begin at one; zero is reserved in",
                    " case of the need to send a high-priority signal message this block.",
                    " The bool is true if there is a signal message waiting to be sent."
                  ]
                },
                {
                  "name": "OutboundXcmpMessages",
                  "modifier": "Default",
                  "type": {
                    "doubleMap": {
                      "hasher": "Blake2_128Concat",
                      "key1": "ParaId",
                      "key2": "u16",
                      "value": "Bytes",
                      "key2Hasher": "Twox64Concat"
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The messages outbound in a given XCMP channel."
                  ]
                },
                {
                  "name": "SignalMessages",
                  "modifier": "Default",
                  "type": {
                    "map": {
                      "hasher": "Blake2_128Concat",
                      "key": "ParaId",
                      "value": "Bytes",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Any signal messages waiting to be sent."
                  ]
                },
                {
                  "name": "QueueConfig",
                  "modifier": "Default",
                  "type": {
                    "plain": "QueueConfigData"
                  },
                  "fallback": "0x020000000500000001000000a0860100000000000200000000000000",
                  "docs": [
                    " The configuration which controls the dynamics of the outbound queue."
                  ]
                }
              ]
            },
            "calls": [],
            "events": [
              {
                "name": "Success",
                "args": [
                  "Option<Hash>"
                ],
                "docs": [
                  " Some XCM was executed ok."
                ]
              },
              {
                "name": "Fail",
                "args": [
                  "Option<Hash>",
                  "XcmError"
                ],
                "docs": [
                  " Some XCM failed."
                ]
              },
              {
                "name": "BadVersion",
                "args": [
                  "Option<Hash>"
                ],
                "docs": [
                  " Bad XCM version used."
                ]
              },
              {
                "name": "BadFormat",
                "args": [
                  "Option<Hash>"
                ],
                "docs": [
                  " Bad XCM format used."
                ]
              },
              {
                "name": "UpwardMessageSent",
                "args": [
                  "Option<Hash>"
                ],
                "docs": [
                  " An upward message was sent to the relay chain."
                ]
              },
              {
                "name": "XcmpMessageSent",
                "args": [
                  "Option<Hash>"
                ],
                "docs": [
                  " An HRMP message was sent to a sibling parachain."
                ]
              }
            ],
            "constants": [],
            "errors": [
              {
                "name": "FailedToSend",
                "docs": [
                  " Failed to send XCM message."
                ]
              },
              {
                "name": "BadXcmOrigin",
                "docs": [
                  " Bad XCM origin."
                ]
              },
              {
                "name": "BadXcm",
                "docs": [
                  " Bad XCM data."
                ]
              }
            ],
            "index": "50"
          },
          {
            "name": "PolkadotXcm",
            "storage": null,
            "calls": [
              {
                "name": "send",
                "args": [
                  {
                    "name": "dest",
                    "type": "MultiLocation"
                  },
                  {
                    "name": "message",
                    "type": "Xcm"
                  }
                ],
                "docs": []
              },
              {
                "name": "teleport_assets",
                "args": [
                  {
                    "name": "dest",
                    "type": "MultiLocation"
                  },
                  {
                    "name": "beneficiary",
                    "type": "MultiLocation"
                  },
                  {
                    "name": "assets",
                    "type": "Vec<MultiAsset>"
                  },
                  {
                    "name": "dest_weight",
                    "type": "Weight"
                  }
                ],
                "docs": [
                  " Teleport some assets from the local chain to some destination chain.",
                  "",
                  " - `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                  " - `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                  "   from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                  " - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                  "   an `AccountId32` value.",
                  " - `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
                  "   `dest` side.",
                  " - `dest_weight`: Equal to the total weight on `dest` of the XCM message",
                  "   `Teleport { assets, effects: [ BuyExecution{..}, DepositAsset{..} ] }`."
                ]
              },
              {
                "name": "reserve_transfer_assets",
                "args": [
                  {
                    "name": "dest",
                    "type": "MultiLocation"
                  },
                  {
                    "name": "beneficiary",
                    "type": "MultiLocation"
                  },
                  {
                    "name": "assets",
                    "type": "Vec<MultiAsset>"
                  },
                  {
                    "name": "dest_weight",
                    "type": "Weight"
                  }
                ],
                "docs": [
                  " Transfer some assets from the local chain to the sovereign account of a destination chain and forward",
                  " a notification XCM.",
                  "",
                  " - `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                  " - `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                  "   from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                  " - `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                  "   an `AccountId32` value.",
                  " - `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
                  "   `dest` side.",
                  " - `dest_weight`: Equal to the total weight on `dest` of the XCM message",
                  "   `ReserveAssetDeposit { assets, effects: [ BuyExecution{..}, DepositAsset{..} ] }`."
                ]
              },
              {
                "name": "execute",
                "args": [
                  {
                    "name": "message",
                    "type": "Xcm"
                  },
                  {
                    "name": "max_weight",
                    "type": "Weight"
                  }
                ],
                "docs": [
                  " Execute an XCM message from a local, signed, origin.",
                  "",
                  " An event is deposited indicating whether `msg` could be executed completely or only",
                  " partially.",
                  "",
                  " No more than `max_weight` will be used in its attempted execution. If this is less than the",
                  " maximum amount of weight that the message could take to be executed, then no execution",
                  " attempt will be made.",
                  "",
                  " NOTE: A successful return to this does *not* imply that the `msg` was executed successfully",
                  " to completion; only that *some* of it was executed."
                ]
              }
            ],
            "events": [
              {
                "name": "Attempted",
                "args": [
                  "Outcome"
                ],
                "docs": []
              },
              {
                "name": "Sent",
                "args": [
                  "MultiLocation",
                  "MultiLocation",
                  "Xcm"
                ],
                "docs": []
              }
            ],
            "constants": [],
            "errors": [
              {
                "name": "Unreachable",
                "docs": []
              },
              {
                "name": "SendFailure",
                "docs": []
              },
              {
                "name": "Filtered",
                "docs": [
                  " The message execution fails the filter."
                ]
              },
              {
                "name": "UnweighableMessage",
                "docs": [
                  " The message's weight could not be determined."
                ]
              }
            ],
            "index": "51"
          },
          {
            "name": "CumulusXcm",
            "storage": null,
            "calls": null,
            "events": [
              {
                "name": "InvalidFormat",
                "args": [
                  "[u8;8]"
                ],
                "docs": [
                  " Downward message is invalid XCM.",
                  " \\[ id \\]"
                ]
              },
              {
                "name": "UnsupportedVersion",
                "args": [
                  "[u8;8]"
                ],
                "docs": [
                  " Downward message is unsupported version of XCM.",
                  " \\[ id \\]"
                ]
              },
              {
                "name": "ExecutedDownward",
                "args": [
                  "[u8;8]",
                  "Outcome"
                ],
                "docs": [
                  " Downward message executed with the given outcome.",
                  " \\[ id, outcome \\]"
                ]
              }
            ],
            "constants": [],
            "errors": [],
            "index": "52"
          },
          {
            "name": "DmpQueue",
            "storage": {
              "prefix": "DmpQueue",
              "items": [
                {
                  "name": "Configuration",
                  "modifier": "Default",
                  "type": {
                    "plain": "ConfigData"
                  },
                  "fallback": "0x00e40b5402000000",
                  "docs": [
                    " The configuration."
                  ]
                },
                {
                  "name": "PageIndex",
                  "modifier": "Default",
                  "type": {
                    "plain": "PageIndexData"
                  },
                  "fallback": "0x00000000000000000000000000000000",
                  "docs": [
                    " The page index."
                  ]
                },
                {
                  "name": "Pages",
                  "modifier": "Default",
                  "type": {
                    "map": {
                      "hasher": "Blake2_128Concat",
                      "key": "PageCounter",
                      "value": "Vec<(RelayBlockNumber,Bytes)>",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The queue pages."
                  ]
                },
                {
                  "name": "Overweight",
                  "modifier": "Optional",
                  "type": {
                    "map": {
                      "hasher": "Blake2_128Concat",
                      "key": "OverweightIndex",
                      "value": "(RelayBlockNumber,Bytes)",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The overweight messages."
                  ]
                }
              ]
            },
            "calls": [
              {
                "name": "service_overweight",
                "args": [
                  {
                    "name": "index",
                    "type": "OverweightIndex"
                  },
                  {
                    "name": "weight_limit",
                    "type": "Weight"
                  }
                ],
                "docs": [
                  " Service a single overweight message.",
                  "",
                  " - `origin`: Must pass `ExecuteOverweightOrigin`.",
                  " - `index`: The index of the overweight message to service.",
                  " - `weight_limit`: The amount of weight that message execution may take.",
                  "",
                  " Errors:",
                  " - `Unknown`: Message of `index` is unknown.",
                  " - `OverLimit`: Message execution may use greater than `weight_limit`.",
                  "",
                  " Events:",
                  " - `OverweightServiced`: On success."
                ]
              }
            ],
            "events": [
              {
                "name": "InvalidFormat",
                "args": [
                  "MessageId"
                ],
                "docs": [
                  " Downward message is invalid XCM.",
                  " \\[ id \\]"
                ]
              },
              {
                "name": "UnsupportedVersion",
                "args": [
                  "MessageId"
                ],
                "docs": [
                  " Downward message is unsupported version of XCM.",
                  " \\[ id \\]"
                ]
              },
              {
                "name": "ExecutedDownward",
                "args": [
                  "MessageId",
                  "Outcome"
                ],
                "docs": [
                  " Downward message executed with the given outcome.",
                  " \\[ id, outcome \\]"
                ]
              },
              {
                "name": "WeightExhausted",
                "args": [
                  "MessageId",
                  "Weight",
                  "Weight"
                ],
                "docs": [
                  " The weight limit for handling downward messages was reached.",
                  " \\[ id, remaining, required \\]"
                ]
              },
              {
                "name": "OverweightEnqueued",
                "args": [
                  "MessageId",
                  "OverweightIndex",
                  "Weight"
                ],
                "docs": [
                  " Downward message is overweight and was placed in the overweight queue.",
                  " \\[ id, index, required \\]"
                ]
              },
              {
                "name": "OverweightServiced",
                "args": [
                  "OverweightIndex",
                  "Weight"
                ],
                "docs": [
                  " Downward message from the overweight queue was executed.",
                  " \\[ index, used \\]"
                ]
              }
            ],
            "constants": [],
            "errors": [
              {
                "name": "Unknown",
                "docs": [
                  " The message index given is unknown."
                ]
              },
              {
                "name": "OverLimit",
                "docs": [
                  " The amount of weight given is possibly not enough for executing the message."
                ]
              }
            ],
            "index": "53"
          },
          {
            "name": "XTokens",
            "storage": {
              "prefix": "XTokens",
              "items": []
            },
            "calls": [
              {
                "name": "transfer",
                "args": [
                  {
                    "name": "currency_id",
                    "type": "CurrencyId"
                  },
                  {
                    "name": "amount",
                    "type": "Balance"
                  },
                  {
                    "name": "dest",
                    "type": "MultiLocation"
                  },
                  {
                    "name": "dest_weight",
                    "type": "Weight"
                  }
                ],
                "docs": [
                  " Transfer native currencies."
                ]
              },
              {
                "name": "transfer_multiasset",
                "args": [
                  {
                    "name": "asset",
                    "type": "MultiAsset"
                  },
                  {
                    "name": "dest",
                    "type": "MultiLocation"
                  },
                  {
                    "name": "dest_weight",
                    "type": "Weight"
                  }
                ],
                "docs": [
                  " Transfer `MultiAsset`."
                ]
              }
            ],
            "events": [
              {
                "name": "Transferred",
                "args": [
                  "AccountId",
                  "CurrencyId",
                  "Balance",
                  "MultiLocation"
                ],
                "docs": [
                  " Transferred. \\[sender, currency_id, amount, dest\\]"
                ]
              },
              {
                "name": "TransferFailed",
                "args": [
                  "AccountId",
                  "CurrencyId",
                  "Balance",
                  "MultiLocation",
                  "XcmError"
                ],
                "docs": [
                  " Transfer XCM execution failed. \\[sender, currency_id, amount, dest,",
                  " xcm_err\\]"
                ]
              },
              {
                "name": "TransferredMultiAsset",
                "args": [
                  "AccountId",
                  "MultiAsset",
                  "MultiLocation"
                ],
                "docs": [
                  " Transferred `MultiAsset`. \\[sender, asset, dest\\]"
                ]
              },
              {
                "name": "TransferredMultiAssetFailed",
                "args": [
                  "AccountId",
                  "MultiAsset",
                  "MultiLocation",
                  "XcmError"
                ],
                "docs": [
                  " Transfer `MultiAsset` XCM execution failed. \\[sender, asset, dest,",
                  " xcm_err\\]"
                ]
              }
            ],
            "constants": [
              {
                "name": "SelfLocation",
                "type": "MultiLocation",
                "value": "0x020001411f",
                "docs": [
                  " Self chain location."
                ]
              }
            ],
            "errors": [
              {
                "name": "AssetHasNoReserve",
                "docs": [
                  " Asset has no reserve location."
                ]
              },
              {
                "name": "NotCrossChainTransfer",
                "docs": [
                  " Not cross-chain transfer."
                ]
              },
              {
                "name": "InvalidDest",
                "docs": [
                  " Invalid transfer destination."
                ]
              },
              {
                "name": "NotCrossChainTransferableCurrency",
                "docs": [
                  " Currency is not cross-chain transferable."
                ]
              },
              {
                "name": "UnweighableMessage",
                "docs": [
                  " The message's weight could not be determined."
                ]
              }
            ],
            "index": "54"
          },
          {
            "name": "UnknownTokens",
            "storage": {
              "prefix": "UnknownTokens",
              "items": [
                {
                  "name": "ConcreteFungibleBalances",
                  "modifier": "Default",
                  "type": {
                    "doubleMap": {
                      "hasher": "Blake2_128Concat",
                      "key1": "MultiLocation",
                      "key2": "MultiLocation",
                      "value": "u128",
                      "key2Hasher": "Blake2_128Concat"
                    }
                  },
                  "fallback": "0x00000000000000000000000000000000",
                  "docs": [
                    " Concrete fungible balances under a given location and a concrete",
                    " fungible id.",
                    "",
                    " double_map: who, asset_id => u128"
                  ]
                },
                {
                  "name": "AbstractFungibleBalances",
                  "modifier": "Default",
                  "type": {
                    "doubleMap": {
                      "hasher": "Blake2_128Concat",
                      "key1": "MultiLocation",
                      "key2": "Bytes",
                      "value": "u128",
                      "key2Hasher": "Blake2_128Concat"
                    }
                  },
                  "fallback": "0x00000000000000000000000000000000",
                  "docs": [
                    " Abstract fungible balances under a given location and a abstract",
                    " fungible id.",
                    "",
                    " double_map: who, asset_id => u128"
                  ]
                }
              ]
            },
            "calls": null,
            "events": [
              {
                "name": "Deposited",
                "args": [
                  "MultiAsset",
                  "MultiLocation"
                ],
                "docs": [
                  " Deposit success. [asset, to]"
                ]
              },
              {
                "name": "Withdrawn",
                "args": [
                  "MultiAsset",
                  "MultiLocation"
                ],
                "docs": [
                  " Withdraw success. [asset, from]"
                ]
              }
            ],
            "constants": [],
            "errors": [
              {
                "name": "BalanceTooLow",
                "docs": [
                  " The balance is too low."
                ]
              },
              {
                "name": "BalanceOverflow",
                "docs": [
                  " The operation will cause balance to overflow."
                ]
              },
              {
                "name": "UnhandledAsset",
                "docs": [
                  " Unhandled asset."
                ]
              }
            ],
            "index": "55"
          },
          {
            "name": "Authority",
            "storage": {
              "prefix": "Authority",
              "items": [
                {
                  "name": "NextTaskIndex",
                  "modifier": "Default",
                  "type": {
                    "plain": "ScheduleTaskIndex"
                  },
                  "fallback": "0x00000000",
                  "docs": []
                }
              ]
            },
            "calls": [
              {
                "name": "dispatch_as",
                "args": [
                  {
                    "name": "as_origin",
                    "type": "AsOriginId"
                  },
                  {
                    "name": "call",
                    "type": "CallOf"
                  }
                ],
                "docs": [
                  " Dispatch a dispatchable on behalf of other origin"
                ]
              },
              {
                "name": "schedule_dispatch",
                "args": [
                  {
                    "name": "when",
                    "type": "DispatchTime"
                  },
                  {
                    "name": "priority",
                    "type": "Priority"
                  },
                  {
                    "name": "with_delayed_origin",
                    "type": "bool"
                  },
                  {
                    "name": "call",
                    "type": "CallOf"
                  }
                ],
                "docs": [
                  " Schedule a dispatchable to be dispatched at later block.",
                  " This is the only way to dispatch a call with `DelayedOrigin`."
                ]
              },
              {
                "name": "fast_track_scheduled_dispatch",
                "args": [
                  {
                    "name": "initial_origin",
                    "type": "PalletsOrigin"
                  },
                  {
                    "name": "task_id",
                    "type": "ScheduleTaskIndex"
                  },
                  {
                    "name": "when",
                    "type": "DispatchTime"
                  }
                ],
                "docs": [
                  " Fast track a scheduled dispatchable."
                ]
              },
              {
                "name": "delay_scheduled_dispatch",
                "args": [
                  {
                    "name": "initial_origin",
                    "type": "PalletsOrigin"
                  },
                  {
                    "name": "task_id",
                    "type": "ScheduleTaskIndex"
                  },
                  {
                    "name": "additional_delay",
                    "type": "BlockNumber"
                  }
                ],
                "docs": [
                  " Delay a scheduled dispatchable."
                ]
              },
              {
                "name": "cancel_scheduled_dispatch",
                "args": [
                  {
                    "name": "initial_origin",
                    "type": "PalletsOrigin"
                  },
                  {
                    "name": "task_id",
                    "type": "ScheduleTaskIndex"
                  }
                ],
                "docs": [
                  " Cancel a scheduled dispatchable."
                ]
              }
            ],
            "events": [
              {
                "name": "Dispatched",
                "args": [
                  "DispatchResult"
                ],
                "docs": [
                  " A call is dispatched. [result]"
                ]
              },
              {
                "name": "Scheduled",
                "args": [
                  "PalletsOrigin",
                  "ScheduleTaskIndex"
                ],
                "docs": [
                  " A call is scheduled. [origin, index]"
                ]
              },
              {
                "name": "FastTracked",
                "args": [
                  "PalletsOrigin",
                  "ScheduleTaskIndex",
                  "BlockNumber"
                ],
                "docs": [
                  " A scheduled call is fast tracked. [origin, index, when]"
                ]
              },
              {
                "name": "Delayed",
                "args": [
                  "PalletsOrigin",
                  "ScheduleTaskIndex",
                  "BlockNumber"
                ],
                "docs": [
                  " A scheduled call is delayed. [origin, index, when]"
                ]
              },
              {
                "name": "Cancelled",
                "args": [
                  "PalletsOrigin",
                  "ScheduleTaskIndex"
                ],
                "docs": [
                  " A scheduled call is cancelled. [origin, index]"
                ]
              }
            ],
            "constants": [],
            "errors": [
              {
                "name": "FailedToSchedule",
                "docs": [
                  " Failed to schedule a task."
                ]
              },
              {
                "name": "FailedToCancel",
                "docs": [
                  " Failed to cancel a task."
                ]
              },
              {
                "name": "FailedToFastTrack",
                "docs": [
                  " Failed to fast track a task."
                ]
              },
              {
                "name": "FailedToDelay",
                "docs": [
                  " Failed to delay a task."
                ]
              }
            ],
            "index": "60"
          },
          {
            "name": "GeneralCouncil",
            "storage": {
              "prefix": "Instance1Collective",
              "items": [
                {
                  "name": "Proposals",
                  "modifier": "Default",
                  "type": {
                    "plain": "Vec<Hash>"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The hashes of the active proposals."
                  ]
                },
                {
                  "name": "ProposalOf",
                  "modifier": "Optional",
                  "type": {
                    "map": {
                      "hasher": "Identity",
                      "key": "Hash",
                      "value": "Proposal",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Actual proposal for a given hash, if it's current."
                  ]
                },
                {
                  "name": "Voting",
                  "modifier": "Optional",
                  "type": {
                    "map": {
                      "hasher": "Identity",
                      "key": "Hash",
                      "value": "Votes",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Votes on a given proposal, if it is ongoing."
                  ]
                },
                {
                  "name": "ProposalCount",
                  "modifier": "Default",
                  "type": {
                    "plain": "u32"
                  },
                  "fallback": "0x00000000",
                  "docs": [
                    " Proposals so far."
                  ]
                },
                {
                  "name": "Members",
                  "modifier": "Default",
                  "type": {
                    "plain": "Vec<AccountId>"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The current members of the collective. This is stored sorted (just by value)."
                  ]
                },
                {
                  "name": "Prime",
                  "modifier": "Optional",
                  "type": {
                    "plain": "AccountId"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The prime member that helps determine the default vote behavior in case of absentations."
                  ]
                }
              ]
            },
            "calls": [
              {
                "name": "set_members",
                "args": [
                  {
                    "name": "new_members",
                    "type": "Vec<AccountId>"
                  },
                  {
                    "name": "prime",
                    "type": "Option<AccountId>"
                  },
                  {
                    "name": "old_count",
                    "type": "MemberCount"
                  }
                ],
                "docs": [
                  " Set the collective's membership.",
                  "",
                  " - `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                  " - `prime`: The prime member whose vote sets the default.",
                  " - `old_count`: The upper bound for the previous number of members in storage.",
                  "                Used for weight estimation.",
                  "",
                  " Requires root origin.",
                  "",
                  " NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                  "       the weight estimations rely on it to estimate dispatchable weight.",
                  "",
                  " # <weight>",
                  " ## Weight",
                  " - `O(MP + N)` where:",
                  "   - `M` old-members-count (code- and governance-bounded)",
                  "   - `N` new-members-count (code- and governance-bounded)",
                  "   - `P` proposals-count (code-bounded)",
                  " - DB:",
                  "   - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the members",
                  "   - 1 storage read (codec `O(P)`) for reading the proposals",
                  "   - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                  "   - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                  " # </weight>"
                ]
              },
              {
                "name": "execute",
                "args": [
                  {
                    "name": "proposal",
                    "type": "Proposal"
                  },
                  {
                    "name": "length_bound",
                    "type": "Compact<u32>"
                  }
                ],
                "docs": [
                  " Dispatch a proposal from a member using the `Member` origin.",
                  "",
                  " Origin must be a member of the collective.",
                  "",
                  " # <weight>",
                  " ## Weight",
                  " - `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching `proposal`",
                  " - DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                  " - 1 event",
                  " # </weight>"
                ]
              },
              {
                "name": "propose",
                "args": [
                  {
                    "name": "threshold",
                    "type": "Compact<MemberCount>"
                  },
                  {
                    "name": "proposal",
                    "type": "Proposal"
                  },
                  {
                    "name": "length_bound",
                    "type": "Compact<u32>"
                  }
                ],
                "docs": [
                  " Add a new proposal to either be voted on or executed directly.",
                  "",
                  " Requires the sender to be member.",
                  "",
                  " `threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                  " or put up for voting.",
                  "",
                  " # <weight>",
                  " ## Weight",
                  " - `O(B + M + P1)` or `O(B + M + P2)` where:",
                  "   - `B` is `proposal` size in bytes (length-fee-bounded)",
                  "   - `M` is members-count (code- and governance-bounded)",
                  "   - branching is influenced by `threshold` where:",
                  "     - `P1` is proposal execution complexity (`threshold < 2`)",
                  "     - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                  " - DB:",
                  "   - 1 storage read `is_member` (codec `O(M)`)",
                  "   - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                  "   - DB accesses influenced by `threshold`:",
                  "     - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                  "     - OR proposal insertion (`threshold <= 2`)",
                  "       - 1 storage mutation `Proposals` (codec `O(P2)`)",
                  "       - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                  "       - 1 storage write `ProposalOf` (codec `O(B)`)",
                  "       - 1 storage write `Voting` (codec `O(M)`)",
                  "   - 1 event",
                  " # </weight>"
                ]
              },
              {
                "name": "vote",
                "args": [
                  {
                    "name": "proposal",
                    "type": "Hash"
                  },
                  {
                    "name": "index",
                    "type": "Compact<ProposalIndex>"
                  },
                  {
                    "name": "approve",
                    "type": "bool"
                  }
                ],
                "docs": [
                  " Add an aye or nay vote for the sender to the given proposal.",
                  "",
                  " Requires the sender to be a member.",
                  "",
                  " Transaction fees will be waived if the member is voting on any particular proposal",
                  " for the first time and the call is successful. Subsequent vote changes will charge a fee.",
                  " # <weight>",
                  " ## Weight",
                  " - `O(M)` where `M` is members-count (code- and governance-bounded)",
                  " - DB:",
                  "   - 1 storage read `Members` (codec `O(M)`)",
                  "   - 1 storage mutation `Voting` (codec `O(M)`)",
                  " - 1 event",
                  " # </weight>"
                ]
              },
              {
                "name": "close",
                "args": [
                  {
                    "name": "proposal_hash",
                    "type": "Hash"
                  },
                  {
                    "name": "index",
                    "type": "Compact<ProposalIndex>"
                  },
                  {
                    "name": "proposal_weight_bound",
                    "type": "Compact<Weight>"
                  },
                  {
                    "name": "length_bound",
                    "type": "Compact<u32>"
                  }
                ],
                "docs": [
                  " Close a vote that is either approved, disapproved or whose voting period has ended.",
                  "",
                  " May be called by any signed account in order to finish voting and close the proposal.",
                  "",
                  " If called before the end of the voting period it will only close the vote if it is",
                  " has enough votes to be approved or disapproved.",
                  "",
                  " If called after the end of the voting period abstentions are counted as rejections",
                  " unless there is a prime member set and the prime member cast an approval.",
                  "",
                  " If the close operation completes successfully with disapproval, the transaction fee will",
                  " be waived. Otherwise execution of the approved operation will be charged to the caller.",
                  "",
                  " + `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed proposal.",
                  " + `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                  "                   `storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                  "",
                  " # <weight>",
                  " ## Weight",
                  " - `O(B + M + P1 + P2)` where:",
                  "   - `B` is `proposal` size in bytes (length-fee-bounded)",
                  "   - `M` is members-count (code- and governance-bounded)",
                  "   - `P1` is the complexity of `proposal` preimage.",
                  "   - `P2` is proposal-count (code-bounded)",
                  " - DB:",
                  "  - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                  "  - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec `O(P2)`)",
                  "  - any mutations done while executing `proposal` (`P1`)",
                  " - up to 3 events",
                  " # </weight>"
                ]
              },
              {
                "name": "disapprove_proposal",
                "args": [
                  {
                    "name": "proposal_hash",
                    "type": "Hash"
                  }
                ],
                "docs": [
                  " Disapprove a proposal, close, and remove it from the system, regardless of its current state.",
                  "",
                  " Must be called by the Root origin.",
                  "",
                  " Parameters:",
                  " * `proposal_hash`: The hash of the proposal that should be disapproved.",
                  "",
                  " # <weight>",
                  " Complexity: O(P) where P is the number of max proposals",
                  " DB Weight:",
                  " * Reads: Proposals",
                  " * Writes: Voting, Proposals, ProposalOf",
                  " # </weight>"
                ]
              }
            ],
            "events": [
              {
                "name": "Proposed",
                "args": [
                  "AccountId",
                  "ProposalIndex",
                  "Hash",
                  "MemberCount"
                ],
                "docs": [
                  " A motion (given hash) has been proposed (by given account) with a threshold (given",
                  " `MemberCount`).",
                  " \\[account, proposal_index, proposal_hash, threshold\\]"
                ]
              },
              {
                "name": "Voted",
                "args": [
                  "AccountId",
                  "Hash",
                  "bool",
                  "MemberCount",
                  "MemberCount"
                ],
                "docs": [
                  " A motion (given hash) has been voted on by given account, leaving",
                  " a tally (yes votes and no votes given respectively as `MemberCount`).",
                  " \\[account, proposal_hash, voted, yes, no\\]"
                ]
              },
              {
                "name": "Approved",
                "args": [
                  "Hash"
                ],
                "docs": [
                  " A motion was approved by the required threshold.",
                  " \\[proposal_hash\\]"
                ]
              },
              {
                "name": "Disapproved",
                "args": [
                  "Hash"
                ],
                "docs": [
                  " A motion was not approved by the required threshold.",
                  " \\[proposal_hash\\]"
                ]
              },
              {
                "name": "Executed",
                "args": [
                  "Hash",
                  "DispatchResult"
                ],
                "docs": [
                  " A motion was executed; result will be `Ok` if it returned without error.",
                  " \\[proposal_hash, result\\]"
                ]
              },
              {
                "name": "MemberExecuted",
                "args": [
                  "Hash",
                  "DispatchResult"
                ],
                "docs": [
                  " A single member did some action; result will be `Ok` if it returned without error.",
                  " \\[proposal_hash, result\\]"
                ]
              },
              {
                "name": "Closed",
                "args": [
                  "Hash",
                  "MemberCount",
                  "MemberCount"
                ],
                "docs": [
                  " A proposal was closed because its threshold was reached or after its duration was up.",
                  " \\[proposal_hash, yes, no\\]"
                ]
              }
            ],
            "constants": [],
            "errors": [
              {
                "name": "NotMember",
                "docs": [
                  " Account is not a member"
                ]
              },
              {
                "name": "DuplicateProposal",
                "docs": [
                  " Duplicate proposals not allowed"
                ]
              },
              {
                "name": "ProposalMissing",
                "docs": [
                  " Proposal must exist"
                ]
              },
              {
                "name": "WrongIndex",
                "docs": [
                  " Mismatched index"
                ]
              },
              {
                "name": "DuplicateVote",
                "docs": [
                  " Duplicate vote ignored"
                ]
              },
              {
                "name": "AlreadyInitialized",
                "docs": [
                  " Members are already initialized!"
                ]
              },
              {
                "name": "TooEarly",
                "docs": [
                  " The close call was made too early, before the end of the voting."
                ]
              },
              {
                "name": "TooManyProposals",
                "docs": [
                  " There can only be a maximum of `MaxProposals` active proposals."
                ]
              },
              {
                "name": "WrongProposalWeight",
                "docs": [
                  " The given weight bound for the proposal was too low."
                ]
              },
              {
                "name": "WrongProposalLength",
                "docs": [
                  " The given length bound for the proposal was too low."
                ]
              }
            ],
            "index": "61"
          },
          {
            "name": "GeneralCouncilMembership",
            "storage": {
              "prefix": "Instance1Membership",
              "items": [
                {
                  "name": "Members",
                  "modifier": "Default",
                  "type": {
                    "plain": "Vec<AccountId>"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The current membership, stored as an ordered Vec."
                  ]
                },
                {
                  "name": "Prime",
                  "modifier": "Optional",
                  "type": {
                    "plain": "AccountId"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The current prime member, if one exists."
                  ]
                }
              ]
            },
            "calls": [
              {
                "name": "add_member",
                "args": [
                  {
                    "name": "who",
                    "type": "AccountId"
                  }
                ],
                "docs": [
                  " Add a member `who` to the set.",
                  "",
                  " May only be called from `T::AddOrigin`."
                ]
              },
              {
                "name": "remove_member",
                "args": [
                  {
                    "name": "who",
                    "type": "AccountId"
                  }
                ],
                "docs": [
                  " Remove a member `who` from the set.",
                  "",
                  " May only be called from `T::RemoveOrigin`."
                ]
              },
              {
                "name": "swap_member",
                "args": [
                  {
                    "name": "remove",
                    "type": "AccountId"
                  },
                  {
                    "name": "add",
                    "type": "AccountId"
                  }
                ],
                "docs": [
                  " Swap out one member `remove` for another `add`.",
                  "",
                  " May only be called from `T::SwapOrigin`.",
                  "",
                  " Prime membership is *not* passed from `remove` to `add`, if extant."
                ]
              },
              {
                "name": "reset_members",
                "args": [
                  {
                    "name": "members",
                    "type": "Vec<AccountId>"
                  }
                ],
                "docs": [
                  " Change the membership to a new set, disregarding the existing membership. Be nice and",
                  " pass `members` pre-sorted.",
                  "",
                  " May only be called from `T::ResetOrigin`."
                ]
              },
              {
                "name": "change_key",
                "args": [
                  {
                    "name": "new",
                    "type": "AccountId"
                  }
                ],
                "docs": [
                  " Swap out the sending member for some other key `new`.",
                  "",
                  " May only be called from `Signed` origin of a current member.",
                  "",
                  " Prime membership is passed from the origin account to `new`, if extant."
                ]
              },
              {
                "name": "set_prime",
                "args": [
                  {
                    "name": "who",
                    "type": "AccountId"
                  }
                ],
                "docs": [
                  " Set the prime member. Must be a current member.",
                  "",
                  " May only be called from `T::PrimeOrigin`."
                ]
              },
              {
                "name": "clear_prime",
                "args": [],
                "docs": [
                  " Remove the prime member if it exists.",
                  "",
                  " May only be called from `T::PrimeOrigin`."
                ]
              }
            ],
            "events": [
              {
                "name": "MemberAdded",
                "args": [],
                "docs": [
                  " The given member was added; see the transaction for who."
                ]
              },
              {
                "name": "MemberRemoved",
                "args": [],
                "docs": [
                  " The given member was removed; see the transaction for who."
                ]
              },
              {
                "name": "MembersSwapped",
                "args": [],
                "docs": [
                  " Two members were swapped; see the transaction for who."
                ]
              },
              {
                "name": "MembersReset",
                "args": [],
                "docs": [
                  " The membership was reset; see the transaction for who the new set is."
                ]
              },
              {
                "name": "KeyChanged",
                "args": [],
                "docs": [
                  " One of the members' keys changed."
                ]
              },
              {
                "name": "Dummy",
                "args": [
                  "PhantomData"
                ],
                "docs": [
                  " Phantom member, never used."
                ]
              }
            ],
            "constants": [],
            "errors": [
              {
                "name": "AlreadyMember",
                "docs": [
                  " Already a member."
                ]
              },
              {
                "name": "NotMember",
                "docs": [
                  " Not a member."
                ]
              }
            ],
            "index": "62"
          },
          {
            "name": "FinancialCouncil",
            "storage": {
              "prefix": "Instance2Collective",
              "items": [
                {
                  "name": "Proposals",
                  "modifier": "Default",
                  "type": {
                    "plain": "Vec<Hash>"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The hashes of the active proposals."
                  ]
                },
                {
                  "name": "ProposalOf",
                  "modifier": "Optional",
                  "type": {
                    "map": {
                      "hasher": "Identity",
                      "key": "Hash",
                      "value": "Proposal",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Actual proposal for a given hash, if it's current."
                  ]
                },
                {
                  "name": "Voting",
                  "modifier": "Optional",
                  "type": {
                    "map": {
                      "hasher": "Identity",
                      "key": "Hash",
                      "value": "Votes",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Votes on a given proposal, if it is ongoing."
                  ]
                },
                {
                  "name": "ProposalCount",
                  "modifier": "Default",
                  "type": {
                    "plain": "u32"
                  },
                  "fallback": "0x00000000",
                  "docs": [
                    " Proposals so far."
                  ]
                },
                {
                  "name": "Members",
                  "modifier": "Default",
                  "type": {
                    "plain": "Vec<AccountId>"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The current members of the collective. This is stored sorted (just by value)."
                  ]
                },
                {
                  "name": "Prime",
                  "modifier": "Optional",
                  "type": {
                    "plain": "AccountId"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The prime member that helps determine the default vote behavior in case of absentations."
                  ]
                }
              ]
            },
            "calls": [
              {
                "name": "set_members",
                "args": [
                  {
                    "name": "new_members",
                    "type": "Vec<AccountId>"
                  },
                  {
                    "name": "prime",
                    "type": "Option<AccountId>"
                  },
                  {
                    "name": "old_count",
                    "type": "MemberCount"
                  }
                ],
                "docs": [
                  " Set the collective's membership.",
                  "",
                  " - `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                  " - `prime`: The prime member whose vote sets the default.",
                  " - `old_count`: The upper bound for the previous number of members in storage.",
                  "                Used for weight estimation.",
                  "",
                  " Requires root origin.",
                  "",
                  " NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                  "       the weight estimations rely on it to estimate dispatchable weight.",
                  "",
                  " # <weight>",
                  " ## Weight",
                  " - `O(MP + N)` where:",
                  "   - `M` old-members-count (code- and governance-bounded)",
                  "   - `N` new-members-count (code- and governance-bounded)",
                  "   - `P` proposals-count (code-bounded)",
                  " - DB:",
                  "   - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the members",
                  "   - 1 storage read (codec `O(P)`) for reading the proposals",
                  "   - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                  "   - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                  " # </weight>"
                ]
              },
              {
                "name": "execute",
                "args": [
                  {
                    "name": "proposal",
                    "type": "Proposal"
                  },
                  {
                    "name": "length_bound",
                    "type": "Compact<u32>"
                  }
                ],
                "docs": [
                  " Dispatch a proposal from a member using the `Member` origin.",
                  "",
                  " Origin must be a member of the collective.",
                  "",
                  " # <weight>",
                  " ## Weight",
                  " - `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching `proposal`",
                  " - DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                  " - 1 event",
                  " # </weight>"
                ]
              },
              {
                "name": "propose",
                "args": [
                  {
                    "name": "threshold",
                    "type": "Compact<MemberCount>"
                  },
                  {
                    "name": "proposal",
                    "type": "Proposal"
                  },
                  {
                    "name": "length_bound",
                    "type": "Compact<u32>"
                  }
                ],
                "docs": [
                  " Add a new proposal to either be voted on or executed directly.",
                  "",
                  " Requires the sender to be member.",
                  "",
                  " `threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                  " or put up for voting.",
                  "",
                  " # <weight>",
                  " ## Weight",
                  " - `O(B + M + P1)` or `O(B + M + P2)` where:",
                  "   - `B` is `proposal` size in bytes (length-fee-bounded)",
                  "   - `M` is members-count (code- and governance-bounded)",
                  "   - branching is influenced by `threshold` where:",
                  "     - `P1` is proposal execution complexity (`threshold < 2`)",
                  "     - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                  " - DB:",
                  "   - 1 storage read `is_member` (codec `O(M)`)",
                  "   - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                  "   - DB accesses influenced by `threshold`:",
                  "     - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                  "     - OR proposal insertion (`threshold <= 2`)",
                  "       - 1 storage mutation `Proposals` (codec `O(P2)`)",
                  "       - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                  "       - 1 storage write `ProposalOf` (codec `O(B)`)",
                  "       - 1 storage write `Voting` (codec `O(M)`)",
                  "   - 1 event",
                  " # </weight>"
                ]
              },
              {
                "name": "vote",
                "args": [
                  {
                    "name": "proposal",
                    "type": "Hash"
                  },
                  {
                    "name": "index",
                    "type": "Compact<ProposalIndex>"
                  },
                  {
                    "name": "approve",
                    "type": "bool"
                  }
                ],
                "docs": [
                  " Add an aye or nay vote for the sender to the given proposal.",
                  "",
                  " Requires the sender to be a member.",
                  "",
                  " Transaction fees will be waived if the member is voting on any particular proposal",
                  " for the first time and the call is successful. Subsequent vote changes will charge a fee.",
                  " # <weight>",
                  " ## Weight",
                  " - `O(M)` where `M` is members-count (code- and governance-bounded)",
                  " - DB:",
                  "   - 1 storage read `Members` (codec `O(M)`)",
                  "   - 1 storage mutation `Voting` (codec `O(M)`)",
                  " - 1 event",
                  " # </weight>"
                ]
              },
              {
                "name": "close",
                "args": [
                  {
                    "name": "proposal_hash",
                    "type": "Hash"
                  },
                  {
                    "name": "index",
                    "type": "Compact<ProposalIndex>"
                  },
                  {
                    "name": "proposal_weight_bound",
                    "type": "Compact<Weight>"
                  },
                  {
                    "name": "length_bound",
                    "type": "Compact<u32>"
                  }
                ],
                "docs": [
                  " Close a vote that is either approved, disapproved or whose voting period has ended.",
                  "",
                  " May be called by any signed account in order to finish voting and close the proposal.",
                  "",
                  " If called before the end of the voting period it will only close the vote if it is",
                  " has enough votes to be approved or disapproved.",
                  "",
                  " If called after the end of the voting period abstentions are counted as rejections",
                  " unless there is a prime member set and the prime member cast an approval.",
                  "",
                  " If the close operation completes successfully with disapproval, the transaction fee will",
                  " be waived. Otherwise execution of the approved operation will be charged to the caller.",
                  "",
                  " + `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed proposal.",
                  " + `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                  "                   `storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                  "",
                  " # <weight>",
                  " ## Weight",
                  " - `O(B + M + P1 + P2)` where:",
                  "   - `B` is `proposal` size in bytes (length-fee-bounded)",
                  "   - `M` is members-count (code- and governance-bounded)",
                  "   - `P1` is the complexity of `proposal` preimage.",
                  "   - `P2` is proposal-count (code-bounded)",
                  " - DB:",
                  "  - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                  "  - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec `O(P2)`)",
                  "  - any mutations done while executing `proposal` (`P1`)",
                  " - up to 3 events",
                  " # </weight>"
                ]
              },
              {
                "name": "disapprove_proposal",
                "args": [
                  {
                    "name": "proposal_hash",
                    "type": "Hash"
                  }
                ],
                "docs": [
                  " Disapprove a proposal, close, and remove it from the system, regardless of its current state.",
                  "",
                  " Must be called by the Root origin.",
                  "",
                  " Parameters:",
                  " * `proposal_hash`: The hash of the proposal that should be disapproved.",
                  "",
                  " # <weight>",
                  " Complexity: O(P) where P is the number of max proposals",
                  " DB Weight:",
                  " * Reads: Proposals",
                  " * Writes: Voting, Proposals, ProposalOf",
                  " # </weight>"
                ]
              }
            ],
            "events": [
              {
                "name": "Proposed",
                "args": [
                  "AccountId",
                  "ProposalIndex",
                  "Hash",
                  "MemberCount"
                ],
                "docs": [
                  " A motion (given hash) has been proposed (by given account) with a threshold (given",
                  " `MemberCount`).",
                  " \\[account, proposal_index, proposal_hash, threshold\\]"
                ]
              },
              {
                "name": "Voted",
                "args": [
                  "AccountId",
                  "Hash",
                  "bool",
                  "MemberCount",
                  "MemberCount"
                ],
                "docs": [
                  " A motion (given hash) has been voted on by given account, leaving",
                  " a tally (yes votes and no votes given respectively as `MemberCount`).",
                  " \\[account, proposal_hash, voted, yes, no\\]"
                ]
              },
              {
                "name": "Approved",
                "args": [
                  "Hash"
                ],
                "docs": [
                  " A motion was approved by the required threshold.",
                  " \\[proposal_hash\\]"
                ]
              },
              {
                "name": "Disapproved",
                "args": [
                  "Hash"
                ],
                "docs": [
                  " A motion was not approved by the required threshold.",
                  " \\[proposal_hash\\]"
                ]
              },
              {
                "name": "Executed",
                "args": [
                  "Hash",
                  "DispatchResult"
                ],
                "docs": [
                  " A motion was executed; result will be `Ok` if it returned without error.",
                  " \\[proposal_hash, result\\]"
                ]
              },
              {
                "name": "MemberExecuted",
                "args": [
                  "Hash",
                  "DispatchResult"
                ],
                "docs": [
                  " A single member did some action; result will be `Ok` if it returned without error.",
                  " \\[proposal_hash, result\\]"
                ]
              },
              {
                "name": "Closed",
                "args": [
                  "Hash",
                  "MemberCount",
                  "MemberCount"
                ],
                "docs": [
                  " A proposal was closed because its threshold was reached or after its duration was up.",
                  " \\[proposal_hash, yes, no\\]"
                ]
              }
            ],
            "constants": [],
            "errors": [
              {
                "name": "NotMember",
                "docs": [
                  " Account is not a member"
                ]
              },
              {
                "name": "DuplicateProposal",
                "docs": [
                  " Duplicate proposals not allowed"
                ]
              },
              {
                "name": "ProposalMissing",
                "docs": [
                  " Proposal must exist"
                ]
              },
              {
                "name": "WrongIndex",
                "docs": [
                  " Mismatched index"
                ]
              },
              {
                "name": "DuplicateVote",
                "docs": [
                  " Duplicate vote ignored"
                ]
              },
              {
                "name": "AlreadyInitialized",
                "docs": [
                  " Members are already initialized!"
                ]
              },
              {
                "name": "TooEarly",
                "docs": [
                  " The close call was made too early, before the end of the voting."
                ]
              },
              {
                "name": "TooManyProposals",
                "docs": [
                  " There can only be a maximum of `MaxProposals` active proposals."
                ]
              },
              {
                "name": "WrongProposalWeight",
                "docs": [
                  " The given weight bound for the proposal was too low."
                ]
              },
              {
                "name": "WrongProposalLength",
                "docs": [
                  " The given length bound for the proposal was too low."
                ]
              }
            ],
            "index": "63"
          },
          {
            "name": "FinancialCouncilMembership",
            "storage": {
              "prefix": "Instance2Membership",
              "items": [
                {
                  "name": "Members",
                  "modifier": "Default",
                  "type": {
                    "plain": "Vec<AccountId>"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The current membership, stored as an ordered Vec."
                  ]
                },
                {
                  "name": "Prime",
                  "modifier": "Optional",
                  "type": {
                    "plain": "AccountId"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The current prime member, if one exists."
                  ]
                }
              ]
            },
            "calls": [
              {
                "name": "add_member",
                "args": [
                  {
                    "name": "who",
                    "type": "AccountId"
                  }
                ],
                "docs": [
                  " Add a member `who` to the set.",
                  "",
                  " May only be called from `T::AddOrigin`."
                ]
              },
              {
                "name": "remove_member",
                "args": [
                  {
                    "name": "who",
                    "type": "AccountId"
                  }
                ],
                "docs": [
                  " Remove a member `who` from the set.",
                  "",
                  " May only be called from `T::RemoveOrigin`."
                ]
              },
              {
                "name": "swap_member",
                "args": [
                  {
                    "name": "remove",
                    "type": "AccountId"
                  },
                  {
                    "name": "add",
                    "type": "AccountId"
                  }
                ],
                "docs": [
                  " Swap out one member `remove` for another `add`.",
                  "",
                  " May only be called from `T::SwapOrigin`.",
                  "",
                  " Prime membership is *not* passed from `remove` to `add`, if extant."
                ]
              },
              {
                "name": "reset_members",
                "args": [
                  {
                    "name": "members",
                    "type": "Vec<AccountId>"
                  }
                ],
                "docs": [
                  " Change the membership to a new set, disregarding the existing membership. Be nice and",
                  " pass `members` pre-sorted.",
                  "",
                  " May only be called from `T::ResetOrigin`."
                ]
              },
              {
                "name": "change_key",
                "args": [
                  {
                    "name": "new",
                    "type": "AccountId"
                  }
                ],
                "docs": [
                  " Swap out the sending member for some other key `new`.",
                  "",
                  " May only be called from `Signed` origin of a current member.",
                  "",
                  " Prime membership is passed from the origin account to `new`, if extant."
                ]
              },
              {
                "name": "set_prime",
                "args": [
                  {
                    "name": "who",
                    "type": "AccountId"
                  }
                ],
                "docs": [
                  " Set the prime member. Must be a current member.",
                  "",
                  " May only be called from `T::PrimeOrigin`."
                ]
              },
              {
                "name": "clear_prime",
                "args": [],
                "docs": [
                  " Remove the prime member if it exists.",
                  "",
                  " May only be called from `T::PrimeOrigin`."
                ]
              }
            ],
            "events": [
              {
                "name": "MemberAdded",
                "args": [],
                "docs": [
                  " The given member was added; see the transaction for who."
                ]
              },
              {
                "name": "MemberRemoved",
                "args": [],
                "docs": [
                  " The given member was removed; see the transaction for who."
                ]
              },
              {
                "name": "MembersSwapped",
                "args": [],
                "docs": [
                  " Two members were swapped; see the transaction for who."
                ]
              },
              {
                "name": "MembersReset",
                "args": [],
                "docs": [
                  " The membership was reset; see the transaction for who the new set is."
                ]
              },
              {
                "name": "KeyChanged",
                "args": [],
                "docs": [
                  " One of the members' keys changed."
                ]
              },
              {
                "name": "Dummy",
                "args": [
                  "PhantomData"
                ],
                "docs": [
                  " Phantom member, never used."
                ]
              }
            ],
            "constants": [],
            "errors": [
              {
                "name": "AlreadyMember",
                "docs": [
                  " Already a member."
                ]
              },
              {
                "name": "NotMember",
                "docs": [
                  " Not a member."
                ]
              }
            ],
            "index": "64"
          },
          {
            "name": "HomaCouncil",
            "storage": {
              "prefix": "Instance3Collective",
              "items": [
                {
                  "name": "Proposals",
                  "modifier": "Default",
                  "type": {
                    "plain": "Vec<Hash>"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The hashes of the active proposals."
                  ]
                },
                {
                  "name": "ProposalOf",
                  "modifier": "Optional",
                  "type": {
                    "map": {
                      "hasher": "Identity",
                      "key": "Hash",
                      "value": "Proposal",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Actual proposal for a given hash, if it's current."
                  ]
                },
                {
                  "name": "Voting",
                  "modifier": "Optional",
                  "type": {
                    "map": {
                      "hasher": "Identity",
                      "key": "Hash",
                      "value": "Votes",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Votes on a given proposal, if it is ongoing."
                  ]
                },
                {
                  "name": "ProposalCount",
                  "modifier": "Default",
                  "type": {
                    "plain": "u32"
                  },
                  "fallback": "0x00000000",
                  "docs": [
                    " Proposals so far."
                  ]
                },
                {
                  "name": "Members",
                  "modifier": "Default",
                  "type": {
                    "plain": "Vec<AccountId>"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The current members of the collective. This is stored sorted (just by value)."
                  ]
                },
                {
                  "name": "Prime",
                  "modifier": "Optional",
                  "type": {
                    "plain": "AccountId"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The prime member that helps determine the default vote behavior in case of absentations."
                  ]
                }
              ]
            },
            "calls": [
              {
                "name": "set_members",
                "args": [
                  {
                    "name": "new_members",
                    "type": "Vec<AccountId>"
                  },
                  {
                    "name": "prime",
                    "type": "Option<AccountId>"
                  },
                  {
                    "name": "old_count",
                    "type": "MemberCount"
                  }
                ],
                "docs": [
                  " Set the collective's membership.",
                  "",
                  " - `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                  " - `prime`: The prime member whose vote sets the default.",
                  " - `old_count`: The upper bound for the previous number of members in storage.",
                  "                Used for weight estimation.",
                  "",
                  " Requires root origin.",
                  "",
                  " NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                  "       the weight estimations rely on it to estimate dispatchable weight.",
                  "",
                  " # <weight>",
                  " ## Weight",
                  " - `O(MP + N)` where:",
                  "   - `M` old-members-count (code- and governance-bounded)",
                  "   - `N` new-members-count (code- and governance-bounded)",
                  "   - `P` proposals-count (code-bounded)",
                  " - DB:",
                  "   - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the members",
                  "   - 1 storage read (codec `O(P)`) for reading the proposals",
                  "   - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                  "   - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                  " # </weight>"
                ]
              },
              {
                "name": "execute",
                "args": [
                  {
                    "name": "proposal",
                    "type": "Proposal"
                  },
                  {
                    "name": "length_bound",
                    "type": "Compact<u32>"
                  }
                ],
                "docs": [
                  " Dispatch a proposal from a member using the `Member` origin.",
                  "",
                  " Origin must be a member of the collective.",
                  "",
                  " # <weight>",
                  " ## Weight",
                  " - `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching `proposal`",
                  " - DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                  " - 1 event",
                  " # </weight>"
                ]
              },
              {
                "name": "propose",
                "args": [
                  {
                    "name": "threshold",
                    "type": "Compact<MemberCount>"
                  },
                  {
                    "name": "proposal",
                    "type": "Proposal"
                  },
                  {
                    "name": "length_bound",
                    "type": "Compact<u32>"
                  }
                ],
                "docs": [
                  " Add a new proposal to either be voted on or executed directly.",
                  "",
                  " Requires the sender to be member.",
                  "",
                  " `threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                  " or put up for voting.",
                  "",
                  " # <weight>",
                  " ## Weight",
                  " - `O(B + M + P1)` or `O(B + M + P2)` where:",
                  "   - `B` is `proposal` size in bytes (length-fee-bounded)",
                  "   - `M` is members-count (code- and governance-bounded)",
                  "   - branching is influenced by `threshold` where:",
                  "     - `P1` is proposal execution complexity (`threshold < 2`)",
                  "     - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                  " - DB:",
                  "   - 1 storage read `is_member` (codec `O(M)`)",
                  "   - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                  "   - DB accesses influenced by `threshold`:",
                  "     - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                  "     - OR proposal insertion (`threshold <= 2`)",
                  "       - 1 storage mutation `Proposals` (codec `O(P2)`)",
                  "       - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                  "       - 1 storage write `ProposalOf` (codec `O(B)`)",
                  "       - 1 storage write `Voting` (codec `O(M)`)",
                  "   - 1 event",
                  " # </weight>"
                ]
              },
              {
                "name": "vote",
                "args": [
                  {
                    "name": "proposal",
                    "type": "Hash"
                  },
                  {
                    "name": "index",
                    "type": "Compact<ProposalIndex>"
                  },
                  {
                    "name": "approve",
                    "type": "bool"
                  }
                ],
                "docs": [
                  " Add an aye or nay vote for the sender to the given proposal.",
                  "",
                  " Requires the sender to be a member.",
                  "",
                  " Transaction fees will be waived if the member is voting on any particular proposal",
                  " for the first time and the call is successful. Subsequent vote changes will charge a fee.",
                  " # <weight>",
                  " ## Weight",
                  " - `O(M)` where `M` is members-count (code- and governance-bounded)",
                  " - DB:",
                  "   - 1 storage read `Members` (codec `O(M)`)",
                  "   - 1 storage mutation `Voting` (codec `O(M)`)",
                  " - 1 event",
                  " # </weight>"
                ]
              },
              {
                "name": "close",
                "args": [
                  {
                    "name": "proposal_hash",
                    "type": "Hash"
                  },
                  {
                    "name": "index",
                    "type": "Compact<ProposalIndex>"
                  },
                  {
                    "name": "proposal_weight_bound",
                    "type": "Compact<Weight>"
                  },
                  {
                    "name": "length_bound",
                    "type": "Compact<u32>"
                  }
                ],
                "docs": [
                  " Close a vote that is either approved, disapproved or whose voting period has ended.",
                  "",
                  " May be called by any signed account in order to finish voting and close the proposal.",
                  "",
                  " If called before the end of the voting period it will only close the vote if it is",
                  " has enough votes to be approved or disapproved.",
                  "",
                  " If called after the end of the voting period abstentions are counted as rejections",
                  " unless there is a prime member set and the prime member cast an approval.",
                  "",
                  " If the close operation completes successfully with disapproval, the transaction fee will",
                  " be waived. Otherwise execution of the approved operation will be charged to the caller.",
                  "",
                  " + `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed proposal.",
                  " + `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                  "                   `storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                  "",
                  " # <weight>",
                  " ## Weight",
                  " - `O(B + M + P1 + P2)` where:",
                  "   - `B` is `proposal` size in bytes (length-fee-bounded)",
                  "   - `M` is members-count (code- and governance-bounded)",
                  "   - `P1` is the complexity of `proposal` preimage.",
                  "   - `P2` is proposal-count (code-bounded)",
                  " - DB:",
                  "  - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                  "  - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec `O(P2)`)",
                  "  - any mutations done while executing `proposal` (`P1`)",
                  " - up to 3 events",
                  " # </weight>"
                ]
              },
              {
                "name": "disapprove_proposal",
                "args": [
                  {
                    "name": "proposal_hash",
                    "type": "Hash"
                  }
                ],
                "docs": [
                  " Disapprove a proposal, close, and remove it from the system, regardless of its current state.",
                  "",
                  " Must be called by the Root origin.",
                  "",
                  " Parameters:",
                  " * `proposal_hash`: The hash of the proposal that should be disapproved.",
                  "",
                  " # <weight>",
                  " Complexity: O(P) where P is the number of max proposals",
                  " DB Weight:",
                  " * Reads: Proposals",
                  " * Writes: Voting, Proposals, ProposalOf",
                  " # </weight>"
                ]
              }
            ],
            "events": [
              {
                "name": "Proposed",
                "args": [
                  "AccountId",
                  "ProposalIndex",
                  "Hash",
                  "MemberCount"
                ],
                "docs": [
                  " A motion (given hash) has been proposed (by given account) with a threshold (given",
                  " `MemberCount`).",
                  " \\[account, proposal_index, proposal_hash, threshold\\]"
                ]
              },
              {
                "name": "Voted",
                "args": [
                  "AccountId",
                  "Hash",
                  "bool",
                  "MemberCount",
                  "MemberCount"
                ],
                "docs": [
                  " A motion (given hash) has been voted on by given account, leaving",
                  " a tally (yes votes and no votes given respectively as `MemberCount`).",
                  " \\[account, proposal_hash, voted, yes, no\\]"
                ]
              },
              {
                "name": "Approved",
                "args": [
                  "Hash"
                ],
                "docs": [
                  " A motion was approved by the required threshold.",
                  " \\[proposal_hash\\]"
                ]
              },
              {
                "name": "Disapproved",
                "args": [
                  "Hash"
                ],
                "docs": [
                  " A motion was not approved by the required threshold.",
                  " \\[proposal_hash\\]"
                ]
              },
              {
                "name": "Executed",
                "args": [
                  "Hash",
                  "DispatchResult"
                ],
                "docs": [
                  " A motion was executed; result will be `Ok` if it returned without error.",
                  " \\[proposal_hash, result\\]"
                ]
              },
              {
                "name": "MemberExecuted",
                "args": [
                  "Hash",
                  "DispatchResult"
                ],
                "docs": [
                  " A single member did some action; result will be `Ok` if it returned without error.",
                  " \\[proposal_hash, result\\]"
                ]
              },
              {
                "name": "Closed",
                "args": [
                  "Hash",
                  "MemberCount",
                  "MemberCount"
                ],
                "docs": [
                  " A proposal was closed because its threshold was reached or after its duration was up.",
                  " \\[proposal_hash, yes, no\\]"
                ]
              }
            ],
            "constants": [],
            "errors": [
              {
                "name": "NotMember",
                "docs": [
                  " Account is not a member"
                ]
              },
              {
                "name": "DuplicateProposal",
                "docs": [
                  " Duplicate proposals not allowed"
                ]
              },
              {
                "name": "ProposalMissing",
                "docs": [
                  " Proposal must exist"
                ]
              },
              {
                "name": "WrongIndex",
                "docs": [
                  " Mismatched index"
                ]
              },
              {
                "name": "DuplicateVote",
                "docs": [
                  " Duplicate vote ignored"
                ]
              },
              {
                "name": "AlreadyInitialized",
                "docs": [
                  " Members are already initialized!"
                ]
              },
              {
                "name": "TooEarly",
                "docs": [
                  " The close call was made too early, before the end of the voting."
                ]
              },
              {
                "name": "TooManyProposals",
                "docs": [
                  " There can only be a maximum of `MaxProposals` active proposals."
                ]
              },
              {
                "name": "WrongProposalWeight",
                "docs": [
                  " The given weight bound for the proposal was too low."
                ]
              },
              {
                "name": "WrongProposalLength",
                "docs": [
                  " The given length bound for the proposal was too low."
                ]
              }
            ],
            "index": "65"
          },
          {
            "name": "HomaCouncilMembership",
            "storage": {
              "prefix": "Instance3Membership",
              "items": [
                {
                  "name": "Members",
                  "modifier": "Default",
                  "type": {
                    "plain": "Vec<AccountId>"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The current membership, stored as an ordered Vec."
                  ]
                },
                {
                  "name": "Prime",
                  "modifier": "Optional",
                  "type": {
                    "plain": "AccountId"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The current prime member, if one exists."
                  ]
                }
              ]
            },
            "calls": [
              {
                "name": "add_member",
                "args": [
                  {
                    "name": "who",
                    "type": "AccountId"
                  }
                ],
                "docs": [
                  " Add a member `who` to the set.",
                  "",
                  " May only be called from `T::AddOrigin`."
                ]
              },
              {
                "name": "remove_member",
                "args": [
                  {
                    "name": "who",
                    "type": "AccountId"
                  }
                ],
                "docs": [
                  " Remove a member `who` from the set.",
                  "",
                  " May only be called from `T::RemoveOrigin`."
                ]
              },
              {
                "name": "swap_member",
                "args": [
                  {
                    "name": "remove",
                    "type": "AccountId"
                  },
                  {
                    "name": "add",
                    "type": "AccountId"
                  }
                ],
                "docs": [
                  " Swap out one member `remove` for another `add`.",
                  "",
                  " May only be called from `T::SwapOrigin`.",
                  "",
                  " Prime membership is *not* passed from `remove` to `add`, if extant."
                ]
              },
              {
                "name": "reset_members",
                "args": [
                  {
                    "name": "members",
                    "type": "Vec<AccountId>"
                  }
                ],
                "docs": [
                  " Change the membership to a new set, disregarding the existing membership. Be nice and",
                  " pass `members` pre-sorted.",
                  "",
                  " May only be called from `T::ResetOrigin`."
                ]
              },
              {
                "name": "change_key",
                "args": [
                  {
                    "name": "new",
                    "type": "AccountId"
                  }
                ],
                "docs": [
                  " Swap out the sending member for some other key `new`.",
                  "",
                  " May only be called from `Signed` origin of a current member.",
                  "",
                  " Prime membership is passed from the origin account to `new`, if extant."
                ]
              },
              {
                "name": "set_prime",
                "args": [
                  {
                    "name": "who",
                    "type": "AccountId"
                  }
                ],
                "docs": [
                  " Set the prime member. Must be a current member.",
                  "",
                  " May only be called from `T::PrimeOrigin`."
                ]
              },
              {
                "name": "clear_prime",
                "args": [],
                "docs": [
                  " Remove the prime member if it exists.",
                  "",
                  " May only be called from `T::PrimeOrigin`."
                ]
              }
            ],
            "events": [
              {
                "name": "MemberAdded",
                "args": [],
                "docs": [
                  " The given member was added; see the transaction for who."
                ]
              },
              {
                "name": "MemberRemoved",
                "args": [],
                "docs": [
                  " The given member was removed; see the transaction for who."
                ]
              },
              {
                "name": "MembersSwapped",
                "args": [],
                "docs": [
                  " Two members were swapped; see the transaction for who."
                ]
              },
              {
                "name": "MembersReset",
                "args": [],
                "docs": [
                  " The membership was reset; see the transaction for who the new set is."
                ]
              },
              {
                "name": "KeyChanged",
                "args": [],
                "docs": [
                  " One of the members' keys changed."
                ]
              },
              {
                "name": "Dummy",
                "args": [
                  "PhantomData"
                ],
                "docs": [
                  " Phantom member, never used."
                ]
              }
            ],
            "constants": [],
            "errors": [
              {
                "name": "AlreadyMember",
                "docs": [
                  " Already a member."
                ]
              },
              {
                "name": "NotMember",
                "docs": [
                  " Not a member."
                ]
              }
            ],
            "index": "66"
          },
          {
            "name": "TechnicalCommittee",
            "storage": {
              "prefix": "Instance4Collective",
              "items": [
                {
                  "name": "Proposals",
                  "modifier": "Default",
                  "type": {
                    "plain": "Vec<Hash>"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The hashes of the active proposals."
                  ]
                },
                {
                  "name": "ProposalOf",
                  "modifier": "Optional",
                  "type": {
                    "map": {
                      "hasher": "Identity",
                      "key": "Hash",
                      "value": "Proposal",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Actual proposal for a given hash, if it's current."
                  ]
                },
                {
                  "name": "Voting",
                  "modifier": "Optional",
                  "type": {
                    "map": {
                      "hasher": "Identity",
                      "key": "Hash",
                      "value": "Votes",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Votes on a given proposal, if it is ongoing."
                  ]
                },
                {
                  "name": "ProposalCount",
                  "modifier": "Default",
                  "type": {
                    "plain": "u32"
                  },
                  "fallback": "0x00000000",
                  "docs": [
                    " Proposals so far."
                  ]
                },
                {
                  "name": "Members",
                  "modifier": "Default",
                  "type": {
                    "plain": "Vec<AccountId>"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The current members of the collective. This is stored sorted (just by value)."
                  ]
                },
                {
                  "name": "Prime",
                  "modifier": "Optional",
                  "type": {
                    "plain": "AccountId"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The prime member that helps determine the default vote behavior in case of absentations."
                  ]
                }
              ]
            },
            "calls": [
              {
                "name": "set_members",
                "args": [
                  {
                    "name": "new_members",
                    "type": "Vec<AccountId>"
                  },
                  {
                    "name": "prime",
                    "type": "Option<AccountId>"
                  },
                  {
                    "name": "old_count",
                    "type": "MemberCount"
                  }
                ],
                "docs": [
                  " Set the collective's membership.",
                  "",
                  " - `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                  " - `prime`: The prime member whose vote sets the default.",
                  " - `old_count`: The upper bound for the previous number of members in storage.",
                  "                Used for weight estimation.",
                  "",
                  " Requires root origin.",
                  "",
                  " NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                  "       the weight estimations rely on it to estimate dispatchable weight.",
                  "",
                  " # <weight>",
                  " ## Weight",
                  " - `O(MP + N)` where:",
                  "   - `M` old-members-count (code- and governance-bounded)",
                  "   - `N` new-members-count (code- and governance-bounded)",
                  "   - `P` proposals-count (code-bounded)",
                  " - DB:",
                  "   - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the members",
                  "   - 1 storage read (codec `O(P)`) for reading the proposals",
                  "   - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                  "   - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                  " # </weight>"
                ]
              },
              {
                "name": "execute",
                "args": [
                  {
                    "name": "proposal",
                    "type": "Proposal"
                  },
                  {
                    "name": "length_bound",
                    "type": "Compact<u32>"
                  }
                ],
                "docs": [
                  " Dispatch a proposal from a member using the `Member` origin.",
                  "",
                  " Origin must be a member of the collective.",
                  "",
                  " # <weight>",
                  " ## Weight",
                  " - `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching `proposal`",
                  " - DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                  " - 1 event",
                  " # </weight>"
                ]
              },
              {
                "name": "propose",
                "args": [
                  {
                    "name": "threshold",
                    "type": "Compact<MemberCount>"
                  },
                  {
                    "name": "proposal",
                    "type": "Proposal"
                  },
                  {
                    "name": "length_bound",
                    "type": "Compact<u32>"
                  }
                ],
                "docs": [
                  " Add a new proposal to either be voted on or executed directly.",
                  "",
                  " Requires the sender to be member.",
                  "",
                  " `threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                  " or put up for voting.",
                  "",
                  " # <weight>",
                  " ## Weight",
                  " - `O(B + M + P1)` or `O(B + M + P2)` where:",
                  "   - `B` is `proposal` size in bytes (length-fee-bounded)",
                  "   - `M` is members-count (code- and governance-bounded)",
                  "   - branching is influenced by `threshold` where:",
                  "     - `P1` is proposal execution complexity (`threshold < 2`)",
                  "     - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                  " - DB:",
                  "   - 1 storage read `is_member` (codec `O(M)`)",
                  "   - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                  "   - DB accesses influenced by `threshold`:",
                  "     - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                  "     - OR proposal insertion (`threshold <= 2`)",
                  "       - 1 storage mutation `Proposals` (codec `O(P2)`)",
                  "       - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                  "       - 1 storage write `ProposalOf` (codec `O(B)`)",
                  "       - 1 storage write `Voting` (codec `O(M)`)",
                  "   - 1 event",
                  " # </weight>"
                ]
              },
              {
                "name": "vote",
                "args": [
                  {
                    "name": "proposal",
                    "type": "Hash"
                  },
                  {
                    "name": "index",
                    "type": "Compact<ProposalIndex>"
                  },
                  {
                    "name": "approve",
                    "type": "bool"
                  }
                ],
                "docs": [
                  " Add an aye or nay vote for the sender to the given proposal.",
                  "",
                  " Requires the sender to be a member.",
                  "",
                  " Transaction fees will be waived if the member is voting on any particular proposal",
                  " for the first time and the call is successful. Subsequent vote changes will charge a fee.",
                  " # <weight>",
                  " ## Weight",
                  " - `O(M)` where `M` is members-count (code- and governance-bounded)",
                  " - DB:",
                  "   - 1 storage read `Members` (codec `O(M)`)",
                  "   - 1 storage mutation `Voting` (codec `O(M)`)",
                  " - 1 event",
                  " # </weight>"
                ]
              },
              {
                "name": "close",
                "args": [
                  {
                    "name": "proposal_hash",
                    "type": "Hash"
                  },
                  {
                    "name": "index",
                    "type": "Compact<ProposalIndex>"
                  },
                  {
                    "name": "proposal_weight_bound",
                    "type": "Compact<Weight>"
                  },
                  {
                    "name": "length_bound",
                    "type": "Compact<u32>"
                  }
                ],
                "docs": [
                  " Close a vote that is either approved, disapproved or whose voting period has ended.",
                  "",
                  " May be called by any signed account in order to finish voting and close the proposal.",
                  "",
                  " If called before the end of the voting period it will only close the vote if it is",
                  " has enough votes to be approved or disapproved.",
                  "",
                  " If called after the end of the voting period abstentions are counted as rejections",
                  " unless there is a prime member set and the prime member cast an approval.",
                  "",
                  " If the close operation completes successfully with disapproval, the transaction fee will",
                  " be waived. Otherwise execution of the approved operation will be charged to the caller.",
                  "",
                  " + `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed proposal.",
                  " + `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                  "                   `storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                  "",
                  " # <weight>",
                  " ## Weight",
                  " - `O(B + M + P1 + P2)` where:",
                  "   - `B` is `proposal` size in bytes (length-fee-bounded)",
                  "   - `M` is members-count (code- and governance-bounded)",
                  "   - `P1` is the complexity of `proposal` preimage.",
                  "   - `P2` is proposal-count (code-bounded)",
                  " - DB:",
                  "  - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                  "  - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec `O(P2)`)",
                  "  - any mutations done while executing `proposal` (`P1`)",
                  " - up to 3 events",
                  " # </weight>"
                ]
              },
              {
                "name": "disapprove_proposal",
                "args": [
                  {
                    "name": "proposal_hash",
                    "type": "Hash"
                  }
                ],
                "docs": [
                  " Disapprove a proposal, close, and remove it from the system, regardless of its current state.",
                  "",
                  " Must be called by the Root origin.",
                  "",
                  " Parameters:",
                  " * `proposal_hash`: The hash of the proposal that should be disapproved.",
                  "",
                  " # <weight>",
                  " Complexity: O(P) where P is the number of max proposals",
                  " DB Weight:",
                  " * Reads: Proposals",
                  " * Writes: Voting, Proposals, ProposalOf",
                  " # </weight>"
                ]
              }
            ],
            "events": [
              {
                "name": "Proposed",
                "args": [
                  "AccountId",
                  "ProposalIndex",
                  "Hash",
                  "MemberCount"
                ],
                "docs": [
                  " A motion (given hash) has been proposed (by given account) with a threshold (given",
                  " `MemberCount`).",
                  " \\[account, proposal_index, proposal_hash, threshold\\]"
                ]
              },
              {
                "name": "Voted",
                "args": [
                  "AccountId",
                  "Hash",
                  "bool",
                  "MemberCount",
                  "MemberCount"
                ],
                "docs": [
                  " A motion (given hash) has been voted on by given account, leaving",
                  " a tally (yes votes and no votes given respectively as `MemberCount`).",
                  " \\[account, proposal_hash, voted, yes, no\\]"
                ]
              },
              {
                "name": "Approved",
                "args": [
                  "Hash"
                ],
                "docs": [
                  " A motion was approved by the required threshold.",
                  " \\[proposal_hash\\]"
                ]
              },
              {
                "name": "Disapproved",
                "args": [
                  "Hash"
                ],
                "docs": [
                  " A motion was not approved by the required threshold.",
                  " \\[proposal_hash\\]"
                ]
              },
              {
                "name": "Executed",
                "args": [
                  "Hash",
                  "DispatchResult"
                ],
                "docs": [
                  " A motion was executed; result will be `Ok` if it returned without error.",
                  " \\[proposal_hash, result\\]"
                ]
              },
              {
                "name": "MemberExecuted",
                "args": [
                  "Hash",
                  "DispatchResult"
                ],
                "docs": [
                  " A single member did some action; result will be `Ok` if it returned without error.",
                  " \\[proposal_hash, result\\]"
                ]
              },
              {
                "name": "Closed",
                "args": [
                  "Hash",
                  "MemberCount",
                  "MemberCount"
                ],
                "docs": [
                  " A proposal was closed because its threshold was reached or after its duration was up.",
                  " \\[proposal_hash, yes, no\\]"
                ]
              }
            ],
            "constants": [],
            "errors": [
              {
                "name": "NotMember",
                "docs": [
                  " Account is not a member"
                ]
              },
              {
                "name": "DuplicateProposal",
                "docs": [
                  " Duplicate proposals not allowed"
                ]
              },
              {
                "name": "ProposalMissing",
                "docs": [
                  " Proposal must exist"
                ]
              },
              {
                "name": "WrongIndex",
                "docs": [
                  " Mismatched index"
                ]
              },
              {
                "name": "DuplicateVote",
                "docs": [
                  " Duplicate vote ignored"
                ]
              },
              {
                "name": "AlreadyInitialized",
                "docs": [
                  " Members are already initialized!"
                ]
              },
              {
                "name": "TooEarly",
                "docs": [
                  " The close call was made too early, before the end of the voting."
                ]
              },
              {
                "name": "TooManyProposals",
                "docs": [
                  " There can only be a maximum of `MaxProposals` active proposals."
                ]
              },
              {
                "name": "WrongProposalWeight",
                "docs": [
                  " The given weight bound for the proposal was too low."
                ]
              },
              {
                "name": "WrongProposalLength",
                "docs": [
                  " The given length bound for the proposal was too low."
                ]
              }
            ],
            "index": "67"
          },
          {
            "name": "TechnicalCommitteeMembership",
            "storage": {
              "prefix": "Instance4Membership",
              "items": [
                {
                  "name": "Members",
                  "modifier": "Default",
                  "type": {
                    "plain": "Vec<AccountId>"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The current membership, stored as an ordered Vec."
                  ]
                },
                {
                  "name": "Prime",
                  "modifier": "Optional",
                  "type": {
                    "plain": "AccountId"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The current prime member, if one exists."
                  ]
                }
              ]
            },
            "calls": [
              {
                "name": "add_member",
                "args": [
                  {
                    "name": "who",
                    "type": "AccountId"
                  }
                ],
                "docs": [
                  " Add a member `who` to the set.",
                  "",
                  " May only be called from `T::AddOrigin`."
                ]
              },
              {
                "name": "remove_member",
                "args": [
                  {
                    "name": "who",
                    "type": "AccountId"
                  }
                ],
                "docs": [
                  " Remove a member `who` from the set.",
                  "",
                  " May only be called from `T::RemoveOrigin`."
                ]
              },
              {
                "name": "swap_member",
                "args": [
                  {
                    "name": "remove",
                    "type": "AccountId"
                  },
                  {
                    "name": "add",
                    "type": "AccountId"
                  }
                ],
                "docs": [
                  " Swap out one member `remove` for another `add`.",
                  "",
                  " May only be called from `T::SwapOrigin`.",
                  "",
                  " Prime membership is *not* passed from `remove` to `add`, if extant."
                ]
              },
              {
                "name": "reset_members",
                "args": [
                  {
                    "name": "members",
                    "type": "Vec<AccountId>"
                  }
                ],
                "docs": [
                  " Change the membership to a new set, disregarding the existing membership. Be nice and",
                  " pass `members` pre-sorted.",
                  "",
                  " May only be called from `T::ResetOrigin`."
                ]
              },
              {
                "name": "change_key",
                "args": [
                  {
                    "name": "new",
                    "type": "AccountId"
                  }
                ],
                "docs": [
                  " Swap out the sending member for some other key `new`.",
                  "",
                  " May only be called from `Signed` origin of a current member.",
                  "",
                  " Prime membership is passed from the origin account to `new`, if extant."
                ]
              },
              {
                "name": "set_prime",
                "args": [
                  {
                    "name": "who",
                    "type": "AccountId"
                  }
                ],
                "docs": [
                  " Set the prime member. Must be a current member.",
                  "",
                  " May only be called from `T::PrimeOrigin`."
                ]
              },
              {
                "name": "clear_prime",
                "args": [],
                "docs": [
                  " Remove the prime member if it exists.",
                  "",
                  " May only be called from `T::PrimeOrigin`."
                ]
              }
            ],
            "events": [
              {
                "name": "MemberAdded",
                "args": [],
                "docs": [
                  " The given member was added; see the transaction for who."
                ]
              },
              {
                "name": "MemberRemoved",
                "args": [],
                "docs": [
                  " The given member was removed; see the transaction for who."
                ]
              },
              {
                "name": "MembersSwapped",
                "args": [],
                "docs": [
                  " Two members were swapped; see the transaction for who."
                ]
              },
              {
                "name": "MembersReset",
                "args": [],
                "docs": [
                  " The membership was reset; see the transaction for who the new set is."
                ]
              },
              {
                "name": "KeyChanged",
                "args": [],
                "docs": [
                  " One of the members' keys changed."
                ]
              },
              {
                "name": "Dummy",
                "args": [
                  "PhantomData"
                ],
                "docs": [
                  " Phantom member, never used."
                ]
              }
            ],
            "constants": [],
            "errors": [
              {
                "name": "AlreadyMember",
                "docs": [
                  " Already a member."
                ]
              },
              {
                "name": "NotMember",
                "docs": [
                  " Not a member."
                ]
              }
            ],
            "index": "68"
          },
          {
            "name": "Democracy",
            "storage": {
              "prefix": "Democracy",
              "items": [
                {
                  "name": "PublicPropCount",
                  "modifier": "Default",
                  "type": {
                    "plain": "PropIndex"
                  },
                  "fallback": "0x00000000",
                  "docs": [
                    " The number of (public) proposals that have been made so far."
                  ]
                },
                {
                  "name": "PublicProps",
                  "modifier": "Default",
                  "type": {
                    "plain": "Vec<(PropIndex,Hash,AccountId)>"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The public proposals. Unsorted. The second item is the proposal's hash."
                  ]
                },
                {
                  "name": "DepositOf",
                  "modifier": "Optional",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "PropIndex",
                      "value": "(Vec<AccountId>,BalanceOf)",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Those who have locked a deposit.",
                    "",
                    " TWOX-NOTE: Safe, as increasing integer keys are safe."
                  ]
                },
                {
                  "name": "Preimages",
                  "modifier": "Optional",
                  "type": {
                    "map": {
                      "hasher": "Identity",
                      "key": "Hash",
                      "value": "PreimageStatus",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Map of hashes to the proposal preimage, along with who registered it and their deposit.",
                    " The block number is the block at which it was deposited."
                  ]
                },
                {
                  "name": "ReferendumCount",
                  "modifier": "Default",
                  "type": {
                    "plain": "ReferendumIndex"
                  },
                  "fallback": "0x00000000",
                  "docs": [
                    " The next free referendum index, aka the number of referenda started so far."
                  ]
                },
                {
                  "name": "LowestUnbaked",
                  "modifier": "Default",
                  "type": {
                    "plain": "ReferendumIndex"
                  },
                  "fallback": "0x00000000",
                  "docs": [
                    " The lowest referendum index representing an unbaked referendum. Equal to",
                    " `ReferendumCount` if there isn't a unbaked referendum."
                  ]
                },
                {
                  "name": "ReferendumInfoOf",
                  "modifier": "Optional",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "ReferendumIndex",
                      "value": "ReferendumInfo",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Information concerning any given referendum.",
                    "",
                    " TWOX-NOTE: SAFE as indexes are not under an attackerâs control."
                  ]
                },
                {
                  "name": "VotingOf",
                  "modifier": "Default",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "AccountId",
                      "value": "Voting",
                      "linked": false
                    }
                  },
                  "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                  "docs": [
                    " All votes for a particular voter. We store the balance for the number of votes that we",
                    " have recorded. The second item is the total amount of delegations, that will be added.",
                    "",
                    " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."
                  ]
                },
                {
                  "name": "Locks",
                  "modifier": "Optional",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "AccountId",
                      "value": "BlockNumber",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Accounts for which there are locks in action which may be removed at some point in the",
                    " future. The value is the block number at which the lock expires and may be removed.",
                    "",
                    " TWOX-NOTE: OK â `AccountId` is a secure hash."
                  ]
                },
                {
                  "name": "LastTabledWasExternal",
                  "modifier": "Default",
                  "type": {
                    "plain": "bool"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " True if the last referendum tabled was submitted externally. False if it was a public",
                    " proposal."
                  ]
                },
                {
                  "name": "NextExternal",
                  "modifier": "Optional",
                  "type": {
                    "plain": "(Hash,VoteThreshold)"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The referendum to be tabled whenever it would be valid to table an external proposal.",
                    " This happens when a referendum needs to be tabled and one of two conditions are met:",
                    " - `LastTabledWasExternal` is `false`; or",
                    " - `PublicProps` is empty."
                  ]
                },
                {
                  "name": "Blacklist",
                  "modifier": "Optional",
                  "type": {
                    "map": {
                      "hasher": "Identity",
                      "key": "Hash",
                      "value": "(BlockNumber,Vec<AccountId>)",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " A record of who vetoed what. Maps proposal hash to a possible existent block number",
                    " (until when it may not be resubmitted) and who vetoed it."
                  ]
                },
                {
                  "name": "Cancellations",
                  "modifier": "Default",
                  "type": {
                    "map": {
                      "hasher": "Identity",
                      "key": "Hash",
                      "value": "bool",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Record of all proposals that have been subject to emergency cancellation."
                  ]
                },
                {
                  "name": "StorageVersion",
                  "modifier": "Optional",
                  "type": {
                    "plain": "Releases"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Storage version of the pallet.",
                    "",
                    " New networks start with last version."
                  ]
                }
              ]
            },
            "calls": [
              {
                "name": "propose",
                "args": [
                  {
                    "name": "proposal_hash",
                    "type": "Hash"
                  },
                  {
                    "name": "value",
                    "type": "Compact<BalanceOf>"
                  }
                ],
                "docs": [
                  " Propose a sensitive action to be taken.",
                  "",
                  " The dispatch origin of this call must be _Signed_ and the sender must",
                  " have funds to cover the deposit.",
                  "",
                  " - `proposal_hash`: The hash of the proposal preimage.",
                  " - `value`: The amount of deposit (must be at least `MinimumDeposit`).",
                  "",
                  " Emits `Proposed`.",
                  "",
                  " Weight: `O(p)`"
                ]
              },
              {
                "name": "second",
                "args": [
                  {
                    "name": "proposal",
                    "type": "Compact<PropIndex>"
                  },
                  {
                    "name": "seconds_upper_bound",
                    "type": "Compact<u32>"
                  }
                ],
                "docs": [
                  " Signals agreement with a particular proposal.",
                  "",
                  " The dispatch origin of this call must be _Signed_ and the sender",
                  " must have funds to cover the deposit, equal to the original deposit.",
                  "",
                  " - `proposal`: The index of the proposal to second.",
                  " - `seconds_upper_bound`: an upper bound on the current number of seconds on this",
                  "   proposal. Extrinsic is weighted according to this value with no refund.",
                  "",
                  " Weight: `O(S)` where S is the number of seconds a proposal already has."
                ]
              },
              {
                "name": "vote",
                "args": [
                  {
                    "name": "ref_index",
                    "type": "Compact<ReferendumIndex>"
                  },
                  {
                    "name": "vote",
                    "type": "AccountVote"
                  }
                ],
                "docs": [
                  " Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;",
                  " otherwise it is a vote to keep the status quo.",
                  "",
                  " The dispatch origin of this call must be _Signed_.",
                  "",
                  " - `ref_index`: The index of the referendum to vote for.",
                  " - `vote`: The vote configuration.",
                  "",
                  " Weight: `O(R)` where R is the number of referendums the voter has voted on."
                ]
              },
              {
                "name": "emergency_cancel",
                "args": [
                  {
                    "name": "ref_index",
                    "type": "ReferendumIndex"
                  }
                ],
                "docs": [
                  " Schedule an emergency cancellation of a referendum. Cannot happen twice to the same",
                  " referendum.",
                  "",
                  " The dispatch origin of this call must be `CancellationOrigin`.",
                  "",
                  " -`ref_index`: The index of the referendum to cancel.",
                  "",
                  " Weight: `O(1)`."
                ]
              },
              {
                "name": "external_propose",
                "args": [
                  {
                    "name": "proposal_hash",
                    "type": "Hash"
                  }
                ],
                "docs": [
                  " Schedule a referendum to be tabled once it is legal to schedule an external",
                  " referendum.",
                  "",
                  " The dispatch origin of this call must be `ExternalOrigin`.",
                  "",
                  " - `proposal_hash`: The preimage hash of the proposal.",
                  "",
                  " Weight: `O(V)` with V number of vetoers in the blacklist of proposal.",
                  "   Decoding vec of length V. Charged as maximum"
                ]
              },
              {
                "name": "external_propose_majority",
                "args": [
                  {
                    "name": "proposal_hash",
                    "type": "Hash"
                  }
                ],
                "docs": [
                  " Schedule a majority-carries referendum to be tabled next once it is legal to schedule",
                  " an external referendum.",
                  "",
                  " The dispatch of this call must be `ExternalMajorityOrigin`.",
                  "",
                  " - `proposal_hash`: The preimage hash of the proposal.",
                  "",
                  " Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
                  " pre-scheduled `external_propose` call.",
                  "",
                  " Weight: `O(1)`"
                ]
              },
              {
                "name": "external_propose_default",
                "args": [
                  {
                    "name": "proposal_hash",
                    "type": "Hash"
                  }
                ],
                "docs": [
                  " Schedule a negative-turnout-bias referendum to be tabled next once it is legal to",
                  " schedule an external referendum.",
                  "",
                  " The dispatch of this call must be `ExternalDefaultOrigin`.",
                  "",
                  " - `proposal_hash`: The preimage hash of the proposal.",
                  "",
                  " Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
                  " pre-scheduled `external_propose` call.",
                  "",
                  " Weight: `O(1)`"
                ]
              },
              {
                "name": "fast_track",
                "args": [
                  {
                    "name": "proposal_hash",
                    "type": "Hash"
                  },
                  {
                    "name": "voting_period",
                    "type": "BlockNumber"
                  },
                  {
                    "name": "delay",
                    "type": "BlockNumber"
                  }
                ],
                "docs": [
                  " Schedule the currently externally-proposed majority-carries referendum to be tabled",
                  " immediately. If there is no externally-proposed referendum currently, or if there is one",
                  " but it is not a majority-carries referendum then it fails.",
                  "",
                  " The dispatch of this call must be `FastTrackOrigin`.",
                  "",
                  " - `proposal_hash`: The hash of the current external proposal.",
                  " - `voting_period`: The period that is allowed for voting on this proposal. Increased to",
                  "   `FastTrackVotingPeriod` if too low.",
                  " - `delay`: The number of block after voting has ended in approval and this should be",
                  "   enacted. This doesn't have a minimum amount.",
                  "",
                  " Emits `Started`.",
                  "",
                  " Weight: `O(1)`"
                ]
              },
              {
                "name": "veto_external",
                "args": [
                  {
                    "name": "proposal_hash",
                    "type": "Hash"
                  }
                ],
                "docs": [
                  " Veto and blacklist the external proposal hash.",
                  "",
                  " The dispatch origin of this call must be `VetoOrigin`.",
                  "",
                  " - `proposal_hash`: The preimage hash of the proposal to veto and blacklist.",
                  "",
                  " Emits `Vetoed`.",
                  "",
                  " Weight: `O(V + log(V))` where V is number of `existing vetoers`"
                ]
              },
              {
                "name": "cancel_referendum",
                "args": [
                  {
                    "name": "ref_index",
                    "type": "Compact<ReferendumIndex>"
                  }
                ],
                "docs": [
                  " Remove a referendum.",
                  "",
                  " The dispatch origin of this call must be _Root_.",
                  "",
                  " - `ref_index`: The index of the referendum to cancel.",
                  "",
                  " # Weight: `O(1)`."
                ]
              },
              {
                "name": "cancel_queued",
                "args": [
                  {
                    "name": "which",
                    "type": "ReferendumIndex"
                  }
                ],
                "docs": [
                  " Cancel a proposal queued for enactment.",
                  "",
                  " The dispatch origin of this call must be _Root_.",
                  "",
                  " - `which`: The index of the referendum to cancel.",
                  "",
                  " Weight: `O(D)` where `D` is the items in the dispatch queue. Weighted as `D = 10`."
                ]
              },
              {
                "name": "delegate",
                "args": [
                  {
                    "name": "to",
                    "type": "AccountId"
                  },
                  {
                    "name": "conviction",
                    "type": "Conviction"
                  },
                  {
                    "name": "balance",
                    "type": "BalanceOf"
                  }
                ],
                "docs": [
                  " Delegate the voting power (with some given conviction) of the sending account.",
                  "",
                  " The balance delegated is locked for as long as it's delegated, and thereafter for the",
                  " time appropriate for the conviction's lock period.",
                  "",
                  " The dispatch origin of this call must be _Signed_, and the signing account must either:",
                  "   - be delegating already; or",
                  "   - have no voting activity (if there is, then it will need to be removed/consolidated",
                  "     through `reap_vote` or `unvote`).",
                  "",
                  " - `to`: The account whose voting the `target` account's voting power will follow.",
                  " - `conviction`: The conviction that will be attached to the delegated votes. When the",
                  "   account is undelegated, the funds will be locked for the corresponding period.",
                  " - `balance`: The amount of the account's balance to be used in delegating. This must",
                  "   not be more than the account's current balance.",
                  "",
                  " Emits `Delegated`.",
                  "",
                  " Weight: `O(R)` where R is the number of referendums the voter delegating to has",
                  "   voted on. Weight is charged as if maximum votes."
                ]
              },
              {
                "name": "undelegate",
                "args": [],
                "docs": [
                  " Undelegate the voting power of the sending account.",
                  "",
                  " Tokens may be unlocked following once an amount of time consistent with the lock period",
                  " of the conviction with which the delegation was issued.",
                  "",
                  " The dispatch origin of this call must be _Signed_ and the signing account must be",
                  " currently delegating.",
                  "",
                  " Emits `Undelegated`.",
                  "",
                  " Weight: `O(R)` where R is the number of referendums the voter delegating to has",
                  "   voted on. Weight is charged as if maximum votes."
                ]
              },
              {
                "name": "clear_public_proposals",
                "args": [],
                "docs": [
                  " Clears all public proposals.",
                  "",
                  " The dispatch origin of this call must be _Root_.",
                  "",
                  " Weight: `O(1)`."
                ]
              },
              {
                "name": "note_preimage",
                "args": [
                  {
                    "name": "encoded_proposal",
                    "type": "Bytes"
                  }
                ],
                "docs": [
                  " Register the preimage for an upcoming proposal. This doesn't require the proposal to be",
                  " in the dispatch queue but does require a deposit, returned once enacted.",
                  "",
                  " The dispatch origin of this call must be _Signed_.",
                  "",
                  " - `encoded_proposal`: The preimage of a proposal.",
                  "",
                  " Emits `PreimageNoted`.",
                  "",
                  " Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."
                ]
              },
              {
                "name": "note_preimage_operational",
                "args": [
                  {
                    "name": "encoded_proposal",
                    "type": "Bytes"
                  }
                ],
                "docs": [
                  " Same as `note_preimage` but origin is `OperationalPreimageOrigin`."
                ]
              },
              {
                "name": "note_imminent_preimage",
                "args": [
                  {
                    "name": "encoded_proposal",
                    "type": "Bytes"
                  }
                ],
                "docs": [
                  " Register the preimage for an upcoming proposal. This requires the proposal to be",
                  " in the dispatch queue. No deposit is needed. When this call is successful, i.e.",
                  " the preimage has not been uploaded before and matches some imminent proposal,",
                  " no fee is paid.",
                  "",
                  " The dispatch origin of this call must be _Signed_.",
                  "",
                  " - `encoded_proposal`: The preimage of a proposal.",
                  "",
                  " Emits `PreimageNoted`.",
                  "",
                  " Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."
                ]
              },
              {
                "name": "note_imminent_preimage_operational",
                "args": [
                  {
                    "name": "encoded_proposal",
                    "type": "Bytes"
                  }
                ],
                "docs": [
                  " Same as `note_imminent_preimage` but origin is `OperationalPreimageOrigin`."
                ]
              },
              {
                "name": "reap_preimage",
                "args": [
                  {
                    "name": "proposal_hash",
                    "type": "Hash"
                  },
                  {
                    "name": "proposal_len_upper_bound",
                    "type": "Compact<u32>"
                  }
                ],
                "docs": [
                  " Remove an expired proposal preimage and collect the deposit.",
                  "",
                  " The dispatch origin of this call must be _Signed_.",
                  "",
                  " - `proposal_hash`: The preimage hash of a proposal.",
                  " - `proposal_length_upper_bound`: an upper bound on length of the proposal.",
                  "   Extrinsic is weighted according to this value with no refund.",
                  "",
                  " This will only work after `VotingPeriod` blocks from the time that the preimage was",
                  " noted, if it's the same account doing it. If it's a different account, then it'll only",
                  " work an additional `EnactmentPeriod` later.",
                  "",
                  " Emits `PreimageReaped`.",
                  "",
                  " Weight: `O(D)` where D is length of proposal."
                ]
              },
              {
                "name": "unlock",
                "args": [
                  {
                    "name": "target",
                    "type": "AccountId"
                  }
                ],
                "docs": [
                  " Unlock tokens that have an expired lock.",
                  "",
                  " The dispatch origin of this call must be _Signed_.",
                  "",
                  " - `target`: The account to remove the lock on.",
                  "",
                  " Weight: `O(R)` with R number of vote of target."
                ]
              },
              {
                "name": "remove_vote",
                "args": [
                  {
                    "name": "index",
                    "type": "ReferendumIndex"
                  }
                ],
                "docs": [
                  " Remove a vote for a referendum.",
                  "",
                  " If:",
                  " - the referendum was cancelled, or",
                  " - the referendum is ongoing, or",
                  " - the referendum has ended such that",
                  "   - the vote of the account was in opposition to the result; or",
                  "   - there was no conviction to the account's vote; or",
                  "   - the account made a split vote",
                  " ...then the vote is removed cleanly and a following call to `unlock` may result in more",
                  " funds being available.",
                  "",
                  " If, however, the referendum has ended and:",
                  " - it finished corresponding to the vote of the account, and",
                  " - the account made a standard vote with conviction, and",
                  " - the lock period of the conviction is not over",
                  " ...then the lock will be aggregated into the overall account's lock, which may involve",
                  " *overlocking* (where the two locks are combined into a single lock that is the maximum",
                  " of both the amount locked and the time is it locked for).",
                  "",
                  " The dispatch origin of this call must be _Signed_, and the signer must have a vote",
                  " registered for referendum `index`.",
                  "",
                  " - `index`: The index of referendum of the vote to be removed.",
                  "",
                  " Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
                  "   Weight is calculated for the maximum number of vote."
                ]
              },
              {
                "name": "remove_other_vote",
                "args": [
                  {
                    "name": "target",
                    "type": "AccountId"
                  },
                  {
                    "name": "index",
                    "type": "ReferendumIndex"
                  }
                ],
                "docs": [
                  " Remove a vote for a referendum.",
                  "",
                  " If the `target` is equal to the signer, then this function is exactly equivalent to",
                  " `remove_vote`. If not equal to the signer, then the vote must have expired,",
                  " either because the referendum was cancelled, because the voter lost the referendum or",
                  " because the conviction period is over.",
                  "",
                  " The dispatch origin of this call must be _Signed_.",
                  "",
                  " - `target`: The account of the vote to be removed; this account must have voted for",
                  "   referendum `index`.",
                  " - `index`: The index of referendum of the vote to be removed.",
                  "",
                  " Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
                  "   Weight is calculated for the maximum number of vote."
                ]
              },
              {
                "name": "enact_proposal",
                "args": [
                  {
                    "name": "proposal_hash",
                    "type": "Hash"
                  },
                  {
                    "name": "index",
                    "type": "ReferendumIndex"
                  }
                ],
                "docs": [
                  " Enact a proposal from a referendum. For now we just make the weight be the maximum."
                ]
              },
              {
                "name": "blacklist",
                "args": [
                  {
                    "name": "proposal_hash",
                    "type": "Hash"
                  },
                  {
                    "name": "maybe_ref_index",
                    "type": "Option<ReferendumIndex>"
                  }
                ],
                "docs": [
                  " Permanently place a proposal into the blacklist. This prevents it from ever being",
                  " proposed again.",
                  "",
                  " If called on a queued public or external proposal, then this will result in it being",
                  " removed. If the `ref_index` supplied is an active referendum with the proposal hash,",
                  " then it will be cancelled.",
                  "",
                  " The dispatch origin of this call must be `BlacklistOrigin`.",
                  "",
                  " - `proposal_hash`: The proposal hash to blacklist permanently.",
                  " - `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be",
                  " cancelled.",
                  "",
                  " Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a",
                  "   reasonable value)."
                ]
              },
              {
                "name": "cancel_proposal",
                "args": [
                  {
                    "name": "prop_index",
                    "type": "Compact<PropIndex>"
                  }
                ],
                "docs": [
                  " Remove a proposal.",
                  "",
                  " The dispatch origin of this call must be `CancelProposalOrigin`.",
                  "",
                  " - `prop_index`: The index of the proposal to cancel.",
                  "",
                  " Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`"
                ]
              }
            ],
            "events": [
              {
                "name": "Proposed",
                "args": [
                  "PropIndex",
                  "Balance"
                ],
                "docs": [
                  " A motion has been proposed by a public account. \\[proposal_index, deposit\\]"
                ]
              },
              {
                "name": "Tabled",
                "args": [
                  "PropIndex",
                  "Balance",
                  "Vec<AccountId>"
                ],
                "docs": [
                  " A public proposal has been tabled for referendum vote. \\[proposal_index, deposit, depositors\\]"
                ]
              },
              {
                "name": "ExternalTabled",
                "args": [],
                "docs": [
                  " An external proposal has been tabled."
                ]
              },
              {
                "name": "Started",
                "args": [
                  "ReferendumIndex",
                  "VoteThreshold"
                ],
                "docs": [
                  " A referendum has begun. \\[ref_index, threshold\\]"
                ]
              },
              {
                "name": "Passed",
                "args": [
                  "ReferendumIndex"
                ],
                "docs": [
                  " A proposal has been approved by referendum. \\[ref_index\\]"
                ]
              },
              {
                "name": "NotPassed",
                "args": [
                  "ReferendumIndex"
                ],
                "docs": [
                  " A proposal has been rejected by referendum. \\[ref_index\\]"
                ]
              },
              {
                "name": "Cancelled",
                "args": [
                  "ReferendumIndex"
                ],
                "docs": [
                  " A referendum has been cancelled. \\[ref_index\\]"
                ]
              },
              {
                "name": "Executed",
                "args": [
                  "ReferendumIndex",
                  "bool"
                ],
                "docs": [
                  " A proposal has been enacted. \\[ref_index, is_ok\\]"
                ]
              },
              {
                "name": "Delegated",
                "args": [
                  "AccountId",
                  "AccountId"
                ],
                "docs": [
                  " An account has delegated their vote to another account. \\[who, target\\]"
                ]
              },
              {
                "name": "Undelegated",
                "args": [
                  "AccountId"
                ],
                "docs": [
                  " An \\[account\\] has cancelled a previous delegation operation."
                ]
              },
              {
                "name": "Vetoed",
                "args": [
                  "AccountId",
                  "Hash",
                  "BlockNumber"
                ],
                "docs": [
                  " An external proposal has been vetoed. \\[who, proposal_hash, until\\]"
                ]
              },
              {
                "name": "PreimageNoted",
                "args": [
                  "Hash",
                  "AccountId",
                  "Balance"
                ],
                "docs": [
                  " A proposal's preimage was noted, and the deposit taken. \\[proposal_hash, who, deposit\\]"
                ]
              },
              {
                "name": "PreimageUsed",
                "args": [
                  "Hash",
                  "AccountId",
                  "Balance"
                ],
                "docs": [
                  " A proposal preimage was removed and used (the deposit was returned).",
                  " \\[proposal_hash, provider, deposit\\]"
                ]
              },
              {
                "name": "PreimageInvalid",
                "args": [
                  "Hash",
                  "ReferendumIndex"
                ],
                "docs": [
                  " A proposal could not be executed because its preimage was invalid.",
                  " \\[proposal_hash, ref_index\\]"
                ]
              },
              {
                "name": "PreimageMissing",
                "args": [
                  "Hash",
                  "ReferendumIndex"
                ],
                "docs": [
                  " A proposal could not be executed because its preimage was missing.",
                  " \\[proposal_hash, ref_index\\]"
                ]
              },
              {
                "name": "PreimageReaped",
                "args": [
                  "Hash",
                  "AccountId",
                  "Balance",
                  "AccountId"
                ],
                "docs": [
                  " A registered preimage was removed and the deposit collected by the reaper.",
                  " \\[proposal_hash, provider, deposit, reaper\\]"
                ]
              },
              {
                "name": "Unlocked",
                "args": [
                  "AccountId"
                ],
                "docs": [
                  " An \\[account\\] has been unlocked successfully."
                ]
              },
              {
                "name": "Blacklisted",
                "args": [
                  "Hash"
                ],
                "docs": [
                  " A proposal \\[hash\\] has been blacklisted permanently."
                ]
              }
            ],
            "constants": [
              {
                "name": "EnactmentPeriod",
                "type": "BlockNumber",
                "value": "0x00e10000",
                "docs": [
                  " The minimum period of locking and the period between a proposal being approved and enacted.",
                  "",
                  " It should generally be a little more than the unstake period to ensure that",
                  " voting stakers have an opportunity to remove themselves from the system in the case where",
                  " they are on the losing side of a vote."
                ]
              },
              {
                "name": "LaunchPeriod",
                "type": "BlockNumber",
                "value": "0xe0c40000",
                "docs": [
                  " How often (in blocks) new public referenda are launched."
                ]
              },
              {
                "name": "VotingPeriod",
                "type": "BlockNumber",
                "value": "0xe0c40000",
                "docs": [
                  " How often (in blocks) to check for new votes."
                ]
              },
              {
                "name": "MinimumDeposit",
                "type": "BalanceOf",
                "value": "0x0080c6a47e8d03000000000000000000",
                "docs": [
                  " The minimum amount to be used as a deposit for a public referendum proposal."
                ]
              },
              {
                "name": "FastTrackVotingPeriod",
                "type": "BlockNumber",
                "value": "0x84030000",
                "docs": [
                  " Minimum voting period allowed for a fast-track referendum."
                ]
              },
              {
                "name": "CooloffPeriod",
                "type": "BlockNumber",
                "value": "0xe0c40000",
                "docs": [
                  " Period in blocks where an external proposal may not be re-submitted after being vetoed."
                ]
              },
              {
                "name": "PreimageByteDeposit",
                "type": "BalanceOf",
                "value": "0x00e1f505000000000000000000000000",
                "docs": [
                  " The amount of balance that must be deposited per byte of preimage stored."
                ]
              },
              {
                "name": "MaxVotes",
                "type": "u32",
                "value": "0x64000000",
                "docs": [
                  " The maximum number of votes for an account.",
                  "",
                  " Also used to compute weight, an overly big value can",
                  " lead to extrinsic with very big weight: see `delegate` for instance."
                ]
              }
            ],
            "errors": [
              {
                "name": "ValueLow",
                "docs": [
                  " Value too low"
                ]
              },
              {
                "name": "ProposalMissing",
                "docs": [
                  " Proposal does not exist"
                ]
              },
              {
                "name": "BadIndex",
                "docs": [
                  " Unknown index"
                ]
              },
              {
                "name": "AlreadyCanceled",
                "docs": [
                  " Cannot cancel the same proposal twice"
                ]
              },
              {
                "name": "DuplicateProposal",
                "docs": [
                  " Proposal already made"
                ]
              },
              {
                "name": "ProposalBlacklisted",
                "docs": [
                  " Proposal still blacklisted"
                ]
              },
              {
                "name": "NotSimpleMajority",
                "docs": [
                  " Next external proposal not simple majority"
                ]
              },
              {
                "name": "InvalidHash",
                "docs": [
                  " Invalid hash"
                ]
              },
              {
                "name": "NoProposal",
                "docs": [
                  " No external proposal"
                ]
              },
              {
                "name": "AlreadyVetoed",
                "docs": [
                  " Identity may not veto a proposal twice"
                ]
              },
              {
                "name": "NotDelegated",
                "docs": [
                  " Not delegated"
                ]
              },
              {
                "name": "DuplicatePreimage",
                "docs": [
                  " Preimage already noted"
                ]
              },
              {
                "name": "NotImminent",
                "docs": [
                  " Not imminent"
                ]
              },
              {
                "name": "TooEarly",
                "docs": [
                  " Too early"
                ]
              },
              {
                "name": "Imminent",
                "docs": [
                  " Imminent"
                ]
              },
              {
                "name": "PreimageMissing",
                "docs": [
                  " Preimage not found"
                ]
              },
              {
                "name": "ReferendumInvalid",
                "docs": [
                  " Vote given for invalid referendum"
                ]
              },
              {
                "name": "PreimageInvalid",
                "docs": [
                  " Invalid preimage"
                ]
              },
              {
                "name": "NoneWaiting",
                "docs": [
                  " No proposals waiting"
                ]
              },
              {
                "name": "NotLocked",
                "docs": [
                  " The target account does not have a lock."
                ]
              },
              {
                "name": "NotExpired",
                "docs": [
                  " The lock on the account to be unlocked has not yet expired."
                ]
              },
              {
                "name": "NotVoter",
                "docs": [
                  " The given account did not vote on the referendum."
                ]
              },
              {
                "name": "NoPermission",
                "docs": [
                  " The actor has no permission to conduct the action."
                ]
              },
              {
                "name": "AlreadyDelegating",
                "docs": [
                  " The account is already delegating."
                ]
              },
              {
                "name": "InsufficientFunds",
                "docs": [
                  " Too high a balance was provided that the account cannot afford."
                ]
              },
              {
                "name": "NotDelegating",
                "docs": [
                  " The account is not currently delegating."
                ]
              },
              {
                "name": "VotesExist",
                "docs": [
                  " The account currently has votes attached to it and the operation cannot succeed until",
                  " these are removed, either through `unvote` or `reap_vote`."
                ]
              },
              {
                "name": "InstantNotAllowed",
                "docs": [
                  " The instant referendum origin is currently disallowed."
                ]
              },
              {
                "name": "Nonsense",
                "docs": [
                  " Delegation to oneself makes no sense."
                ]
              },
              {
                "name": "WrongUpperBound",
                "docs": [
                  " Invalid upper bound."
                ]
              },
              {
                "name": "MaxVotesReached",
                "docs": [
                  " Maximum number of votes reached."
                ]
              },
              {
                "name": "InvalidWitness",
                "docs": [
                  " The provided witness data is wrong."
                ]
              },
              {
                "name": "TooManyProposals",
                "docs": [
                  " Maximum number of proposals reached."
                ]
              }
            ],
            "index": "69"
          },
          {
            "name": "AcalaOracle",
            "storage": {
              "prefix": "AcalaOracle",
              "items": [
                {
                  "name": "RawValues",
                  "modifier": "Optional",
                  "type": {
                    "doubleMap": {
                      "hasher": "Twox64Concat",
                      "key1": "AccountId",
                      "key2": "OracleKey",
                      "value": "TimestampedValueOf",
                      "key2Hasher": "Twox64Concat"
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Raw values for each oracle operators"
                  ]
                },
                {
                  "name": "IsUpdated",
                  "modifier": "Default",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "OracleKey",
                      "value": "bool",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " True if Self::values(key) is up to date, otherwise the value is stale"
                  ]
                },
                {
                  "name": "Values",
                  "modifier": "Optional",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "OracleKey",
                      "value": "TimestampedValueOf",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Combined value, may not be up to date"
                  ]
                },
                {
                  "name": "HasDispatched",
                  "modifier": "Default",
                  "type": {
                    "plain": "OrderedSet"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " If an oracle operator has feed a value in this block"
                  ]
                }
              ]
            },
            "calls": [
              {
                "name": "feed_values",
                "args": [
                  {
                    "name": "values",
                    "type": "Vec<(OracleKey,OracleValue)>"
                  }
                ],
                "docs": [
                  " Feed the external value.",
                  "",
                  " Require authorized operator."
                ]
              }
            ],
            "events": [
              {
                "name": "NewFeedData",
                "args": [
                  "AccountId",
                  "Vec<(OracleKey,OracleValue)>"
                ],
                "docs": [
                  " New feed data is submitted. [sender, values]"
                ]
              }
            ],
            "constants": [],
            "errors": [
              {
                "name": "NoPermission",
                "docs": [
                  " Sender does not have permission"
                ]
              },
              {
                "name": "AlreadyFeeded",
                "docs": [
                  " Feeder has already feeded at this block"
                ]
              }
            ],
            "index": "70"
          },
          {
            "name": "OperatorMembershipAcala",
            "storage": {
              "prefix": "Instance5Membership",
              "items": [
                {
                  "name": "Members",
                  "modifier": "Default",
                  "type": {
                    "plain": "Vec<AccountId>"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The current membership, stored as an ordered Vec."
                  ]
                },
                {
                  "name": "Prime",
                  "modifier": "Optional",
                  "type": {
                    "plain": "AccountId"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The current prime member, if one exists."
                  ]
                }
              ]
            },
            "calls": [
              {
                "name": "add_member",
                "args": [
                  {
                    "name": "who",
                    "type": "AccountId"
                  }
                ],
                "docs": [
                  " Add a member `who` to the set.",
                  "",
                  " May only be called from `T::AddOrigin`."
                ]
              },
              {
                "name": "remove_member",
                "args": [
                  {
                    "name": "who",
                    "type": "AccountId"
                  }
                ],
                "docs": [
                  " Remove a member `who` from the set.",
                  "",
                  " May only be called from `T::RemoveOrigin`."
                ]
              },
              {
                "name": "swap_member",
                "args": [
                  {
                    "name": "remove",
                    "type": "AccountId"
                  },
                  {
                    "name": "add",
                    "type": "AccountId"
                  }
                ],
                "docs": [
                  " Swap out one member `remove` for another `add`.",
                  "",
                  " May only be called from `T::SwapOrigin`.",
                  "",
                  " Prime membership is *not* passed from `remove` to `add`, if extant."
                ]
              },
              {
                "name": "reset_members",
                "args": [
                  {
                    "name": "members",
                    "type": "Vec<AccountId>"
                  }
                ],
                "docs": [
                  " Change the membership to a new set, disregarding the existing membership. Be nice and",
                  " pass `members` pre-sorted.",
                  "",
                  " May only be called from `T::ResetOrigin`."
                ]
              },
              {
                "name": "change_key",
                "args": [
                  {
                    "name": "new",
                    "type": "AccountId"
                  }
                ],
                "docs": [
                  " Swap out the sending member for some other key `new`.",
                  "",
                  " May only be called from `Signed` origin of a current member.",
                  "",
                  " Prime membership is passed from the origin account to `new`, if extant."
                ]
              },
              {
                "name": "set_prime",
                "args": [
                  {
                    "name": "who",
                    "type": "AccountId"
                  }
                ],
                "docs": [
                  " Set the prime member. Must be a current member.",
                  "",
                  " May only be called from `T::PrimeOrigin`."
                ]
              },
              {
                "name": "clear_prime",
                "args": [],
                "docs": [
                  " Remove the prime member if it exists.",
                  "",
                  " May only be called from `T::PrimeOrigin`."
                ]
              }
            ],
            "events": [
              {
                "name": "MemberAdded",
                "args": [],
                "docs": [
                  " The given member was added; see the transaction for who."
                ]
              },
              {
                "name": "MemberRemoved",
                "args": [],
                "docs": [
                  " The given member was removed; see the transaction for who."
                ]
              },
              {
                "name": "MembersSwapped",
                "args": [],
                "docs": [
                  " Two members were swapped; see the transaction for who."
                ]
              },
              {
                "name": "MembersReset",
                "args": [],
                "docs": [
                  " The membership was reset; see the transaction for who the new set is."
                ]
              },
              {
                "name": "KeyChanged",
                "args": [],
                "docs": [
                  " One of the members' keys changed."
                ]
              },
              {
                "name": "Dummy",
                "args": [
                  "PhantomData"
                ],
                "docs": [
                  " Phantom member, never used."
                ]
              }
            ],
            "constants": [],
            "errors": [
              {
                "name": "AlreadyMember",
                "docs": [
                  " Already a member."
                ]
              },
              {
                "name": "NotMember",
                "docs": [
                  " Not a member."
                ]
              }
            ],
            "index": "71"
          },
          {
            "name": "Auction",
            "storage": {
              "prefix": "Auction",
              "items": [
                {
                  "name": "Auctions",
                  "modifier": "Optional",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "AuctionId",
                      "value": "AuctionInfo",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Stores on-going and future auctions. Closed auction are removed."
                  ]
                },
                {
                  "name": "AuctionsIndex",
                  "modifier": "Default",
                  "type": {
                    "plain": "AuctionId"
                  },
                  "fallback": "0x00000000",
                  "docs": [
                    " Track the next auction ID."
                  ]
                },
                {
                  "name": "AuctionEndTime",
                  "modifier": "Optional",
                  "type": {
                    "doubleMap": {
                      "hasher": "Twox64Concat",
                      "key1": "BlockNumber",
                      "key2": "AuctionId",
                      "value": "()",
                      "key2Hasher": "Blake2_128Concat"
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Index auctions by end time."
                  ]
                }
              ]
            },
            "calls": [
              {
                "name": "bid",
                "args": [
                  {
                    "name": "id",
                    "type": "AuctionId"
                  },
                  {
                    "name": "value",
                    "type": "Compact<Balance>"
                  }
                ],
                "docs": [
                  " Bid an auction.",
                  "",
                  " The dispatch origin for this call must be `Signed` by the",
                  " transactor."
                ]
              }
            ],
            "events": [
              {
                "name": "Bid",
                "args": [
                  "AuctionId",
                  "AccountId",
                  "Balance"
                ],
                "docs": [
                  " A bid is placed. [auction_id, bidder, bidding_amount]"
                ]
              }
            ],
            "constants": [],
            "errors": [
              {
                "name": "AuctionNotExist",
                "docs": []
              },
              {
                "name": "AuctionNotStarted",
                "docs": []
              },
              {
                "name": "BidNotAccepted",
                "docs": []
              },
              {
                "name": "InvalidBidPrice",
                "docs": []
              },
              {
                "name": "NoAvailableAuctionId",
                "docs": []
              }
            ],
            "index": "80"
          },
          {
            "name": "Rewards",
            "storage": {
              "prefix": "Rewards",
              "items": [
                {
                  "name": "Pools",
                  "modifier": "Default",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "PoolId",
                      "value": "PoolInfo",
                      "linked": false
                    }
                  },
                  "fallback": "0x000000",
                  "docs": [
                    " Stores reward pool info."
                  ]
                },
                {
                  "name": "ShareAndWithdrawnReward",
                  "modifier": "Default",
                  "type": {
                    "doubleMap": {
                      "hasher": "Twox64Concat",
                      "key1": "PoolId",
                      "key2": "AccountId",
                      "value": "(Share,Balance)",
                      "key2Hasher": "Twox64Concat"
                    }
                  },
                  "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                  "docs": [
                    " Record share amount and withdrawn reward amount for specific `AccountId`",
                    " under `PoolId`."
                  ]
                }
              ]
            },
            "calls": [],
            "events": null,
            "constants": [],
            "errors": [],
            "index": "81"
          },
          {
            "name": "OrmlNFT",
            "storage": {
              "prefix": "OrmlNFT",
              "items": [
                {
                  "name": "NextClassId",
                  "modifier": "Default",
                  "type": {
                    "plain": "ClassId"
                  },
                  "fallback": "0x00000000",
                  "docs": [
                    " Next available class ID."
                  ]
                },
                {
                  "name": "NextTokenId",
                  "modifier": "Default",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "ClassId",
                      "value": "TokenId",
                      "linked": false
                    }
                  },
                  "fallback": "0x0000000000000000",
                  "docs": [
                    " Next available token ID."
                  ]
                },
                {
                  "name": "Classes",
                  "modifier": "Optional",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "ClassId",
                      "value": "ClassInfoOf",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Store class info.",
                    "",
                    " Returns `None` if class info not set or removed."
                  ]
                },
                {
                  "name": "Tokens",
                  "modifier": "Optional",
                  "type": {
                    "doubleMap": {
                      "hasher": "Twox64Concat",
                      "key1": "ClassId",
                      "key2": "TokenId",
                      "value": "TokenInfoOf",
                      "key2Hasher": "Twox64Concat"
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Store token info.",
                    "",
                    " Returns `None` if token info not set or removed."
                  ]
                },
                {
                  "name": "TokensByOwner",
                  "modifier": "Default",
                  "type": {
                    "doubleMap": {
                      "hasher": "Twox64Concat",
                      "key1": "AccountId",
                      "key2": "(ClassId,TokenId)",
                      "value": "()",
                      "key2Hasher": "Twox64Concat"
                    }
                  },
                  "fallback": "0x",
                  "docs": [
                    " Token existence check by owner and class ID."
                  ]
                }
              ]
            },
            "calls": null,
            "events": null,
            "constants": [],
            "errors": [
              {
                "name": "NoAvailableClassId",
                "docs": [
                  " No available class ID"
                ]
              },
              {
                "name": "NoAvailableTokenId",
                "docs": [
                  " No available token ID"
                ]
              },
              {
                "name": "TokenNotFound",
                "docs": [
                  " Token(ClassId, TokenId) not found"
                ]
              },
              {
                "name": "ClassNotFound",
                "docs": [
                  " Class not found"
                ]
              },
              {
                "name": "NoPermission",
                "docs": [
                  " The operator is not the owner of the token and has no permission"
                ]
              },
              {
                "name": "CannotDestroyClass",
                "docs": [
                  " Can not destroy class",
                  " Total issuance is not 0"
                ]
              },
              {
                "name": "MaxMetadataExceeded",
                "docs": [
                  " Failed because the Maximum amount of metadata was exceeded"
                ]
              }
            ],
            "index": "82"
          },
          {
            "name": "Prices",
            "storage": {
              "prefix": "Prices",
              "items": [
                {
                  "name": "LockedPrice",
                  "modifier": "Optional",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "CurrencyId",
                      "value": "Price",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Mapping from currency id to it's locked price",
                    "",
                    " map CurrencyId => Option<Price>"
                  ]
                }
              ]
            },
            "calls": [
              {
                "name": "lock_price",
                "args": [
                  {
                    "name": "currency_id",
                    "type": "CurrencyId"
                  }
                ],
                "docs": [
                  " Lock the price and feed it to system.",
                  "",
                  " The dispatch origin of this call must be `LockOrigin`.",
                  "",
                  " - `currency_id`: currency type."
                ]
              },
              {
                "name": "unlock_price",
                "args": [
                  {
                    "name": "currency_id",
                    "type": "CurrencyId"
                  }
                ],
                "docs": [
                  " Unlock the price and get the price from `PriceProvider` again",
                  "",
                  " The dispatch origin of this call must be `LockOrigin`.",
                  "",
                  " - `currency_id`: currency type."
                ]
              }
            ],
            "events": [
              {
                "name": "LockPrice",
                "args": [
                  "CurrencyId",
                  "Price"
                ],
                "docs": [
                  " Lock price. \\[currency_id, locked_price\\]"
                ]
              },
              {
                "name": "UnlockPrice",
                "args": [
                  "CurrencyId"
                ],
                "docs": [
                  " Unlock price. \\[currency_id\\]"
                ]
              }
            ],
            "constants": [
              {
                "name": "GetStableCurrencyId",
                "type": "CurrencyId",
                "value": "0x0081",
                "docs": [
                  " The stable currency id, it should be AUSD in Acala."
                ]
              },
              {
                "name": "StableCurrencyFixedPrice",
                "type": "Price",
                "value": "0x000064a7b3b6e00d0000000000000000",
                "docs": [
                  " The fixed prices of stable currency, it should be 1 USD in Acala."
                ]
              },
              {
                "name": "GetStakingCurrencyId",
                "type": "CurrencyId",
                "value": "0x0082",
                "docs": [
                  " The staking currency id, it should be DOT in Acala."
                ]
              },
              {
                "name": "GetLiquidCurrencyId",
                "type": "CurrencyId",
                "value": "0x0083",
                "docs": [
                  " The liquid currency id, it should be LDOT in Acala."
                ]
              }
            ],
            "errors": [],
            "index": "90"
          },
          {
            "name": "Dex",
            "storage": {
              "prefix": "Dex",
              "items": [
                {
                  "name": "LiquidityPool",
                  "modifier": "Default",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "TradingPair",
                      "value": "(Balance,Balance)",
                      "linked": false
                    }
                  },
                  "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                  "docs": [
                    " Liquidity pool for TradingPair.",
                    "",
                    " LiquidityPool: map TradingPair => (Balance, Balance)"
                  ]
                },
                {
                  "name": "TradingPairStatuses",
                  "modifier": "Default",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "TradingPair",
                      "value": "TradingPairStatus",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Status for TradingPair.",
                    "",
                    " TradingPairStatuses: map TradingPair => TradingPairStatus"
                  ]
                },
                {
                  "name": "ProvisioningPool",
                  "modifier": "Default",
                  "type": {
                    "doubleMap": {
                      "hasher": "Twox64Concat",
                      "key1": "TradingPair",
                      "key2": "AccountId",
                      "value": "(Balance,Balance)",
                      "key2Hasher": "Twox64Concat"
                    }
                  },
                  "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                  "docs": [
                    " Provision of TradingPair by AccountId.",
                    "",
                    " ProvisioningPool: double_map TradingPair, AccountId => (Balance,",
                    " Balance)"
                  ]
                },
                {
                  "name": "InitialShareExchangeRates",
                  "modifier": "Default",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "TradingPair",
                      "value": "(ExchangeRate,ExchangeRate)",
                      "linked": false
                    }
                  },
                  "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                  "docs": [
                    " Initial exchange rate, used to calculate the dex share amount for founders of provisioning",
                    "",
                    " InitialShareExchangeRates: map TradingPair => (ExchangeRate, ExchangeRate)"
                  ]
                }
              ]
            },
            "calls": [
              {
                "name": "swap_with_exact_supply",
                "args": [
                  {
                    "name": "path",
                    "type": "Vec<CurrencyId>"
                  },
                  {
                    "name": "supply_amount",
                    "type": "Compact<Balance>"
                  },
                  {
                    "name": "min_target_amount",
                    "type": "Compact<Balance>"
                  }
                ],
                "docs": [
                  " Trading with DEX, swap with exact supply amount",
                  "",
                  " - `path`: trading path.",
                  " - `supply_amount`: exact supply amount.",
                  " - `min_target_amount`: acceptable minimum target amount."
                ]
              },
              {
                "name": "swap_with_exact_target",
                "args": [
                  {
                    "name": "path",
                    "type": "Vec<CurrencyId>"
                  },
                  {
                    "name": "target_amount",
                    "type": "Compact<Balance>"
                  },
                  {
                    "name": "max_supply_amount",
                    "type": "Compact<Balance>"
                  }
                ],
                "docs": [
                  " Trading with DEX, swap with exact target amount",
                  "",
                  " - `path`: trading path.",
                  " - `target_amount`: exact target amount.",
                  " - `max_supply_amount`: acceptable maximum supply amount."
                ]
              },
              {
                "name": "add_liquidity",
                "args": [
                  {
                    "name": "currency_id_a",
                    "type": "CurrencyId"
                  },
                  {
                    "name": "currency_id_b",
                    "type": "CurrencyId"
                  },
                  {
                    "name": "max_amount_a",
                    "type": "Compact<Balance>"
                  },
                  {
                    "name": "max_amount_b",
                    "type": "Compact<Balance>"
                  },
                  {
                    "name": "min_share_increment",
                    "type": "Compact<Balance>"
                  },
                  {
                    "name": "stake_increment_share",
                    "type": "bool"
                  }
                ],
                "docs": [
                  " Add liquidity to Enabled trading pair.",
                  " - Add provision success will record the provision, issue shares to caller in the initial",
                  "   exchange rate when trading pair convert to Enabled.",
                  "",
                  " - `currency_id_a`: currency id A.",
                  " - `currency_id_b`: currency id B.",
                  " - `max_amount_a`: maximum amount of currency_id_a is allowed to inject to liquidity",
                  "   pool.",
                  " - `max_amount_b`: maximum amount of currency_id_b is allowed to inject to liquidity",
                  "   pool.",
                  " - `min_share_increment`: minimum acceptable share amount.",
                  " - `stake_increment_share`: indicates whether to stake increased dex share to earn",
                  "   incentives"
                ]
              },
              {
                "name": "add_provision",
                "args": [
                  {
                    "name": "currency_id_a",
                    "type": "CurrencyId"
                  },
                  {
                    "name": "currency_id_b",
                    "type": "CurrencyId"
                  },
                  {
                    "name": "amount_a",
                    "type": "Compact<Balance>"
                  },
                  {
                    "name": "amount_b",
                    "type": "Compact<Balance>"
                  }
                ],
                "docs": [
                  " Add provision to Provisioning trading pair.",
                  " If succecced, will record the provision, but shares issuing will happen after the",
                  " trading pair convert to Enabled status.",
                  "",
                  " - `currency_id_a`: currency id A.",
                  " - `currency_id_b`: currency id B.",
                  " - `amount_a`: provision amount for currency_id_a.",
                  " - `amount_b`: provision amount for currency_id_b."
                ]
              },
              {
                "name": "claim_dex_share",
                "args": [
                  {
                    "name": "currency_id_a",
                    "type": "CurrencyId"
                  },
                  {
                    "name": "currency_id_b",
                    "type": "CurrencyId"
                  }
                ],
                "docs": [
                  " Claim dex share for founders who have participated in trading pair provision.",
                  "",
                  " - `currency_id_a`: currency id A.",
                  " - `currency_id_b`: currency id B."
                ]
              },
              {
                "name": "remove_liquidity",
                "args": [
                  {
                    "name": "currency_id_a",
                    "type": "CurrencyId"
                  },
                  {
                    "name": "currency_id_b",
                    "type": "CurrencyId"
                  },
                  {
                    "name": "remove_share",
                    "type": "Compact<Balance>"
                  },
                  {
                    "name": "min_withdrawn_a",
                    "type": "Compact<Balance>"
                  },
                  {
                    "name": "min_withdrawn_b",
                    "type": "Compact<Balance>"
                  },
                  {
                    "name": "by_unstake",
                    "type": "bool"
                  }
                ],
                "docs": [
                  " Remove liquidity from specific liquidity pool in the form of burning",
                  " shares, and withdrawing currencies in trading pairs from liquidity",
                  " pool in proportion, and withdraw liquidity incentive interest.",
                  "",
                  " - `currency_id_a`: currency id A.",
                  " - `currency_id_b`: currency id B.",
                  " - `remove_share`: liquidity amount to remove.",
                  " - `min_withdrawn_a`: minimum acceptable withrawn for currency_id_a.",
                  " - `min_withdrawn_b`: minimum acceptable withrawn for currency_id_b.",
                  " - `by_unstake`: this flag indicates whether to withdraw share which is on incentives."
                ]
              },
              {
                "name": "list_provisioning",
                "args": [
                  {
                    "name": "currency_id_a",
                    "type": "CurrencyId"
                  },
                  {
                    "name": "currency_id_b",
                    "type": "CurrencyId"
                  },
                  {
                    "name": "min_contribution_a",
                    "type": "Balance"
                  },
                  {
                    "name": "min_contribution_b",
                    "type": "Balance"
                  },
                  {
                    "name": "target_provision_a",
                    "type": "Balance"
                  },
                  {
                    "name": "target_provision_b",
                    "type": "Balance"
                  },
                  {
                    "name": "not_before",
                    "type": "BlockNumber"
                  }
                ],
                "docs": [
                  " List a new provisioning trading pair."
                ]
              },
              {
                "name": "update_provisioning_parameters",
                "args": [
                  {
                    "name": "currency_id_a",
                    "type": "CurrencyId"
                  },
                  {
                    "name": "currency_id_b",
                    "type": "CurrencyId"
                  },
                  {
                    "name": "min_contribution_a",
                    "type": "Balance"
                  },
                  {
                    "name": "min_contribution_b",
                    "type": "Balance"
                  },
                  {
                    "name": "target_provision_a",
                    "type": "Balance"
                  },
                  {
                    "name": "target_provision_b",
                    "type": "Balance"
                  },
                  {
                    "name": "not_before",
                    "type": "BlockNumber"
                  }
                ],
                "docs": [
                  " List a new trading pair, trading pair will become Enabled status",
                  " after provision process."
                ]
              },
              {
                "name": "end_provisioning",
                "args": [
                  {
                    "name": "currency_id_a",
                    "type": "CurrencyId"
                  },
                  {
                    "name": "currency_id_b",
                    "type": "CurrencyId"
                  }
                ],
                "docs": [
                  " Enable a Provisioning trading pair if meet the condition."
                ]
              },
              {
                "name": "enable_trading_pair",
                "args": [
                  {
                    "name": "currency_id_a",
                    "type": "CurrencyId"
                  },
                  {
                    "name": "currency_id_b",
                    "type": "CurrencyId"
                  }
                ],
                "docs": [
                  " Enable a trading pair",
                  " if the status of trading pair is `Disabled`, or `Provisioning` without any accumulated",
                  " provision, enable it directly."
                ]
              },
              {
                "name": "disable_trading_pair",
                "args": [
                  {
                    "name": "currency_id_a",
                    "type": "CurrencyId"
                  },
                  {
                    "name": "currency_id_b",
                    "type": "CurrencyId"
                  }
                ],
                "docs": [
                  " Disable a `Enabled` trading pair."
                ]
              }
            ],
            "events": [
              {
                "name": "AddProvision",
                "args": [
                  "AccountId",
                  "CurrencyId",
                  "Balance",
                  "CurrencyId",
                  "Balance"
                ],
                "docs": [
                  " add provision success \\[who, currency_id_0, contribution_0,",
                  " currency_id_1, contribution_1\\]"
                ]
              },
              {
                "name": "AddLiquidity",
                "args": [
                  "AccountId",
                  "CurrencyId",
                  "Balance",
                  "CurrencyId",
                  "Balance",
                  "Balance"
                ],
                "docs": [
                  " Add liquidity success. \\[who, currency_id_0, pool_0_increment,",
                  " currency_id_1, pool_1_increment, share_increment\\]"
                ]
              },
              {
                "name": "RemoveLiquidity",
                "args": [
                  "AccountId",
                  "CurrencyId",
                  "Balance",
                  "CurrencyId",
                  "Balance",
                  "Balance"
                ],
                "docs": [
                  " Remove liquidity from the trading pool success. \\[who,",
                  " currency_id_0, pool_0_decrement, currency_id_1, pool_1_decrement,",
                  " share_decrement\\]"
                ]
              },
              {
                "name": "Swap",
                "args": [
                  "AccountId",
                  "Vec<CurrencyId>",
                  "Balance",
                  "Balance"
                ],
                "docs": [
                  " Use supply currency to swap target currency. \\[trader, trading_path,",
                  " supply_currency_amount, target_currency_amount\\]"
                ]
              },
              {
                "name": "EnableTradingPair",
                "args": [
                  "TradingPair"
                ],
                "docs": [
                  " Enable trading pair. \\[trading_pair\\]"
                ]
              },
              {
                "name": "ListProvisioning",
                "args": [
                  "TradingPair"
                ],
                "docs": [
                  " List provisioning trading pair. \\[trading_pair\\]"
                ]
              },
              {
                "name": "DisableTradingPair",
                "args": [
                  "TradingPair"
                ],
                "docs": [
                  " Disable trading pair. \\[trading_pair\\]"
                ]
              },
              {
                "name": "ProvisioningToEnabled",
                "args": [
                  "TradingPair",
                  "Balance",
                  "Balance",
                  "Balance"
                ],
                "docs": [
                  " Provisioning trading pair convert to Enabled. \\[trading_pair,",
                  " pool_0_amount, pool_1_amount, total_share_amount\\]"
                ]
              }
            ],
            "constants": [
              {
                "name": "GetExchangeFee",
                "type": "(u32,u32)",
                "value": "0x03000000e8030000",
                "docs": [
                  " Trading fee rate",
                  " The first item of the tuple is the numerator of the fee rate, second",
                  " item is the denominator, fee_rate = numerator / denominator,",
                  " use (u32, u32) over `Rate` type to minimize internal division",
                  " operation."
                ]
              },
              {
                "name": "TradingPathLimit",
                "type": "u32",
                "value": "0x03000000",
                "docs": [
                  " The limit for length of trading path"
                ]
              },
              {
                "name": "PalletId",
                "type": "PalletId",
                "value": "0x6163612f6465786d",
                "docs": [
                  " The DEX's module id, keep all assets in DEX."
                ]
              }
            ],
            "errors": [
              {
                "name": "AlreadyEnabled",
                "docs": [
                  " Trading pair is already Enabled"
                ]
              },
              {
                "name": "MustBeEnabled",
                "docs": [
                  " Trading pair must be in Enabled status"
                ]
              },
              {
                "name": "MustBeProvisioning",
                "docs": [
                  " Trading pair must be in Provisioning status"
                ]
              },
              {
                "name": "MustBeDisabled",
                "docs": [
                  " Trading pair must be in Disabled status"
                ]
              },
              {
                "name": "NotAllowedList",
                "docs": [
                  " This trading pair is not allowed to be listed"
                ]
              },
              {
                "name": "InvalidContributionIncrement",
                "docs": [
                  " The increment of provision is invalid"
                ]
              },
              {
                "name": "InvalidLiquidityIncrement",
                "docs": [
                  " The increment of liquidity is invalid"
                ]
              },
              {
                "name": "InvalidCurrencyId",
                "docs": [
                  " Invalid currency id"
                ]
              },
              {
                "name": "InvalidTradingPathLength",
                "docs": [
                  " Invalid trading path length"
                ]
              },
              {
                "name": "InsufficientTargetAmount",
                "docs": [
                  " Target amount is less to min_target_amount"
                ]
              },
              {
                "name": "ExcessiveSupplyAmount",
                "docs": [
                  " Supply amount is more than max_supply_amount"
                ]
              },
              {
                "name": "ExceedPriceImpactLimit",
                "docs": [
                  " The swap will cause unacceptable price impact"
                ]
              },
              {
                "name": "InsufficientLiquidity",
                "docs": [
                  " Liquidity is not enough"
                ]
              },
              {
                "name": "ZeroSupplyAmount",
                "docs": [
                  " The supply amount is zero"
                ]
              },
              {
                "name": "ZeroTargetAmount",
                "docs": [
                  " The target amount is zero"
                ]
              },
              {
                "name": "UnacceptableShareIncrement",
                "docs": [
                  " The share increment is unacceptable"
                ]
              },
              {
                "name": "UnacceptableLiquidityWithdrawn",
                "docs": [
                  " The liquidity withdrawn is unacceptable"
                ]
              },
              {
                "name": "InvariantCheckFailed",
                "docs": [
                  " The swap dosen't meet the invariant check"
                ]
              },
              {
                "name": "UnqualifiedProvision",
                "docs": [
                  " The Provision is unqualified to be converted to `Enabled`"
                ]
              },
              {
                "name": "StillProvisioning",
                "docs": [
                  " Trading pair is still provisioning"
                ]
              }
            ],
            "index": "91"
          },
          {
            "name": "AuctionManager",
            "storage": {
              "prefix": "AuctionManager",
              "items": [
                {
                  "name": "CollateralAuctions",
                  "modifier": "Optional",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "AuctionId",
                      "value": "CollateralAuctionItem",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Mapping from auction id to collateral auction info",
                    "",
                    " CollateralAuctions: map AuctionId => Option<CollateralAuctionItem>"
                  ]
                },
                {
                  "name": "TotalCollateralInAuction",
                  "modifier": "Default",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "CurrencyId",
                      "value": "Balance",
                      "linked": false
                    }
                  },
                  "fallback": "0x00000000000000000000000000000000",
                  "docs": [
                    " Record of the total collateral amount of all active collateral auctions",
                    " under specific collateral type CollateralType -> TotalAmount",
                    "",
                    " TotalCollateralInAuction: map CurrencyId => Balance"
                  ]
                },
                {
                  "name": "TotalTargetInAuction",
                  "modifier": "Default",
                  "type": {
                    "plain": "Balance"
                  },
                  "fallback": "0x00000000000000000000000000000000",
                  "docs": [
                    " Record of total target sales of all active collateral auctions",
                    "",
                    " TotalTargetInAuction: Balance"
                  ]
                }
              ]
            },
            "calls": [
              {
                "name": "cancel",
                "args": [
                  {
                    "name": "id",
                    "type": "AuctionId"
                  }
                ],
                "docs": [
                  " Cancel active auction after system shutdown",
                  "",
                  " The dispatch origin of this call must be _None_."
                ]
              }
            ],
            "events": [
              {
                "name": "NewCollateralAuction",
                "args": [
                  "AuctionId",
                  "CurrencyId",
                  "Balance",
                  "Balance"
                ],
                "docs": [
                  " Collateral auction created. \\[auction_id, collateral_type,",
                  " collateral_amount, target_bid_price\\]"
                ]
              },
              {
                "name": "CancelAuction",
                "args": [
                  "AuctionId"
                ],
                "docs": [
                  " Active auction cancelled. \\[auction_id\\]"
                ]
              },
              {
                "name": "CollateralAuctionDealt",
                "args": [
                  "AuctionId",
                  "CurrencyId",
                  "Balance",
                  "AccountId",
                  "Balance"
                ],
                "docs": [
                  " Collateral auction dealt. \\[auction_id, collateral_type,",
                  " collateral_amount, winner, payment_amount\\]"
                ]
              },
              {
                "name": "DEXTakeCollateralAuction",
                "args": [
                  "AuctionId",
                  "CurrencyId",
                  "Balance",
                  "Balance"
                ],
                "docs": [
                  " Dex take collateral auction. \\[auction_id, collateral_type,",
                  " collateral_amount, turnover\\]"
                ]
              }
            ],
            "constants": [
              {
                "name": "MinimumIncrementSize",
                "type": "Rate",
                "value": "0x000082dfe40d47000000000000000000",
                "docs": [
                  " The minimum increment size of each bid compared to the previous one"
                ]
              },
              {
                "name": "AuctionTimeToClose",
                "type": "BlockNumber",
                "value": "0x4b000000",
                "docs": [
                  " The extended time for the auction to end after each successful bid"
                ]
              },
              {
                "name": "AuctionDurationSoftCap",
                "type": "BlockNumber",
                "value": "0x58020000",
                "docs": [
                  " When the total duration of the auction exceeds this soft cap, push",
                  " the auction to end more faster"
                ]
              },
              {
                "name": "GetStableCurrencyId",
                "type": "CurrencyId",
                "value": "0x0081",
                "docs": [
                  " The stable currency id"
                ]
              },
              {
                "name": "UnsignedPriority",
                "type": "TransactionPriority",
                "value": "0xfeffffffffffffff",
                "docs": [
                  " A configuration for base priority of unsigned transactions.",
                  "",
                  " This is exposed so that it can be tuned for particular runtime, when",
                  " multiple modules send unsigned transactions."
                ]
              }
            ],
            "errors": [
              {
                "name": "AuctionNotExists",
                "docs": [
                  " The auction dose not exist"
                ]
              },
              {
                "name": "InReverseStage",
                "docs": [
                  " The collateral auction is in reverse stage now"
                ]
              },
              {
                "name": "InvalidFeedPrice",
                "docs": [
                  " Feed price is invalid"
                ]
              },
              {
                "name": "MustAfterShutdown",
                "docs": [
                  " Must after system shutdown"
                ]
              },
              {
                "name": "InvalidBidPrice",
                "docs": [
                  " Bid price is invalid"
                ]
              },
              {
                "name": "InvalidAmount",
                "docs": [
                  " Invalid input amount"
                ]
              }
            ],
            "index": "100"
          },
          {
            "name": "Loans",
            "storage": {
              "prefix": "Loans",
              "items": [
                {
                  "name": "Positions",
                  "modifier": "Default",
                  "type": {
                    "doubleMap": {
                      "hasher": "Twox64Concat",
                      "key1": "CurrencyId",
                      "key2": "AccountId",
                      "value": "Position",
                      "key2Hasher": "Twox64Concat"
                    }
                  },
                  "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                  "docs": [
                    " The collateralized debit positions, map from",
                    " Owner -> CollateralType -> Position",
                    "",
                    " Positions: double_map CurrencyId, AccountId => Position"
                  ]
                },
                {
                  "name": "TotalPositions",
                  "modifier": "Default",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "CurrencyId",
                      "value": "Position",
                      "linked": false
                    }
                  },
                  "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                  "docs": [
                    " The total collateralized debit positions, map from",
                    " CollateralType -> Position",
                    "",
                    " TotalPositions: CurrencyId => Position"
                  ]
                }
              ]
            },
            "calls": [],
            "events": [
              {
                "name": "PositionUpdated",
                "args": [
                  "AccountId",
                  "CurrencyId",
                  "Amount",
                  "Amount"
                ],
                "docs": [
                  " Position updated. \\[owner, collateral_type, collateral_adjustment,",
                  " debit_adjustment\\]"
                ]
              },
              {
                "name": "ConfiscateCollateralAndDebit",
                "args": [
                  "AccountId",
                  "CurrencyId",
                  "Balance",
                  "Balance"
                ],
                "docs": [
                  " Confiscate CDP's collateral assets and eliminate its debit. \\[owner,",
                  " collateral_type, confiscated_collateral_amount,",
                  " deduct_debit_amount\\]"
                ]
              },
              {
                "name": "TransferLoan",
                "args": [
                  "AccountId",
                  "AccountId",
                  "CurrencyId"
                ],
                "docs": [
                  " Transfer loan. \\[from, to, currency_id\\]"
                ]
              }
            ],
            "constants": [
              {
                "name": "PalletId",
                "type": "PalletId",
                "value": "0x6163612f6c6f616e",
                "docs": [
                  " The loan's module id, keep all collaterals of CDPs."
                ]
              }
            ],
            "errors": [
              {
                "name": "AmountConvertFailed",
                "docs": []
              }
            ],
            "index": "101"
          },
          {
            "name": "Honzon",
            "storage": {
              "prefix": "Honzon",
              "items": [
                {
                  "name": "Authorization",
                  "modifier": "Optional",
                  "type": {
                    "doubleMap": {
                      "hasher": "Twox64Concat",
                      "key1": "AccountId",
                      "key2": "(CurrencyId,AccountId)",
                      "value": "Balance",
                      "key2Hasher": "Blake2_128Concat"
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The authorization relationship map from",
                    " Authorizer -> (CollateralType, Authorizee) -> Authorized",
                    "",
                    " Authorization: double_map AccountId, (CurrencyId, T::AccountId) => Option<Balance>"
                  ]
                }
              ]
            },
            "calls": [
              {
                "name": "adjust_loan",
                "args": [
                  {
                    "name": "currency_id",
                    "type": "CurrencyId"
                  },
                  {
                    "name": "collateral_adjustment",
                    "type": "Amount"
                  },
                  {
                    "name": "debit_adjustment",
                    "type": "Amount"
                  }
                ],
                "docs": [
                  " Adjust the loans of `currency_id` by specific",
                  " `collateral_adjustment` and `debit_adjustment`",
                  "",
                  " - `currency_id`: collateral currency id.",
                  " - `collateral_adjustment`: signed amount, positive means to deposit collateral currency",
                  "   into CDP, negative means withdraw collateral currency from CDP.",
                  " - `debit_adjustment`: signed amount, positive means to issue some amount of stablecoin",
                  "   to caller according to the debit adjustment, negative means caller will payback some",
                  "   amount of stablecoin to CDP according to to the debit adjustment."
                ]
              },
              {
                "name": "close_loan_has_debit_by_dex",
                "args": [
                  {
                    "name": "currency_id",
                    "type": "CurrencyId"
                  },
                  {
                    "name": "maybe_path",
                    "type": "Option<Vec<CurrencyId>>"
                  }
                ],
                "docs": []
              },
              {
                "name": "transfer_loan_from",
                "args": [
                  {
                    "name": "currency_id",
                    "type": "CurrencyId"
                  },
                  {
                    "name": "from",
                    "type": "LookupSource"
                  }
                ],
                "docs": [
                  " Transfer the whole CDP of `from` under `currency_id` to caller's CDP",
                  " under the same `currency_id`, caller must have the authorization of",
                  " `from` for the specific collateral type",
                  "",
                  " - `currency_id`: collateral currency id.",
                  " - `from`: authorizer account"
                ]
              },
              {
                "name": "authorize",
                "args": [
                  {
                    "name": "currency_id",
                    "type": "CurrencyId"
                  },
                  {
                    "name": "to",
                    "type": "LookupSource"
                  }
                ],
                "docs": [
                  " Authorize `to` to manipulate the loan under `currency_id`",
                  "",
                  " - `currency_id`: collateral currency id.",
                  " - `to`: authorizee account"
                ]
              },
              {
                "name": "unauthorize",
                "args": [
                  {
                    "name": "currency_id",
                    "type": "CurrencyId"
                  },
                  {
                    "name": "to",
                    "type": "LookupSource"
                  }
                ],
                "docs": [
                  " Cancel the authorization for `to` under `currency_id`",
                  "",
                  " - `currency_id`: collateral currency id.",
                  " - `to`: authorizee account"
                ]
              },
              {
                "name": "unauthorize_all",
                "args": [],
                "docs": [
                  " Cancel all authorization of caller"
                ]
              }
            ],
            "events": [
              {
                "name": "Authorization",
                "args": [
                  "AccountId",
                  "AccountId",
                  "CurrencyId"
                ],
                "docs": [
                  " Authorize someone to operate the loan of specific collateral.",
                  " \\[authorizer, authorizee, collateral_type\\]"
                ]
              },
              {
                "name": "UnAuthorization",
                "args": [
                  "AccountId",
                  "AccountId",
                  "CurrencyId"
                ],
                "docs": [
                  " Cancel the authorization of specific collateral for someone.",
                  " \\[authorizer, authorizee, collateral_type\\]"
                ]
              },
              {
                "name": "UnAuthorizationAll",
                "args": [
                  "AccountId"
                ],
                "docs": [
                  " Cancel all authorization. \\[authorizer\\]"
                ]
              }
            ],
            "constants": [
              {
                "name": "DepositPerAuthorization",
                "type": "Balance",
                "value": "0x0060c226d30100000000000000000000",
                "docs": [
                  " Reserved amount per authorization."
                ]
              }
            ],
            "errors": [
              {
                "name": "NoPermission",
                "docs": []
              },
              {
                "name": "AlreadyShutdown",
                "docs": []
              },
              {
                "name": "AuthorizationNotExists",
                "docs": []
              },
              {
                "name": "AlreadyAuthorized",
                "docs": []
              }
            ],
            "index": "102"
          },
          {
            "name": "CdpTreasury",
            "storage": {
              "prefix": "CdpTreasury",
              "items": [
                {
                  "name": "ExpectedCollateralAuctionSize",
                  "modifier": "Default",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "CurrencyId",
                      "value": "Balance",
                      "linked": false
                    }
                  },
                  "fallback": "0x00000000000000000000000000000000",
                  "docs": [
                    " The expected amount size for per lot collateral auction of specific",
                    " collateral type.",
                    "",
                    " ExpectedCollateralAuctionSize: map CurrencyId => Balance"
                  ]
                },
                {
                  "name": "DebitPool",
                  "modifier": "Default",
                  "type": {
                    "plain": "Balance"
                  },
                  "fallback": "0x00000000000000000000000000000000",
                  "docs": [
                    " Current total debit value of system. It's not same as debit in CDP",
                    " engine, it is the bad debt of the system.",
                    "",
                    " DebitPool: Balance"
                  ]
                }
              ]
            },
            "calls": [
              {
                "name": "extract_surplus_to_treasury",
                "args": [
                  {
                    "name": "amount",
                    "type": "Balance"
                  }
                ],
                "docs": []
              },
              {
                "name": "auction_collateral",
                "args": [
                  {
                    "name": "currency_id",
                    "type": "CurrencyId"
                  },
                  {
                    "name": "amount",
                    "type": "Balance"
                  },
                  {
                    "name": "target",
                    "type": "Balance"
                  },
                  {
                    "name": "splited",
                    "type": "bool"
                  }
                ],
                "docs": []
              },
              {
                "name": "set_expected_collateral_auction_size",
                "args": [
                  {
                    "name": "currency_id",
                    "type": "CurrencyId"
                  },
                  {
                    "name": "size",
                    "type": "Balance"
                  }
                ],
                "docs": [
                  " Update parameters related to collateral auction under specific",
                  " collateral type",
                  "",
                  " The dispatch origin of this call must be `UpdateOrigin`.",
                  "",
                  " - `currency_id`: collateral type",
                  " - `amount`: expected size of per lot collateral auction"
                ]
              }
            ],
            "events": [
              {
                "name": "ExpectedCollateralAuctionSizeUpdated",
                "args": [
                  "CurrencyId",
                  "Balance"
                ],
                "docs": [
                  " The expected amount size for per lot collateral auction of specific",
                  " collateral type updated. \\[collateral_type, new_size\\]"
                ]
              }
            ],
            "constants": [
              {
                "name": "GetStableCurrencyId",
                "type": "CurrencyId",
                "value": "0x0081",
                "docs": [
                  " Stablecoin currency id"
                ]
              },
              {
                "name": "MaxAuctionsCount",
                "type": "u32",
                "value": "0x64000000",
                "docs": [
                  " The cap of lots number when create collateral auction on a",
                  " liquidation or to create debit/surplus auction on block end.",
                  " If set to 0, does not work."
                ]
              },
              {
                "name": "TreasuryAccount",
                "type": "AccountId",
                "value": "0x6d6f646c6163612f687a74720000000000000000000000000000000000000000",
                "docs": []
              },
              {
                "name": "PalletId",
                "type": "PalletId",
                "value": "0x6163612f63647074",
                "docs": [
                  " The CDP treasury's module id, keep surplus and collateral assets",
                  " from liquidation."
                ]
              }
            ],
            "errors": [
              {
                "name": "CollateralNotEnough",
                "docs": [
                  " The collateral amount of CDP treasury is not enough"
                ]
              },
              {
                "name": "SurplusPoolNotEnough",
                "docs": [
                  " The surplus pool of CDP treasury is not enough"
                ]
              },
              {
                "name": "DebitPoolNotEnough",
                "docs": [
                  " The debit pool of CDP treasury is not enough"
                ]
              },
              {
                "name": "InvalidSwapPath",
                "docs": [
                  " The swap path is invalid"
                ]
              }
            ],
            "index": "103"
          },
          {
            "name": "CdpEngine",
            "storage": {
              "prefix": "CdpEngine",
              "items": [
                {
                  "name": "DebitExchangeRate",
                  "modifier": "Optional",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "CurrencyId",
                      "value": "ExchangeRate",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Mapping from collateral type to its exchange rate of debit units and",
                    " debit value",
                    "",
                    " DebitExchangeRate: CurrencyId => Option<ExchangeRate>"
                  ]
                },
                {
                  "name": "GlobalInterestRatePerSec",
                  "modifier": "Default",
                  "type": {
                    "plain": "Rate"
                  },
                  "fallback": "0x00000000000000000000000000000000",
                  "docs": [
                    " Global interest rate per sec for all types of collateral",
                    "",
                    " GlobalInterestRatePerSec: Rate"
                  ]
                },
                {
                  "name": "CollateralParams",
                  "modifier": "Default",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "CurrencyId",
                      "value": "RiskManagementParams",
                      "linked": false
                    }
                  },
                  "fallback": "0x0000000000000000000000000000000000000000",
                  "docs": [
                    " Mapping from collateral type to its risk management params",
                    "",
                    " CollateralParams: CurrencyId => RiskManagementParams"
                  ]
                },
                {
                  "name": "LastAccumulationSecs",
                  "modifier": "Default",
                  "type": {
                    "plain": "u64"
                  },
                  "fallback": "0x0000000000000000",
                  "docs": [
                    " Timestamp in seconds of the last interest accumulation",
                    "",
                    " LastAccumulationSecs: u64"
                  ]
                }
              ]
            },
            "calls": [
              {
                "name": "liquidate",
                "args": [
                  {
                    "name": "currency_id",
                    "type": "CurrencyId"
                  },
                  {
                    "name": "who",
                    "type": "LookupSource"
                  }
                ],
                "docs": [
                  " Liquidate unsafe CDP",
                  "",
                  " The dispatch origin of this call must be _None_.",
                  "",
                  " - `currency_id`: CDP's collateral type.",
                  " - `who`: CDP's owner."
                ]
              },
              {
                "name": "settle",
                "args": [
                  {
                    "name": "currency_id",
                    "type": "CurrencyId"
                  },
                  {
                    "name": "who",
                    "type": "LookupSource"
                  }
                ],
                "docs": [
                  " Settle CDP has debit after system shutdown",
                  "",
                  " The dispatch origin of this call must be _None_.",
                  "",
                  " - `currency_id`: CDP's collateral type.",
                  " - `who`: CDP's owner."
                ]
              },
              {
                "name": "set_global_params",
                "args": [
                  {
                    "name": "global_interest_rate_per_sec",
                    "type": "Rate"
                  }
                ],
                "docs": [
                  " Update global parameters related to risk management of CDP",
                  "",
                  " The dispatch origin of this call must be `UpdateOrigin`.",
                  "",
                  " - `global_interest_rate_per_sec`: global interest rate per sec."
                ]
              },
              {
                "name": "set_collateral_params",
                "args": [
                  {
                    "name": "currency_id",
                    "type": "CurrencyId"
                  },
                  {
                    "name": "interest_rate_per_sec",
                    "type": "ChangeOptionRate"
                  },
                  {
                    "name": "liquidation_ratio",
                    "type": "ChangeOptionRatio"
                  },
                  {
                    "name": "liquidation_penalty",
                    "type": "ChangeOptionRate"
                  },
                  {
                    "name": "required_collateral_ratio",
                    "type": "ChangeOptionRatio"
                  },
                  {
                    "name": "maximum_total_debit_value",
                    "type": "ChangeBalance"
                  }
                ],
                "docs": [
                  " Update parameters related to risk management of CDP under specific",
                  " collateral type",
                  "",
                  " The dispatch origin of this call must be `UpdateOrigin`.",
                  "",
                  " - `currency_id`: collateral type.",
                  " - `interest_rate_per_sec`: extra interest rate per sec, `None` means do not update,",
                  "   `Some(None)` means update it to `None`.",
                  " - `liquidation_ratio`: liquidation ratio, `None` means do not update, `Some(None)` means",
                  "   update it to `None`.",
                  " - `liquidation_penalty`: liquidation penalty, `None` means do not update, `Some(None)`",
                  "   means update it to `None`.",
                  " - `required_collateral_ratio`: required collateral ratio, `None` means do not update,",
                  "   `Some(None)` means update it to `None`.",
                  " - `maximum_total_debit_value`: maximum total debit value."
                ]
              }
            ],
            "events": [
              {
                "name": "LiquidateUnsafeCDP",
                "args": [
                  "CurrencyId",
                  "AccountId",
                  "Balance",
                  "Balance",
                  "LiquidationStrategy"
                ],
                "docs": [
                  " Liquidate the unsafe CDP. \\[collateral_type, owner,",
                  " collateral_amount, bad_debt_value, liquidation_strategy\\]"
                ]
              },
              {
                "name": "SettleCDPInDebit",
                "args": [
                  "CurrencyId",
                  "AccountId"
                ],
                "docs": [
                  " Settle the CDP has debit. [collateral_type, owner]"
                ]
              },
              {
                "name": "CloseCDPInDebitByDEX",
                "args": [
                  "CurrencyId",
                  "AccountId",
                  "Balance",
                  "Balance",
                  "Balance"
                ],
                "docs": [
                  " Directly close CDP has debit by handle debit with DEX.",
                  " \\[collateral_type, owner, sold_collateral_amount,",
                  " refund_collateral_amount, debit_value\\]"
                ]
              },
              {
                "name": "InterestRatePerSec",
                "args": [
                  "CurrencyId",
                  "Option<Rate>"
                ],
                "docs": [
                  " The interest rate per sec for specific collateral type updated.",
                  " \\[collateral_type, new_interest_rate_per_sec\\]"
                ]
              },
              {
                "name": "LiquidationRatioUpdated",
                "args": [
                  "CurrencyId",
                  "Option<Ratio>"
                ],
                "docs": [
                  " The liquidation fee for specific collateral type updated.",
                  " \\[collateral_type, new_liquidation_ratio\\]"
                ]
              },
              {
                "name": "LiquidationPenaltyUpdated",
                "args": [
                  "CurrencyId",
                  "Option<Rate>"
                ],
                "docs": [
                  " The liquidation penalty rate for specific collateral type updated.",
                  " \\[collateral_type, new_liquidation_panelty\\]"
                ]
              },
              {
                "name": "RequiredCollateralRatioUpdated",
                "args": [
                  "CurrencyId",
                  "Option<Ratio>"
                ],
                "docs": [
                  " The required collateral penalty rate for specific collateral type",
                  " updated. \\[collateral_type, new_required_collateral_ratio\\]"
                ]
              },
              {
                "name": "MaximumTotalDebitValueUpdated",
                "args": [
                  "CurrencyId",
                  "Balance"
                ],
                "docs": [
                  " The hard cap of total debit value for specific collateral type",
                  " updated. \\[collateral_type, new_total_debit_value\\]"
                ]
              },
              {
                "name": "GlobalInterestRatePerSecUpdated",
                "args": [
                  "Rate"
                ],
                "docs": [
                  " The global interest rate per sec for all types of collateral",
                  " updated. \\[new_global_interest_rate_per_sec\\]"
                ]
              }
            ],
            "constants": [
              {
                "name": "CollateralCurrencyIds",
                "type": "Vec<CurrencyId>",
                "value": "0x0800820083",
                "docs": [
                  " The list of valid collateral currency types"
                ]
              },
              {
                "name": "DefaultLiquidationRatio",
                "type": "Ratio",
                "value": "0x000002c01c870a120000000000000000",
                "docs": [
                  " The default liquidation ratio for all collateral types of CDP"
                ]
              },
              {
                "name": "DefaultDebitExchangeRate",
                "type": "ExchangeRate",
                "value": "0x00008a5d784563010000000000000000",
                "docs": [
                  " The default debit exchange rate for all collateral types"
                ]
              },
              {
                "name": "DefaultLiquidationPenalty",
                "type": "Rate",
                "value": "0x0000087e93371c010000000000000000",
                "docs": [
                  " The default liquidation penalty rate when liquidate unsafe CDP"
                ]
              },
              {
                "name": "MinimumDebitValue",
                "type": "Balance",
                "value": "0x0010a5d4e80000000000000000000000",
                "docs": [
                  " The minimum debit value to avoid debit dust"
                ]
              },
              {
                "name": "GetStableCurrencyId",
                "type": "CurrencyId",
                "value": "0x0081",
                "docs": [
                  " Stablecoin currency id"
                ]
              },
              {
                "name": "MaxSlippageSwapWithDEX",
                "type": "Ratio",
                "value": "0x00004f8c34e814020000000000000000",
                "docs": [
                  " The max slippage allowed when liquidate an unsafe CDP by swap with",
                  " DEX"
                ]
              },
              {
                "name": "UnsignedPriority",
                "type": "TransactionPriority",
                "value": "0xffffffffffffffff",
                "docs": [
                  " A configuration for base priority of unsigned transactions.",
                  "",
                  " This is exposed so that it can be tuned for particular runtime, when",
                  " multiple modules send unsigned transactions."
                ]
              }
            ],
            "errors": [
              {
                "name": "ExceedDebitValueHardCap",
                "docs": [
                  " The total debit value of specific collateral type already exceed the",
                  " hard cap"
                ]
              },
              {
                "name": "BelowRequiredCollateralRatio",
                "docs": [
                  " The collateral ratio below the required collateral ratio"
                ]
              },
              {
                "name": "BelowLiquidationRatio",
                "docs": [
                  " The collateral ratio below the liquidation ratio"
                ]
              },
              {
                "name": "MustBeUnsafe",
                "docs": [
                  " The CDP must be unsafe to be liquidated"
                ]
              },
              {
                "name": "IsUnsafe",
                "docs": [
                  " The CDP already is unsafe"
                ]
              },
              {
                "name": "InvalidCollateralType",
                "docs": [
                  " Invalid collateral type"
                ]
              },
              {
                "name": "RemainDebitValueTooSmall",
                "docs": [
                  " Remain debit value in CDP below the dust amount"
                ]
              },
              {
                "name": "InvalidFeedPrice",
                "docs": [
                  " Feed price is invalid"
                ]
              },
              {
                "name": "NoDebitValue",
                "docs": [
                  " No debit value in CDP so that it cannot be settled"
                ]
              },
              {
                "name": "AlreadyShutdown",
                "docs": [
                  " System has already been shutdown"
                ]
              },
              {
                "name": "MustAfterShutdown",
                "docs": [
                  " Must after system shutdown"
                ]
              }
            ],
            "index": "104"
          },
          {
            "name": "EmergencyShutdown",
            "storage": {
              "prefix": "EmergencyShutdown",
              "items": [
                {
                  "name": "IsShutdown",
                  "modifier": "Default",
                  "type": {
                    "plain": "bool"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Emergency shutdown flag",
                    "",
                    " IsShutdown: bool"
                  ]
                },
                {
                  "name": "CanRefund",
                  "modifier": "Default",
                  "type": {
                    "plain": "bool"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Open final redemption flag",
                    "",
                    " CanRefund: bool"
                  ]
                }
              ]
            },
            "calls": [
              {
                "name": "emergency_shutdown",
                "args": [],
                "docs": [
                  " Start emergency shutdown",
                  "",
                  " The dispatch origin of this call must be `ShutdownOrigin`."
                ]
              },
              {
                "name": "open_collateral_refund",
                "args": [],
                "docs": [
                  " Open final redemption if settlement is completed.",
                  "",
                  " The dispatch origin of this call must be `ShutdownOrigin`."
                ]
              },
              {
                "name": "refund_collaterals",
                "args": [
                  {
                    "name": "amount",
                    "type": "Compact<Balance>"
                  }
                ],
                "docs": [
                  " Refund a basket of remaining collateral assets to caller",
                  "",
                  " - `amount`: stable currency amount used to refund."
                ]
              }
            ],
            "events": [
              {
                "name": "Shutdown",
                "args": [
                  "BlockNumber"
                ],
                "docs": [
                  " Emergency shutdown occurs. \\[block_number\\]"
                ]
              },
              {
                "name": "OpenRefund",
                "args": [
                  "BlockNumber"
                ],
                "docs": [
                  " The final redemption opened. \\[block_number\\]"
                ]
              },
              {
                "name": "Refund",
                "args": [
                  "AccountId",
                  "Balance",
                  "Vec<(CurrencyId,Balance)>"
                ],
                "docs": [
                  " Refund info. \\[caller, stable_coin_amount, refund_list\\]"
                ]
              }
            ],
            "constants": [
              {
                "name": "CollateralCurrencyIds",
                "type": "Vec<CurrencyId>",
                "value": "0x0800820083",
                "docs": [
                  " The list of valid collateral currency types"
                ]
              }
            ],
            "errors": [
              {
                "name": "AlreadyShutdown",
                "docs": [
                  " System has already been shutdown"
                ]
              },
              {
                "name": "MustAfterShutdown",
                "docs": [
                  " Must after system shutdown"
                ]
              },
              {
                "name": "CanNotRefund",
                "docs": [
                  " Final redemption is still not opened"
                ]
              },
              {
                "name": "ExistPotentialSurplus",
                "docs": [
                  " Exist potential surplus, means settlement has not been completed"
                ]
              },
              {
                "name": "ExistUnhandledDebit",
                "docs": [
                  " Exist unhandled debit, means settlement has not been completed"
                ]
              }
            ],
            "index": "105"
          },
          {
            "name": "Incentives",
            "storage": {
              "prefix": "Incentives",
              "items": [
                {
                  "name": "IncentiveRewardAmount",
                  "modifier": "Default",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "PoolId",
                      "value": "Balance",
                      "linked": false
                    }
                  },
                  "fallback": "0x00000000000000000000000000000000",
                  "docs": [
                    " Mapping from pool to its fixed reward amount per period.",
                    "",
                    " IncentiveRewardAmount: map PoolId => Balance"
                  ]
                },
                {
                  "name": "DexSavingRewardRate",
                  "modifier": "Default",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "PoolId",
                      "value": "Rate",
                      "linked": false
                    }
                  },
                  "fallback": "0x00000000000000000000000000000000",
                  "docs": [
                    " Mapping from pool to its fixed reward rate per period.",
                    "",
                    " DexSavingRewardRate: map PoolId => Rate"
                  ]
                },
                {
                  "name": "PayoutDeductionRates",
                  "modifier": "Default",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "PoolId",
                      "value": "Rate",
                      "linked": false
                    }
                  },
                  "fallback": "0x00000000000000000000000000000000",
                  "docs": [
                    " Mapping from pool to its payout deduction rate.",
                    "",
                    " PayoutDeductionRates: map PoolId => Rate"
                  ]
                }
              ]
            },
            "calls": [
              {
                "name": "deposit_dex_share",
                "args": [
                  {
                    "name": "lp_currency_id",
                    "type": "CurrencyId"
                  },
                  {
                    "name": "amount",
                    "type": "Balance"
                  }
                ],
                "docs": []
              },
              {
                "name": "withdraw_dex_share",
                "args": [
                  {
                    "name": "lp_currency_id",
                    "type": "CurrencyId"
                  },
                  {
                    "name": "amount",
                    "type": "Balance"
                  }
                ],
                "docs": []
              },
              {
                "name": "claim_rewards",
                "args": [
                  {
                    "name": "pool_id",
                    "type": "PoolId"
                  }
                ],
                "docs": []
              },
              {
                "name": "update_incentive_rewards",
                "args": [
                  {
                    "name": "updates",
                    "type": "Vec<(PoolId,Balance)>"
                  }
                ],
                "docs": []
              },
              {
                "name": "update_dex_saving_rewards",
                "args": [
                  {
                    "name": "updates",
                    "type": "Vec<(PoolId,Rate)>"
                  }
                ],
                "docs": []
              },
              {
                "name": "update_payout_deduction_rates",
                "args": [
                  {
                    "name": "updates",
                    "type": "Vec<(PoolId,Rate)>"
                  }
                ],
                "docs": []
              },
              {
                "name": "add_allowance",
                "args": [
                  {
                    "name": "pool_id",
                    "type": "PoolId"
                  },
                  {
                    "name": "amount",
                    "type": "Balance"
                  }
                ],
                "docs": []
              }
            ],
            "events": [
              {
                "name": "DepositDexShare",
                "args": [
                  "AccountId",
                  "CurrencyId",
                  "Balance"
                ],
                "docs": [
                  " Deposit DEX share. \\[who, dex_share_type, deposit_amount\\]"
                ]
              },
              {
                "name": "WithdrawDexShare",
                "args": [
                  "AccountId",
                  "CurrencyId",
                  "Balance"
                ],
                "docs": [
                  " Withdraw DEX share. \\[who, dex_share_type, withdraw_amount\\]"
                ]
              },
              {
                "name": "PayoutRewards",
                "args": [
                  "AccountId",
                  "PoolId",
                  "CurrencyId",
                  "Balance",
                  "Balance"
                ],
                "docs": [
                  " Payout rewards. \\[who, pool_id, reward_currency_type, actual_payout, deduction_amount\\]"
                ]
              },
              {
                "name": "IncentiveRewardAmountUpdated",
                "args": [
                  "PoolId",
                  "Balance"
                ],
                "docs": [
                  " Incentive reward amount updated. \\[pool_id, reward_amount_per_period\\]"
                ]
              },
              {
                "name": "SavingRewardRateUpdated",
                "args": [
                  "PoolId",
                  "Rate"
                ],
                "docs": [
                  " Saving reward rate updated. \\[pool_id, reward_rate_per_period\\]"
                ]
              },
              {
                "name": "PayoutDeductionRateUpdated",
                "args": [
                  "PoolId",
                  "Rate"
                ],
                "docs": [
                  " Payout deduction rate updated. \\[pool_id, deduction_rate\\]"
                ]
              }
            ],
            "constants": [
              {
                "name": "AccumulatePeriod",
                "type": "BlockNumber",
                "value": "0x05000000",
                "docs": [
                  " The period to accumulate rewards"
                ]
              },
              {
                "name": "NativeCurrencyId",
                "type": "CurrencyId",
                "value": "0x0080",
                "docs": [
                  " The reward type for incentive."
                ]
              },
              {
                "name": "StableCurrencyId",
                "type": "CurrencyId",
                "value": "0x0081",
                "docs": [
                  " The reward type for dex saving."
                ]
              },
              {
                "name": "LiquidCurrencyId",
                "type": "CurrencyId",
                "value": "0x0083",
                "docs": [
                  " The reward type for homa validator insurance"
                ]
              },
              {
                "name": "NativeRewardsSource",
                "type": "AccountId",
                "value": "0x6d6f646c6163612f75726c730000000000000000000000000000000000000000",
                "docs": [
                  " The source account for native token rewards."
                ]
              },
              {
                "name": "RewardsVaultAccountId",
                "type": "AccountId",
                "value": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The vault account to keep rewards."
                ]
              },
              {
                "name": "PalletId",
                "type": "PalletId",
                "value": "0x6163612f696e6374",
                "docs": [
                  " The module id, keep DexShare LP."
                ]
              }
            ],
            "errors": [
              {
                "name": "NotEnough",
                "docs": [
                  " Share amount is not enough"
                ]
              },
              {
                "name": "InvalidCurrencyId",
                "docs": [
                  " Invalid currency id"
                ]
              },
              {
                "name": "InvalidPoolId",
                "docs": [
                  " Invalid pool id"
                ]
              },
              {
                "name": "InvalidRate",
                "docs": [
                  " Invalid rate"
                ]
              }
            ],
            "index": "120"
          },
          {
            "name": "NFT",
            "storage": null,
            "calls": [
              {
                "name": "create_class",
                "args": [
                  {
                    "name": "metadata",
                    "type": "CID"
                  },
                  {
                    "name": "properties",
                    "type": "Properties"
                  }
                ],
                "docs": [
                  " Create NFT class, tokens belong to the class.",
                  "",
                  " - `metadata`: external metadata",
                  " - `properties`: class property, include `Transferable` `Burnable`"
                ]
              },
              {
                "name": "mint",
                "args": [
                  {
                    "name": "to",
                    "type": "LookupSource"
                  },
                  {
                    "name": "class_id",
                    "type": "ClassIdOf"
                  },
                  {
                    "name": "metadata",
                    "type": "CID"
                  },
                  {
                    "name": "quantity",
                    "type": "u32"
                  }
                ],
                "docs": [
                  " Mint NFT token",
                  "",
                  " - `to`: the token owner's account",
                  " - `class_id`: token belong to the class id",
                  " - `metadata`: external metadata",
                  " - `quantity`: token quantity"
                ]
              },
              {
                "name": "transfer",
                "args": [
                  {
                    "name": "to",
                    "type": "LookupSource"
                  },
                  {
                    "name": "token",
                    "type": "(ClassIdOf,TokenIdOf)"
                  }
                ],
                "docs": [
                  " Transfer NFT token to another account",
                  "",
                  " - `to`: the token owner's account",
                  " - `token`: (class_id, token_id)"
                ]
              },
              {
                "name": "burn",
                "args": [
                  {
                    "name": "token",
                    "type": "(ClassIdOf,TokenIdOf)"
                  }
                ],
                "docs": [
                  " Burn NFT token",
                  "",
                  " - `token`: (class_id, token_id)"
                ]
              },
              {
                "name": "burn_with_remark",
                "args": [
                  {
                    "name": "token",
                    "type": "(ClassIdOf,TokenIdOf)"
                  },
                  {
                    "name": "remark",
                    "type": "Bytes"
                  }
                ],
                "docs": [
                  " Burn NFT token",
                  "",
                  " - `token`: (class_id, token_id)",
                  " - `remark`: Vec<u8>"
                ]
              },
              {
                "name": "destroy_class",
                "args": [
                  {
                    "name": "class_id",
                    "type": "ClassIdOf"
                  },
                  {
                    "name": "dest",
                    "type": "LookupSource"
                  }
                ],
                "docs": [
                  " Destroy NFT class, remove dest from proxy, and send all the free",
                  " balance to dest",
                  "",
                  " - `class_id`: The class ID to destroy",
                  " - `dest`: The proxy account that will receive free balance"
                ]
              }
            ],
            "events": [
              {
                "name": "CreatedClass",
                "args": [
                  "AccountId",
                  "ClassIdOf"
                ],
                "docs": [
                  " Created NFT class. \\[owner, class_id\\]"
                ]
              },
              {
                "name": "MintedToken",
                "args": [
                  "AccountId",
                  "AccountId",
                  "ClassIdOf",
                  "u32"
                ],
                "docs": [
                  " Minted NFT token. \\[from, to, class_id, quantity\\]"
                ]
              },
              {
                "name": "TransferredToken",
                "args": [
                  "AccountId",
                  "AccountId",
                  "ClassIdOf",
                  "TokenIdOf"
                ],
                "docs": [
                  " Transferred NFT token. \\[from, to, class_id, token_id\\]"
                ]
              },
              {
                "name": "BurnedToken",
                "args": [
                  "AccountId",
                  "ClassIdOf",
                  "TokenIdOf"
                ],
                "docs": [
                  " Burned NFT token. \\[owner, class_id, token_id\\]"
                ]
              },
              {
                "name": "BurnedTokenWithRemark",
                "args": [
                  "AccountId",
                  "ClassIdOf",
                  "TokenIdOf",
                  "Hash"
                ],
                "docs": [
                  " Burned NFT token with remark. \\[owner, class_id, token_id, remark_hash\\]"
                ]
              },
              {
                "name": "DestroyedClass",
                "args": [
                  "AccountId",
                  "ClassIdOf"
                ],
                "docs": [
                  " Destroyed NFT class. \\[owner, class_id\\]"
                ]
              }
            ],
            "constants": [
              {
                "name": "CreateClassDeposit",
                "type": "BalanceOf",
                "value": "0x0040e59c301200000000000000000000",
                "docs": [
                  " The minimum balance to create class"
                ]
              },
              {
                "name": "CreateTokenDeposit",
                "type": "BalanceOf",
                "value": "0x00204aa9d10100000000000000000000",
                "docs": [
                  " The minimum balance to create token"
                ]
              },
              {
                "name": "DataDepositPerByte",
                "type": "BalanceOf",
                "value": "0x00e1f505000000000000000000000000",
                "docs": [
                  " Deposit required for per byte."
                ]
              },
              {
                "name": "PalletId",
                "type": "PalletId",
                "value": "0x6163612f614e4654",
                "docs": [
                  " The NFT's module id"
                ]
              }
            ],
            "errors": [
              {
                "name": "ClassIdNotFound",
                "docs": [
                  " ClassId not found"
                ]
              },
              {
                "name": "TokenIdNotFound",
                "docs": [
                  " TokenId not found"
                ]
              },
              {
                "name": "NoPermission",
                "docs": [
                  " The operator is not the owner of the token and has no permission"
                ]
              },
              {
                "name": "InvalidQuantity",
                "docs": [
                  " Quantity is invalid. need >= 1"
                ]
              },
              {
                "name": "NonTransferable",
                "docs": [
                  " Property of class don't support transfer"
                ]
              },
              {
                "name": "NonBurnable",
                "docs": [
                  " Property of class don't support burn"
                ]
              },
              {
                "name": "CannotDestroyClass",
                "docs": [
                  " Can not destroy class",
                  " Total issuance is not 0"
                ]
              }
            ],
            "index": "121"
          },
          {
            "name": "EVM",
            "storage": {
              "prefix": "EVM",
              "items": [
                {
                  "name": "Accounts",
                  "modifier": "Optional",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "EvmAddress",
                      "value": "AccountInfo",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The EVM accounts info.",
                    "",
                    " Accounts: map EvmAddress => Option<AccountInfo<T>>"
                  ]
                },
                {
                  "name": "ContractStorageSizes",
                  "modifier": "Default",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "EvmAddress",
                      "value": "u32",
                      "linked": false
                    }
                  },
                  "fallback": "0x00000000",
                  "docs": [
                    " The storage usage for contracts. Including code size, extra bytes and total AccountStorages",
                    " size.",
                    "",
                    " Accounts: map EvmAddress => u32"
                  ]
                },
                {
                  "name": "AccountStorages",
                  "modifier": "Default",
                  "type": {
                    "doubleMap": {
                      "hasher": "Twox64Concat",
                      "key1": "EvmAddress",
                      "key2": "H256",
                      "value": "H256",
                      "key2Hasher": "Blake2_128Concat"
                    }
                  },
                  "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                  "docs": [
                    " The storages for EVM contracts.",
                    "",
                    " AccountStorages: double_map EvmAddress, H256 => H256"
                  ]
                },
                {
                  "name": "Codes",
                  "modifier": "Default",
                  "type": {
                    "map": {
                      "hasher": "Identity",
                      "key": "H256",
                      "value": "Bytes",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The code for EVM contracts.",
                    " Key is Keccak256 hash of code.",
                    "",
                    " Codes: H256 => Vec<u8>"
                  ]
                },
                {
                  "name": "CodeInfos",
                  "modifier": "Optional",
                  "type": {
                    "map": {
                      "hasher": "Identity",
                      "key": "H256",
                      "value": "CodeInfo",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The code info for EVM contracts.",
                    " Key is Keccak256 hash of code.",
                    "",
                    " CodeInfos: H256 => Option<CodeInfo>"
                  ]
                },
                {
                  "name": "NetworkContractIndex",
                  "modifier": "Default",
                  "type": {
                    "plain": "u64"
                  },
                  "fallback": "0x0000000000000000",
                  "docs": [
                    " Next available system contract address.",
                    "",
                    " NetworkContractIndex: u64"
                  ]
                },
                {
                  "name": "ExtrinsicOrigin",
                  "modifier": "Optional",
                  "type": {
                    "plain": "AccountId"
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Extrinsics origin for the current transaction.",
                    "",
                    " ExtrinsicOrigin: Option<AccountId>"
                  ]
                }
              ]
            },
            "calls": [
              {
                "name": "call",
                "args": [
                  {
                    "name": "target",
                    "type": "EvmAddress"
                  },
                  {
                    "name": "input",
                    "type": "Bytes"
                  },
                  {
                    "name": "value",
                    "type": "BalanceOf"
                  },
                  {
                    "name": "gas_limit",
                    "type": "u64"
                  },
                  {
                    "name": "storage_limit",
                    "type": "u32"
                  }
                ],
                "docs": [
                  " Issue an EVM call operation. This is similar to a message call",
                  " transaction in Ethereum.",
                  "",
                  " - `target`: the contract address to call",
                  " - `input`: the data supplied for the call",
                  " - `value`: the amount sent for payable calls",
                  " - `gas_limit`: the maximum gas the call can use",
                  " - `storage_limit`: the total bytes the contract's storage can increase by"
                ]
              },
              {
                "name": "scheduled_call",
                "args": [
                  {
                    "name": "from",
                    "type": "EvmAddress"
                  },
                  {
                    "name": "target",
                    "type": "EvmAddress"
                  },
                  {
                    "name": "input",
                    "type": "Bytes"
                  },
                  {
                    "name": "value",
                    "type": "BalanceOf"
                  },
                  {
                    "name": "gas_limit",
                    "type": "u64"
                  },
                  {
                    "name": "storage_limit",
                    "type": "u32"
                  }
                ],
                "docs": [
                  " Issue an EVM call operation on a scheduled contract call, and",
                  " refund the unused gas reserved when the call was scheduled.",
                  "",
                  " - `from`: the address the scheduled call originates from",
                  " - `target`: the contract address to call",
                  " - `input`: the data supplied for the call",
                  " - `value`: the amount sent for payable calls",
                  " - `gas_limit`: the maximum gas the call can use",
                  " - `storage_limit`: the total bytes the contract's storage can increase by"
                ]
              },
              {
                "name": "create",
                "args": [
                  {
                    "name": "init",
                    "type": "Bytes"
                  },
                  {
                    "name": "value",
                    "type": "BalanceOf"
                  },
                  {
                    "name": "gas_limit",
                    "type": "u64"
                  },
                  {
                    "name": "storage_limit",
                    "type": "u32"
                  }
                ],
                "docs": [
                  " Issue an EVM create operation. This is similar to a contract",
                  " creation transaction in Ethereum.",
                  "",
                  " - `init`: the data supplied for the contract's constructor",
                  " - `value`: the amount sent to the contract upon creation",
                  " - `gas_limit`: the maximum gas the call can use",
                  " - `storage_limit`: the total bytes the contract's storage can increase by"
                ]
              },
              {
                "name": "create2",
                "args": [
                  {
                    "name": "init",
                    "type": "Bytes"
                  },
                  {
                    "name": "salt",
                    "type": "H256"
                  },
                  {
                    "name": "value",
                    "type": "BalanceOf"
                  },
                  {
                    "name": "gas_limit",
                    "type": "u64"
                  },
                  {
                    "name": "storage_limit",
                    "type": "u32"
                  }
                ],
                "docs": [
                  " Issue an EVM create2 operation.",
                  "",
                  " - `target`: the contract address to call",
                  " - `init`: the data supplied for the contract's constructor",
                  " - `salt`: used for generating the new contract's address",
                  " - `value`: the amount sent for payable calls",
                  " - `gas_limit`: the maximum gas the call can use",
                  " - `storage_limit`: the total bytes the contract's storage can increase by"
                ]
              },
              {
                "name": "create_network_contract",
                "args": [
                  {
                    "name": "init",
                    "type": "Bytes"
                  },
                  {
                    "name": "value",
                    "type": "BalanceOf"
                  },
                  {
                    "name": "gas_limit",
                    "type": "u64"
                  },
                  {
                    "name": "storage_limit",
                    "type": "u32"
                  }
                ],
                "docs": [
                  " Issue an EVM create operation. The next available system contract",
                  " address will be used as created contract address.",
                  "",
                  " - `init`: the data supplied for the contract's constructor",
                  " - `value`: the amount sent for payable calls",
                  " - `gas_limit`: the maximum gas the call can use",
                  " - `storage_limit`: the total bytes the contract's storage can increase by"
                ]
              },
              {
                "name": "transfer_maintainer",
                "args": [
                  {
                    "name": "contract",
                    "type": "EvmAddress"
                  },
                  {
                    "name": "new_maintainer",
                    "type": "EvmAddress"
                  }
                ],
                "docs": [
                  " Transfers Contract maintainership to a new EVM Address.",
                  "",
                  " - `contract`: the contract whose maintainership is being transferred, the caller must be",
                  "   the contract's maintainer",
                  " - `new_maintainer`: the address of the new maintainer"
                ]
              },
              {
                "name": "deploy",
                "args": [
                  {
                    "name": "contract",
                    "type": "EvmAddress"
                  }
                ],
                "docs": [
                  " Mark a given contract as deployed.",
                  "",
                  " - `contract`: The contract to mark as deployed, the caller must the contract's",
                  "   maintainer"
                ]
              },
              {
                "name": "deploy_free",
                "args": [
                  {
                    "name": "contract",
                    "type": "EvmAddress"
                  }
                ],
                "docs": [
                  " Mark a given contract as deployed without paying the deployment fee",
                  "",
                  " - `contract`: The contract to mark as deployed, the caller must be the contract's",
                  "   maintainer."
                ]
              },
              {
                "name": "enable_contract_development",
                "args": [],
                "docs": [
                  " Mark the caller's address to allow contract development.",
                  " This allows the address to interact with non-deployed contracts."
                ]
              },
              {
                "name": "disable_contract_development",
                "args": [],
                "docs": [
                  " Mark the caller's address to disable contract development.",
                  " This disallows the address to interact with non-deployed contracts."
                ]
              },
              {
                "name": "set_code",
                "args": [
                  {
                    "name": "contract",
                    "type": "EvmAddress"
                  },
                  {
                    "name": "code",
                    "type": "Bytes"
                  }
                ],
                "docs": [
                  " Set the code of a contract at a given address.",
                  "",
                  " - `contract`: The contract whose code is being set, must not be marked as deployed",
                  " - `code`: The new ABI bundle for the contract"
                ]
              },
              {
                "name": "selfdestruct",
                "args": [
                  {
                    "name": "contract",
                    "type": "EvmAddress"
                  }
                ],
                "docs": [
                  " Remove a contract at a given address.",
                  "",
                  " - `contract`: The contract to remove, must not be marked as deployed"
                ]
              }
            ],
            "events": [
              {
                "name": "Log",
                "args": [
                  "Log"
                ],
                "docs": [
                  " Ethereum events from contracts."
                ]
              },
              {
                "name": "Created",
                "args": [
                  "EvmAddress"
                ],
                "docs": [
                  " A contract has been created at given \\[address\\]."
                ]
              },
              {
                "name": "CreatedFailed",
                "args": [
                  "EvmAddress",
                  "ExitReason",
                  "Bytes"
                ],
                "docs": [
                  " A contract was attempted to be created, but the execution failed.",
                  " \\[contract, exit_reason, output\\]"
                ]
              },
              {
                "name": "Executed",
                "args": [
                  "EvmAddress"
                ],
                "docs": [
                  " A \\[contract\\] has been executed successfully with states applied."
                ]
              },
              {
                "name": "ExecutedFailed",
                "args": [
                  "EvmAddress",
                  "ExitReason",
                  "Bytes"
                ],
                "docs": [
                  " A contract has been executed with errors. States are reverted with",
                  " only gas fees applied. \\[contract, exit_reason, output\\]"
                ]
              },
              {
                "name": "BalanceDeposit",
                "args": [
                  "AccountId",
                  "EvmAddress",
                  "U256"
                ],
                "docs": [
                  " A deposit has been made at a given address. \\[sender, address,",
                  " value\\]"
                ]
              },
              {
                "name": "BalanceWithdraw",
                "args": [
                  "AccountId",
                  "EvmAddress",
                  "U256"
                ],
                "docs": [
                  " A withdrawal has been made from a given address. \\[sender, address,",
                  " value\\]"
                ]
              },
              {
                "name": "AddStorageQuota",
                "args": [
                  "EvmAddress",
                  "u32"
                ],
                "docs": [
                  " A quota has been added at a given address. \\[address, bytes\\]"
                ]
              },
              {
                "name": "RemoveStorageQuota",
                "args": [
                  "EvmAddress",
                  "u32"
                ],
                "docs": [
                  " A quota has been removed at a given address. \\[address, bytes\\]"
                ]
              },
              {
                "name": "TransferredMaintainer",
                "args": [
                  "EvmAddress",
                  "EvmAddress"
                ],
                "docs": [
                  " Transferred maintainer. \\[contract, address\\]"
                ]
              },
              {
                "name": "CanceledTransferMaintainer",
                "args": [
                  "EvmAddress",
                  "EvmAddress"
                ],
                "docs": [
                  " Canceled the transfer maintainer. \\[contract, address\\]"
                ]
              },
              {
                "name": "ConfirmedTransferMaintainer",
                "args": [
                  "EvmAddress",
                  "EvmAddress"
                ],
                "docs": [
                  " Confirmed the transfer maintainer. \\[contract, address\\]"
                ]
              },
              {
                "name": "RejectedTransferMaintainer",
                "args": [
                  "EvmAddress",
                  "EvmAddress"
                ],
                "docs": [
                  " Rejected the transfer maintainer. \\[contract, address\\]"
                ]
              },
              {
                "name": "ContractDevelopmentEnabled",
                "args": [
                  "AccountId"
                ],
                "docs": [
                  " Enabled contract development. \\[who\\]"
                ]
              },
              {
                "name": "ContractDevelopmentDisabled",
                "args": [
                  "AccountId"
                ],
                "docs": [
                  " Disabled contract development. \\[who\\]"
                ]
              },
              {
                "name": "ContractDeployed",
                "args": [
                  "EvmAddress"
                ],
                "docs": [
                  " Deployed contract. \\[contract\\]"
                ]
              },
              {
                "name": "ContractSetCode",
                "args": [
                  "EvmAddress"
                ],
                "docs": [
                  " Set contract code. \\[contract\\]"
                ]
              },
              {
                "name": "ContractSelfdestructed",
                "args": [
                  "EvmAddress"
                ],
                "docs": [
                  " Selfdestructed contract code. \\[contract\\]"
                ]
              }
            ],
            "constants": [
              {
                "name": "NewContractExtraBytes",
                "type": "u32",
                "value": "0x10270000",
                "docs": [
                  " Charge extra bytes for creating a contract, would be reserved until",
                  " the contract deleted."
                ]
              },
              {
                "name": "StorageDepositPerByte",
                "type": "BalanceOf",
                "value": "0x00e1f505000000000000000000000000",
                "docs": [
                  " Storage required for per byte."
                ]
              },
              {
                "name": "MaxCodeSize",
                "type": "u32",
                "value": "0x00600000",
                "docs": [
                  " Contract max code size."
                ]
              },
              {
                "name": "ChainId",
                "type": "u64",
                "value": "0xae02000000000000",
                "docs": [
                  " Chain ID of EVM."
                ]
              },
              {
                "name": "NetworkContractSource",
                "type": "EvmAddress",
                "value": "0x0000000000000000000000000000000000000000",
                "docs": [
                  " The EVM address for creating system contract."
                ]
              },
              {
                "name": "DeveloperDeposit",
                "type": "BalanceOf",
                "value": "0x00407a10f35a00000000000000000000",
                "docs": [
                  " Deposit for the developer."
                ]
              },
              {
                "name": "DeploymentFee",
                "type": "BalanceOf",
                "value": "0x0000c16ff28623000000000000000000",
                "docs": [
                  " The fee for deploying the contract."
                ]
              },
              {
                "name": "TreasuryAccount",
                "type": "AccountId",
                "value": "0x6d6f646c6163612f747273790000000000000000000000000000000000000000",
                "docs": []
              }
            ],
            "errors": [
              {
                "name": "AddressNotMapped",
                "docs": [
                  " Address not mapped"
                ]
              },
              {
                "name": "ContractNotFound",
                "docs": [
                  " Contract not found"
                ]
              },
              {
                "name": "NoPermission",
                "docs": [
                  " No permission"
                ]
              },
              {
                "name": "NumOutOfBound",
                "docs": [
                  " Number out of bound in calculation."
                ]
              },
              {
                "name": "StorageExceedsStorageLimit",
                "docs": [
                  " Storage exceeds max code size"
                ]
              },
              {
                "name": "ContractDevelopmentNotEnabled",
                "docs": [
                  " Contract development is not enabled"
                ]
              },
              {
                "name": "ContractDevelopmentAlreadyEnabled",
                "docs": [
                  " Contract development is already enabled"
                ]
              },
              {
                "name": "ContractAlreadyDeployed",
                "docs": [
                  " Contract already deployed"
                ]
              },
              {
                "name": "ContractExceedsMaxCodeSize",
                "docs": [
                  " Contract exceeds max code size"
                ]
              },
              {
                "name": "OutOfStorage",
                "docs": [
                  " Storage usage exceeds storage limit"
                ]
              },
              {
                "name": "ChargeFeeFailed",
                "docs": [
                  " Charge fee failed"
                ]
              },
              {
                "name": "CannotKillContract",
                "docs": [
                  " Contract cannot be killed due to reference count"
                ]
              },
              {
                "name": "ConflictContractAddress",
                "docs": [
                  " Contract address conflicts with the system contract"
                ]
              }
            ],
            "index": "130"
          },
          {
            "name": "EVMBridge",
            "storage": null,
            "calls": null,
            "events": null,
            "constants": [],
            "errors": [
              {
                "name": "ExecutionFail",
                "docs": [
                  " Execution failed"
                ]
              },
              {
                "name": "ExecutionRevert",
                "docs": [
                  " Execution reverted"
                ]
              },
              {
                "name": "ExecutionFatal",
                "docs": [
                  " Execution fatal"
                ]
              },
              {
                "name": "ExecutionError",
                "docs": [
                  " Execution error"
                ]
              },
              {
                "name": "InvalidReturnValue",
                "docs": [
                  " Invalid return value"
                ]
              }
            ],
            "index": "131"
          },
          {
            "name": "EvmAccounts",
            "storage": {
              "prefix": "EvmAccounts",
              "items": [
                {
                  "name": "Accounts",
                  "modifier": "Optional",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "EvmAddress",
                      "value": "AccountId",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The Substrate Account for EvmAddresses",
                    "",
                    " Accounts: map EvmAddress => Option<AccountId>"
                  ]
                },
                {
                  "name": "EvmAddresses",
                  "modifier": "Optional",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "AccountId",
                      "value": "EvmAddress",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " The EvmAddress for Substrate Accounts",
                    "",
                    " EvmAddresses: map AccountId => Option<EvmAddress>"
                  ]
                }
              ]
            },
            "calls": [
              {
                "name": "claim_account",
                "args": [
                  {
                    "name": "eth_address",
                    "type": "EvmAddress"
                  },
                  {
                    "name": "eth_signature",
                    "type": "EcdsaSignature"
                  }
                ],
                "docs": [
                  " Claim account mapping between Substrate accounts and EVM accounts.",
                  " Ensure eth_address has not been mapped.",
                  "",
                  " - `eth_address`: The address to bind to the caller's account",
                  " - `eth_signature`: A signature generated by the address to prove ownership"
                ]
              },
              {
                "name": "claim_default_account",
                "args": [],
                "docs": [
                  " Claim account mapping between Substrate accounts and a generated EVM",
                  " address based off of those accounts.",
                  " Ensure eth_address has not been mapped"
                ]
              }
            ],
            "events": [
              {
                "name": "ClaimAccount",
                "args": [
                  "AccountId",
                  "EvmAddress"
                ],
                "docs": [
                  " Mapping between Substrate accounts and EVM accounts",
                  " claim account. \\[account_id, evm_address\\]"
                ]
              }
            ],
            "constants": [],
            "errors": [
              {
                "name": "AccountIdHasMapped",
                "docs": [
                  " AccountId has mapped"
                ]
              },
              {
                "name": "EthAddressHasMapped",
                "docs": [
                  " Eth address has mapped"
                ]
              },
              {
                "name": "BadSignature",
                "docs": [
                  " Bad signature"
                ]
              },
              {
                "name": "InvalidSignature",
                "docs": [
                  " Invalid signature"
                ]
              },
              {
                "name": "NonZeroRefCount",
                "docs": [
                  " Account ref count is not zero"
                ]
              }
            ],
            "index": "132"
          },
          {
            "name": "EvmManager",
            "storage": {
              "prefix": "EvmManager",
              "items": [
                {
                  "name": "CurrencyIdMap",
                  "modifier": "Optional",
                  "type": {
                    "map": {
                      "hasher": "Twox64Concat",
                      "key": "u32",
                      "value": "Erc20Info",
                      "linked": false
                    }
                  },
                  "fallback": "0x00",
                  "docs": [
                    " Mapping between u32 and Erc20 address.",
                    " Erc20 address is 20 byte, take the first 4 non-zero bytes, if it is less",
                    " than 4, add 0 to the left.",
                    "",
                    " map u32 => Option<Erc20Info>"
                  ]
                }
              ]
            },
            "calls": null,
            "events": null,
            "constants": [],
            "errors": [
              {
                "name": "CurrencyIdExisted",
                "docs": [
                  " CurrencyId existed"
                ]
              }
            ],
            "index": "133"
          },
          {
            "name": "Sudo",
            "storage": {
              "prefix": "Sudo",
              "items": [
                {
                  "name": "Key",
                  "modifier": "Default",
                  "type": {
                    "plain": "AccountId"
                  },
                  "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                  "docs": [
                    " The `AccountId` of the sudo key."
                  ]
                }
              ]
            },
            "calls": [
              {
                "name": "sudo",
                "args": [
                  {
                    "name": "call",
                    "type": "Call"
                  }
                ],
                "docs": [
                  " Authenticates the sudo key and dispatches a function call with `Root` origin.",
                  "",
                  " The dispatch origin for this call must be _Signed_.",
                  "",
                  " # <weight>",
                  " - O(1).",
                  " - Limited storage reads.",
                  " - One DB write (event).",
                  " - Weight of derivative `call` execution + 10,000.",
                  " # </weight>"
                ]
              },
              {
                "name": "sudo_unchecked_weight",
                "args": [
                  {
                    "name": "call",
                    "type": "Call"
                  },
                  {
                    "name": "_weight",
                    "type": "Weight"
                  }
                ],
                "docs": [
                  " Authenticates the sudo key and dispatches a function call with `Root` origin.",
                  " This function does not check the weight of the call, and instead allows the",
                  " Sudo user to specify the weight of the call.",
                  "",
                  " The dispatch origin for this call must be _Signed_.",
                  "",
                  " # <weight>",
                  " - O(1).",
                  " - The weight of this call is defined by the caller.",
                  " # </weight>"
                ]
              },
              {
                "name": "set_key",
                "args": [
                  {
                    "name": "new",
                    "type": "LookupSource"
                  }
                ],
                "docs": [
                  " Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo key.",
                  "",
                  " The dispatch origin for this call must be _Signed_.",
                  "",
                  " # <weight>",
                  " - O(1).",
                  " - Limited storage reads.",
                  " - One DB change.",
                  " # </weight>"
                ]
              },
              {
                "name": "sudo_as",
                "args": [
                  {
                    "name": "who",
                    "type": "LookupSource"
                  },
                  {
                    "name": "call",
                    "type": "Call"
                  }
                ],
                "docs": [
                  " Authenticates the sudo key and dispatches a function call with `Signed` origin from",
                  " a given account.",
                  "",
                  " The dispatch origin for this call must be _Signed_.",
                  "",
                  " # <weight>",
                  " - O(1).",
                  " - Limited storage reads.",
                  " - One DB write (event).",
                  " - Weight of derivative `call` execution + 10,000.",
                  " # </weight>"
                ]
              }
            ],
            "events": [
              {
                "name": "Sudid",
                "args": [
                  "DispatchResult"
                ],
                "docs": [
                  " A sudo just took place. \\[result\\]"
                ]
              },
              {
                "name": "KeyChanged",
                "args": [
                  "AccountId"
                ],
                "docs": [
                  " The \\[sudoer\\] just switched identity; the old key is supplied."
                ]
              },
              {
                "name": "SudoAsDone",
                "args": [
                  "DispatchResult"
                ],
                "docs": [
                  " A sudo just took place. \\[result\\]"
                ]
              }
            ],
            "constants": [],
            "errors": [
              {
                "name": "RequireSudo",
                "docs": [
                  " Sender must be the Sudo account"
                ]
              }
            ],
            "index": "255"
          }
        ],
        "extrinsic": {
          "version": "4",
          "signedExtensions": [
            "CheckSpecVersion",
            "CheckTxVersion",
            "CheckGenesis",
            "CheckMortality",
            "CheckNonce",
            "CheckWeight",
            "ChargeTransactionPayment",
            "SetEvmOrigin"
          ]
        }
      }
    }
  }
  